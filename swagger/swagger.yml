openapi: 3.0.2
info:
  title: Kikumemo API
  description: API For Kikumemo.
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8077
    description: Local environment
tags:
  - name: admin
    description: Admin
  - name: app
    description: App
  - name: others
    description: Others
paths:
  /api/health_check:
    get:
      tags:
        - others
      summary: Health Check
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: OK
                required:
                  - message
  /api/jewellery:
    get:
      tags:
        - app
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Jewellery'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Jewellery'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
  /api:
    get:
      tags:
        - app
      summary: Display the main page
      responses:
        200:
          description: Main page displayed successfully
  /api/auth/google/login:
    get:
      tags:
        - app
      summary: Initiate Google OAuth2 login
      responses:
        302:
          description: Redirect to Google OAuth2 login page
  /api/auth/google/callback:
    get:
      tags:
        - app
      summary: Handle Google OAuth2 callback
      parameters:
        - name: state
          in: query
          required: true
          schema:
            type: string
          description: OAuth2 state parameter
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: OAuth2 code parameter
      responses:
        302:
          description: Redirect to the main page after handling the callback
  /api/admin/login:
    post:
      tags:
        - admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountAdminLoginParam'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
  /api/admin/account_admin:
    get:
      tags:
        - admin
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountAdmin'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
    post:
      tags:
        - admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountAdmin'
      responses:
        200:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
  /api/admin/account_admin/{account_admins_id}:
    get:
      tags:
        - admin
      parameters:
        - in: path
          name: account_admins_id
          required: true
          schema:
            $ref: '#/components/schemas/AccountAdminID'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountAdmin'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
    put:
      tags:
        - admin
      parameters:
        - in: path
          name: account_admins_id
          required: true
          schema:
            $ref: '#/components/schemas/AccountAdminID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountAdmin'
      responses:
        200:
          description: OK
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
    delete:
      tags:
        - admin
      parameters:
        - in: path
          name: account_admins_id
          required: true
          schema:
            $ref: '#/components/schemas/AccountAdminID'
      responses:
        204:
          description: Deleted
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrMsg'
components:
  parameters:
    JewelleryIDParam:
      name: jewellery_id
      in: path
      description: Jewellery ID
      required: true
      schema:
        $ref: '#/components/schemas/JewelleryID'
  schemas:
    JewelleryID:
      description: Jewellery ID
      type: string
      format: uuid
    Jewellery:
      type: object
      properties:
        jewellery_id:
          $ref: '#/components/schemas/JewelleryID'
          x-oapi-codegen-extra-tags:
            db: jewellery_id
        name:
          type: string
          maxLength: 255
          x-oapi-codegen-extra-tags:
            db: name
          example: Wedding Forever
        description:
          type: string
          maxLength: 255
          x-oapi-codegen-extra-tags:
            db: description
          example: Wedding Forever in Platinum with a Half-circle of Diamonds, 2.2
            mm
        quantity:
          type: integer
          format: int64
          x-oapi-codegen-extra-tags:
            db: quantity
          example: 100
        price:
          type: integer
          format: float64
          x-oapi-codegen-extra-tags:
            db: price
          example: 10000
        image_url:
          type: string
          x-oapi-codegen-extra-tags:
            db: image_url
          example: https://media.tiffany.com/is/image/Tiffany/EcomItemL2/tiffany-foreverband-ring-16574635_1045538_ED_M.jpg?&op_usm=1.75,1.0,6.0&$cropN=0.1,0.1,0.8,0.8&defaultImage=NoImageAvailableInternal&&defaultImage=NoImageAvailableInternal&fmt=webp
    AccountAdminID:
      description: Account Admin ID
      type: string
      format: uuid
    AccountAdmin:
      type: object
      properties:
        account_admin_id:
          $ref: '#/components/schemas/AccountAdminID'
          x-oapi-codegen-extra-tags:
            db: account_admin_id
        mail:
          type: string
          maxLength: 255
          format: email
          x-oapi-codegen-extra-tags:
            db: mail
          example: test@gmail.com
        password:
          type: string
          maxLength: 255
          x-oapi-codegen-extra-tags:
            db: password
          example: '*****'
        account_admin_role:
          type: string
          maxLength: 255
          x-oapi-codegen-extra-tags:
            db: password
          example: staff
          enum:
            - admin
            - staff
        account_admin_status:
          type: string
          maxLength: 255
          enum:
            - active
            - locked
            - deactivated
          x-oapi-codegen-extra-tags:
            db: account_admin_status
          example: active
    AccountAdminLoginParam:
      type: object
      properties:
        mail:
          type: string
          maxLength: 255
          format: email
          x-oapi-codegen-extra-tags:
            db: mail
          example: test@gmail.com
        password:
          type: string
          maxLength: 255
          x-oapi-codegen-extra-tags:
            db: password
          example: '*****'
      required:
        - mail
        - password
    ErrMsg:
      description: Error Message
      properties:
        version:
          type: string
          description: Application Version
        message:
          type: string
          description: Error Message
