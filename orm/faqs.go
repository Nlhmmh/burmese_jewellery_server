// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Faq is an object representing the database table.
type Faq struct {
	FaqID     string    `boil:"faq_id" json:"faqID" toml:"faqID" yaml:"faqID"`
	Question  string    `boil:"question" json:"question" toml:"question" yaml:"question"`
	Answer    string    `boil:"answer" json:"answer" toml:"answer" yaml:"answer"`
	IsActive  bool      `boil:"is_active" json:"isActive" toml:"isActive" yaml:"isActive"`
	CreatedAt time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *faqR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L faqL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FaqColumns = struct {
	FaqID     string
	Question  string
	Answer    string
	IsActive  string
	CreatedAt string
	UpdatedAt string
}{
	FaqID:     "faq_id",
	Question:  "question",
	Answer:    "answer",
	IsActive:  "is_active",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var FaqTableColumns = struct {
	FaqID     string
	Question  string
	Answer    string
	IsActive  string
	CreatedAt string
	UpdatedAt string
}{
	FaqID:     "faqs.faq_id",
	Question:  "faqs.question",
	Answer:    "faqs.answer",
	IsActive:  "faqs.is_active",
	CreatedAt: "faqs.created_at",
	UpdatedAt: "faqs.updated_at",
}

// Generated where

var FaqWhere = struct {
	FaqID     whereHelperstring
	Question  whereHelperstring
	Answer    whereHelperstring
	IsActive  whereHelperbool
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	FaqID:     whereHelperstring{field: "\"faqs\".\"faq_id\""},
	Question:  whereHelperstring{field: "\"faqs\".\"question\""},
	Answer:    whereHelperstring{field: "\"faqs\".\"answer\""},
	IsActive:  whereHelperbool{field: "\"faqs\".\"is_active\""},
	CreatedAt: whereHelpertime_Time{field: "\"faqs\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"faqs\".\"updated_at\""},
}

// FaqRels is where relationship names are stored.
var FaqRels = struct {
}{}

// faqR is where relationships are stored.
type faqR struct {
}

// NewStruct creates a new relationship struct
func (*faqR) NewStruct() *faqR {
	return &faqR{}
}

// faqL is where Load methods for each relationship are stored.
type faqL struct{}

var (
	faqAllColumns            = []string{"faq_id", "question", "answer", "is_active", "created_at", "updated_at"}
	faqColumnsWithoutDefault = []string{"question", "answer", "is_active"}
	faqColumnsWithDefault    = []string{"faq_id", "created_at", "updated_at"}
	faqPrimaryKeyColumns     = []string{"faq_id"}
	faqGeneratedColumns      = []string{}
)

type (
	// FaqSlice is an alias for a slice of pointers to Faq.
	// This should almost always be used instead of []Faq.
	FaqSlice []*Faq
	// FaqHook is the signature for custom Faq hook methods
	FaqHook func(context.Context, boil.ContextExecutor, *Faq) error

	faqQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	faqType                 = reflect.TypeOf(&Faq{})
	faqMapping              = queries.MakeStructMapping(faqType)
	faqPrimaryKeyMapping, _ = queries.BindMapping(faqType, faqMapping, faqPrimaryKeyColumns)
	faqInsertCacheMut       sync.RWMutex
	faqInsertCache          = make(map[string]insertCache)
	faqUpdateCacheMut       sync.RWMutex
	faqUpdateCache          = make(map[string]updateCache)
	faqUpsertCacheMut       sync.RWMutex
	faqUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var faqAfterSelectHooks []FaqHook

var faqBeforeInsertHooks []FaqHook
var faqAfterInsertHooks []FaqHook

var faqBeforeUpdateHooks []FaqHook
var faqAfterUpdateHooks []FaqHook

var faqBeforeDeleteHooks []FaqHook
var faqAfterDeleteHooks []FaqHook

var faqBeforeUpsertHooks []FaqHook
var faqAfterUpsertHooks []FaqHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Faq) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range faqAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Faq) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range faqBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Faq) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range faqAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Faq) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range faqBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Faq) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range faqAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Faq) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range faqBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Faq) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range faqAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Faq) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range faqBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Faq) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range faqAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFaqHook registers your hook function for all future operations.
func AddFaqHook(hookPoint boil.HookPoint, faqHook FaqHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		faqAfterSelectHooks = append(faqAfterSelectHooks, faqHook)
	case boil.BeforeInsertHook:
		faqBeforeInsertHooks = append(faqBeforeInsertHooks, faqHook)
	case boil.AfterInsertHook:
		faqAfterInsertHooks = append(faqAfterInsertHooks, faqHook)
	case boil.BeforeUpdateHook:
		faqBeforeUpdateHooks = append(faqBeforeUpdateHooks, faqHook)
	case boil.AfterUpdateHook:
		faqAfterUpdateHooks = append(faqAfterUpdateHooks, faqHook)
	case boil.BeforeDeleteHook:
		faqBeforeDeleteHooks = append(faqBeforeDeleteHooks, faqHook)
	case boil.AfterDeleteHook:
		faqAfterDeleteHooks = append(faqAfterDeleteHooks, faqHook)
	case boil.BeforeUpsertHook:
		faqBeforeUpsertHooks = append(faqBeforeUpsertHooks, faqHook)
	case boil.AfterUpsertHook:
		faqAfterUpsertHooks = append(faqAfterUpsertHooks, faqHook)
	}
}

// OneG returns a single faq record from the query using the global executor.
func (q faqQuery) OneG(ctx context.Context) (*Faq, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single faq record from the query.
func (q faqQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Faq, error) {
	o := &Faq{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for faqs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Faq records from the query using the global executor.
func (q faqQuery) AllG(ctx context.Context) (FaqSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Faq records from the query.
func (q faqQuery) All(ctx context.Context, exec boil.ContextExecutor) (FaqSlice, error) {
	var o []*Faq

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Faq slice")
	}

	if len(faqAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Faq records in the query using the global executor
func (q faqQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Faq records in the query.
func (q faqQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count faqs rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q faqQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q faqQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if faqs exists")
	}

	return count > 0, nil
}

// Faqs retrieves all the records using an executor.
func Faqs(mods ...qm.QueryMod) faqQuery {
	mods = append(mods, qm.From("\"faqs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"faqs\".*"})
	}

	return faqQuery{q}
}

// FindFaqG retrieves a single record by ID.
func FindFaqG(ctx context.Context, faqID string, selectCols ...string) (*Faq, error) {
	return FindFaq(ctx, boil.GetContextDB(), faqID, selectCols...)
}

// FindFaq retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFaq(ctx context.Context, exec boil.ContextExecutor, faqID string, selectCols ...string) (*Faq, error) {
	faqObj := &Faq{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"faqs\" where \"faq_id\"=$1", sel,
	)

	q := queries.Raw(query, faqID)

	err := q.Bind(ctx, exec, faqObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from faqs")
	}

	if err = faqObj.doAfterSelectHooks(ctx, exec); err != nil {
		return faqObj, err
	}

	return faqObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Faq) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Faq) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no faqs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(faqColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	faqInsertCacheMut.RLock()
	cache, cached := faqInsertCache[key]
	faqInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			faqAllColumns,
			faqColumnsWithDefault,
			faqColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(faqType, faqMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(faqType, faqMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"faqs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"faqs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into faqs")
	}

	if !cached {
		faqInsertCacheMut.Lock()
		faqInsertCache[key] = cache
		faqInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Faq record using the global executor.
// See Update for more documentation.
func (o *Faq) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Faq.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Faq) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	faqUpdateCacheMut.RLock()
	cache, cached := faqUpdateCache[key]
	faqUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			faqAllColumns,
			faqPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update faqs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"faqs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, faqPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(faqType, faqMapping, append(wl, faqPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update faqs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for faqs")
	}

	if !cached {
		faqUpdateCacheMut.Lock()
		faqUpdateCache[key] = cache
		faqUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q faqQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q faqQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for faqs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for faqs")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o FaqSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FaqSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), faqPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"faqs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, faqPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in faq slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all faq")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Faq) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Faq) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no faqs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(faqColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	faqUpsertCacheMut.RLock()
	cache, cached := faqUpsertCache[key]
	faqUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			faqAllColumns,
			faqColumnsWithDefault,
			faqColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			faqAllColumns,
			faqPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert faqs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(faqPrimaryKeyColumns))
			copy(conflict, faqPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"faqs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(faqType, faqMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(faqType, faqMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert faqs")
	}

	if !cached {
		faqUpsertCacheMut.Lock()
		faqUpsertCache[key] = cache
		faqUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Faq record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Faq) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Faq record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Faq) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Faq provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), faqPrimaryKeyMapping)
	sql := "DELETE FROM \"faqs\" WHERE \"faq_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from faqs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for faqs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q faqQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q faqQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no faqQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from faqs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for faqs")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o FaqSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FaqSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(faqBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), faqPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"faqs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, faqPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from faq slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for faqs")
	}

	if len(faqAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Faq) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("orm: no Faq provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Faq) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFaq(ctx, exec, o.FaqID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FaqSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("orm: empty FaqSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FaqSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FaqSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), faqPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"faqs\".* FROM \"faqs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, faqPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in FaqSlice")
	}

	*o = slice

	return nil
}

// FaqExistsG checks if the Faq row exists.
func FaqExistsG(ctx context.Context, faqID string) (bool, error) {
	return FaqExists(ctx, boil.GetContextDB(), faqID)
}

// FaqExists checks if the Faq row exists.
func FaqExists(ctx context.Context, exec boil.ContextExecutor, faqID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"faqs\" where \"faq_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, faqID)
	}
	row := exec.QueryRowContext(ctx, sql, faqID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if faqs exists")
	}

	return exists, nil
}

// Exists checks if the Faq row exists.
func (o *Faq) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FaqExists(ctx, exec, o.FaqID)
}
