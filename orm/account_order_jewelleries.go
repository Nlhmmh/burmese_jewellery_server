// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AccountOrderJewellery is an object representing the database table.
type AccountOrderJewellery struct {
	OrderID     string    `boil:"order_id" json:"orderID" toml:"orderID" yaml:"orderID"`
	JewelleryID string    `boil:"jewellery_id" json:"jewelleryID" toml:"jewelleryID" yaml:"jewelleryID"`
	Quantity    int       `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	Price       int       `boil:"price" json:"price" toml:"price" yaml:"price"`
	CreatedAt   time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *accountOrderJewelleryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L accountOrderJewelleryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AccountOrderJewelleryColumns = struct {
	OrderID     string
	JewelleryID string
	Quantity    string
	Price       string
	CreatedAt   string
	UpdatedAt   string
}{
	OrderID:     "order_id",
	JewelleryID: "jewellery_id",
	Quantity:    "quantity",
	Price:       "price",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var AccountOrderJewelleryTableColumns = struct {
	OrderID     string
	JewelleryID string
	Quantity    string
	Price       string
	CreatedAt   string
	UpdatedAt   string
}{
	OrderID:     "account_order_jewelleries.order_id",
	JewelleryID: "account_order_jewelleries.jewellery_id",
	Quantity:    "account_order_jewelleries.quantity",
	Price:       "account_order_jewelleries.price",
	CreatedAt:   "account_order_jewelleries.created_at",
	UpdatedAt:   "account_order_jewelleries.updated_at",
}

// Generated where

var AccountOrderJewelleryWhere = struct {
	OrderID     whereHelperstring
	JewelleryID whereHelperstring
	Quantity    whereHelperint
	Price       whereHelperint
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	OrderID:     whereHelperstring{field: "\"account_order_jewelleries\".\"order_id\""},
	JewelleryID: whereHelperstring{field: "\"account_order_jewelleries\".\"jewellery_id\""},
	Quantity:    whereHelperint{field: "\"account_order_jewelleries\".\"quantity\""},
	Price:       whereHelperint{field: "\"account_order_jewelleries\".\"price\""},
	CreatedAt:   whereHelpertime_Time{field: "\"account_order_jewelleries\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"account_order_jewelleries\".\"updated_at\""},
}

// AccountOrderJewelleryRels is where relationship names are stored.
var AccountOrderJewelleryRels = struct {
	Jewellery string
	Order     string
}{
	Jewellery: "Jewellery",
	Order:     "Order",
}

// accountOrderJewelleryR is where relationships are stored.
type accountOrderJewelleryR struct {
	Jewellery *Jewellery    `boil:"Jewellery" json:"Jewellery" toml:"Jewellery" yaml:"Jewellery"`
	Order     *AccountOrder `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
}

// NewStruct creates a new relationship struct
func (*accountOrderJewelleryR) NewStruct() *accountOrderJewelleryR {
	return &accountOrderJewelleryR{}
}

func (r *accountOrderJewelleryR) GetJewellery() *Jewellery {
	if r == nil {
		return nil
	}
	return r.Jewellery
}

func (r *accountOrderJewelleryR) GetOrder() *AccountOrder {
	if r == nil {
		return nil
	}
	return r.Order
}

// accountOrderJewelleryL is where Load methods for each relationship are stored.
type accountOrderJewelleryL struct{}

var (
	accountOrderJewelleryAllColumns            = []string{"order_id", "jewellery_id", "quantity", "price", "created_at", "updated_at"}
	accountOrderJewelleryColumnsWithoutDefault = []string{"order_id", "jewellery_id", "quantity", "price"}
	accountOrderJewelleryColumnsWithDefault    = []string{"created_at", "updated_at"}
	accountOrderJewelleryPrimaryKeyColumns     = []string{"order_id", "jewellery_id"}
	accountOrderJewelleryGeneratedColumns      = []string{}
)

type (
	// AccountOrderJewellerySlice is an alias for a slice of pointers to AccountOrderJewellery.
	// This should almost always be used instead of []AccountOrderJewellery.
	AccountOrderJewellerySlice []*AccountOrderJewellery
	// AccountOrderJewelleryHook is the signature for custom AccountOrderJewellery hook methods
	AccountOrderJewelleryHook func(context.Context, boil.ContextExecutor, *AccountOrderJewellery) error

	accountOrderJewelleryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	accountOrderJewelleryType                 = reflect.TypeOf(&AccountOrderJewellery{})
	accountOrderJewelleryMapping              = queries.MakeStructMapping(accountOrderJewelleryType)
	accountOrderJewelleryPrimaryKeyMapping, _ = queries.BindMapping(accountOrderJewelleryType, accountOrderJewelleryMapping, accountOrderJewelleryPrimaryKeyColumns)
	accountOrderJewelleryInsertCacheMut       sync.RWMutex
	accountOrderJewelleryInsertCache          = make(map[string]insertCache)
	accountOrderJewelleryUpdateCacheMut       sync.RWMutex
	accountOrderJewelleryUpdateCache          = make(map[string]updateCache)
	accountOrderJewelleryUpsertCacheMut       sync.RWMutex
	accountOrderJewelleryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var accountOrderJewelleryAfterSelectHooks []AccountOrderJewelleryHook

var accountOrderJewelleryBeforeInsertHooks []AccountOrderJewelleryHook
var accountOrderJewelleryAfterInsertHooks []AccountOrderJewelleryHook

var accountOrderJewelleryBeforeUpdateHooks []AccountOrderJewelleryHook
var accountOrderJewelleryAfterUpdateHooks []AccountOrderJewelleryHook

var accountOrderJewelleryBeforeDeleteHooks []AccountOrderJewelleryHook
var accountOrderJewelleryAfterDeleteHooks []AccountOrderJewelleryHook

var accountOrderJewelleryBeforeUpsertHooks []AccountOrderJewelleryHook
var accountOrderJewelleryAfterUpsertHooks []AccountOrderJewelleryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AccountOrderJewellery) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOrderJewelleryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AccountOrderJewellery) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOrderJewelleryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AccountOrderJewellery) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOrderJewelleryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AccountOrderJewellery) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOrderJewelleryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AccountOrderJewellery) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOrderJewelleryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AccountOrderJewellery) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOrderJewelleryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AccountOrderJewellery) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOrderJewelleryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AccountOrderJewellery) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOrderJewelleryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AccountOrderJewellery) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOrderJewelleryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAccountOrderJewelleryHook registers your hook function for all future operations.
func AddAccountOrderJewelleryHook(hookPoint boil.HookPoint, accountOrderJewelleryHook AccountOrderJewelleryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		accountOrderJewelleryAfterSelectHooks = append(accountOrderJewelleryAfterSelectHooks, accountOrderJewelleryHook)
	case boil.BeforeInsertHook:
		accountOrderJewelleryBeforeInsertHooks = append(accountOrderJewelleryBeforeInsertHooks, accountOrderJewelleryHook)
	case boil.AfterInsertHook:
		accountOrderJewelleryAfterInsertHooks = append(accountOrderJewelleryAfterInsertHooks, accountOrderJewelleryHook)
	case boil.BeforeUpdateHook:
		accountOrderJewelleryBeforeUpdateHooks = append(accountOrderJewelleryBeforeUpdateHooks, accountOrderJewelleryHook)
	case boil.AfterUpdateHook:
		accountOrderJewelleryAfterUpdateHooks = append(accountOrderJewelleryAfterUpdateHooks, accountOrderJewelleryHook)
	case boil.BeforeDeleteHook:
		accountOrderJewelleryBeforeDeleteHooks = append(accountOrderJewelleryBeforeDeleteHooks, accountOrderJewelleryHook)
	case boil.AfterDeleteHook:
		accountOrderJewelleryAfterDeleteHooks = append(accountOrderJewelleryAfterDeleteHooks, accountOrderJewelleryHook)
	case boil.BeforeUpsertHook:
		accountOrderJewelleryBeforeUpsertHooks = append(accountOrderJewelleryBeforeUpsertHooks, accountOrderJewelleryHook)
	case boil.AfterUpsertHook:
		accountOrderJewelleryAfterUpsertHooks = append(accountOrderJewelleryAfterUpsertHooks, accountOrderJewelleryHook)
	}
}

// OneG returns a single accountOrderJewellery record from the query using the global executor.
func (q accountOrderJewelleryQuery) OneG(ctx context.Context) (*AccountOrderJewellery, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single accountOrderJewellery record from the query.
func (q accountOrderJewelleryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AccountOrderJewellery, error) {
	o := &AccountOrderJewellery{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for account_order_jewelleries")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AccountOrderJewellery records from the query using the global executor.
func (q accountOrderJewelleryQuery) AllG(ctx context.Context) (AccountOrderJewellerySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AccountOrderJewellery records from the query.
func (q accountOrderJewelleryQuery) All(ctx context.Context, exec boil.ContextExecutor) (AccountOrderJewellerySlice, error) {
	var o []*AccountOrderJewellery

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to AccountOrderJewellery slice")
	}

	if len(accountOrderJewelleryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AccountOrderJewellery records in the query using the global executor
func (q accountOrderJewelleryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AccountOrderJewellery records in the query.
func (q accountOrderJewelleryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count account_order_jewelleries rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q accountOrderJewelleryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q accountOrderJewelleryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if account_order_jewelleries exists")
	}

	return count > 0, nil
}

// Jewellery pointed to by the foreign key.
func (o *AccountOrderJewellery) Jewellery(mods ...qm.QueryMod) jewelleryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"jewellery_id\" = ?", o.JewelleryID),
	}

	queryMods = append(queryMods, mods...)

	return Jewelleries(queryMods...)
}

// Order pointed to by the foreign key.
func (o *AccountOrderJewellery) Order(mods ...qm.QueryMod) accountOrderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"order_id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return AccountOrders(queryMods...)
}

// LoadJewellery allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (accountOrderJewelleryL) LoadJewellery(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccountOrderJewellery interface{}, mods queries.Applicator) error {
	var slice []*AccountOrderJewellery
	var object *AccountOrderJewellery

	if singular {
		var ok bool
		object, ok = maybeAccountOrderJewellery.(*AccountOrderJewellery)
		if !ok {
			object = new(AccountOrderJewellery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAccountOrderJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAccountOrderJewellery))
			}
		}
	} else {
		s, ok := maybeAccountOrderJewellery.(*[]*AccountOrderJewellery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAccountOrderJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAccountOrderJewellery))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &accountOrderJewelleryR{}
		}
		args = append(args, object.JewelleryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountOrderJewelleryR{}
			}

			for _, a := range args {
				if a == obj.JewelleryID {
					continue Outer
				}
			}

			args = append(args, obj.JewelleryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`jewelleries`),
		qm.WhereIn(`jewelleries.jewellery_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Jewellery")
	}

	var resultSlice []*Jewellery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Jewellery")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for jewelleries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for jewelleries")
	}

	if len(jewelleryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Jewellery = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.JewelleryID == foreign.JewelleryID {
				local.R.Jewellery = foreign
				break
			}
		}
	}

	return nil
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (accountOrderJewelleryL) LoadOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccountOrderJewellery interface{}, mods queries.Applicator) error {
	var slice []*AccountOrderJewellery
	var object *AccountOrderJewellery

	if singular {
		var ok bool
		object, ok = maybeAccountOrderJewellery.(*AccountOrderJewellery)
		if !ok {
			object = new(AccountOrderJewellery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAccountOrderJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAccountOrderJewellery))
			}
		}
	} else {
		s, ok := maybeAccountOrderJewellery.(*[]*AccountOrderJewellery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAccountOrderJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAccountOrderJewellery))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &accountOrderJewelleryR{}
		}
		args = append(args, object.OrderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountOrderJewelleryR{}
			}

			for _, a := range args {
				if a == obj.OrderID {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account_orders`),
		qm.WhereIn(`account_orders.order_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AccountOrder")
	}

	var resultSlice []*AccountOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AccountOrder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account_orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account_orders")
	}

	if len(accountOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderID == foreign.OrderID {
				local.R.Order = foreign
				break
			}
		}
	}

	return nil
}

// SetJewelleryG of the accountOrderJewellery to the related item.
// Sets o.R.Jewellery to related.
// Uses the global database handle.
func (o *AccountOrderJewellery) SetJewelleryG(ctx context.Context, insert bool, related *Jewellery) error {
	return o.SetJewellery(ctx, boil.GetContextDB(), insert, related)
}

// SetJewellery of the accountOrderJewellery to the related item.
// Sets o.R.Jewellery to related.
func (o *AccountOrderJewellery) SetJewellery(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Jewellery) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"account_order_jewelleries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"jewellery_id"}),
		strmangle.WhereClause("\"", "\"", 2, accountOrderJewelleryPrimaryKeyColumns),
	)
	values := []interface{}{related.JewelleryID, o.OrderID, o.JewelleryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.JewelleryID = related.JewelleryID
	if o.R == nil {
		o.R = &accountOrderJewelleryR{
			Jewellery: related,
		}
	} else {
		o.R.Jewellery = related
	}

	return nil
}

// SetOrderG of the accountOrderJewellery to the related item.
// Sets o.R.Order to related.
// Uses the global database handle.
func (o *AccountOrderJewellery) SetOrderG(ctx context.Context, insert bool, related *AccountOrder) error {
	return o.SetOrder(ctx, boil.GetContextDB(), insert, related)
}

// SetOrder of the accountOrderJewellery to the related item.
// Sets o.R.Order to related.
func (o *AccountOrderJewellery) SetOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AccountOrder) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"account_order_jewelleries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, accountOrderJewelleryPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderID, o.OrderID, o.JewelleryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderID = related.OrderID
	if o.R == nil {
		o.R = &accountOrderJewelleryR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	return nil
}

// AccountOrderJewelleries retrieves all the records using an executor.
func AccountOrderJewelleries(mods ...qm.QueryMod) accountOrderJewelleryQuery {
	mods = append(mods, qm.From("\"account_order_jewelleries\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"account_order_jewelleries\".*"})
	}

	return accountOrderJewelleryQuery{q}
}

// FindAccountOrderJewelleryG retrieves a single record by ID.
func FindAccountOrderJewelleryG(ctx context.Context, orderID string, jewelleryID string, selectCols ...string) (*AccountOrderJewellery, error) {
	return FindAccountOrderJewellery(ctx, boil.GetContextDB(), orderID, jewelleryID, selectCols...)
}

// FindAccountOrderJewellery retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAccountOrderJewellery(ctx context.Context, exec boil.ContextExecutor, orderID string, jewelleryID string, selectCols ...string) (*AccountOrderJewellery, error) {
	accountOrderJewelleryObj := &AccountOrderJewellery{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"account_order_jewelleries\" where \"order_id\"=$1 AND \"jewellery_id\"=$2", sel,
	)

	q := queries.Raw(query, orderID, jewelleryID)

	err := q.Bind(ctx, exec, accountOrderJewelleryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from account_order_jewelleries")
	}

	if err = accountOrderJewelleryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return accountOrderJewelleryObj, err
	}

	return accountOrderJewelleryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AccountOrderJewellery) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AccountOrderJewellery) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no account_order_jewelleries provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountOrderJewelleryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	accountOrderJewelleryInsertCacheMut.RLock()
	cache, cached := accountOrderJewelleryInsertCache[key]
	accountOrderJewelleryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			accountOrderJewelleryAllColumns,
			accountOrderJewelleryColumnsWithDefault,
			accountOrderJewelleryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(accountOrderJewelleryType, accountOrderJewelleryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(accountOrderJewelleryType, accountOrderJewelleryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"account_order_jewelleries\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"account_order_jewelleries\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into account_order_jewelleries")
	}

	if !cached {
		accountOrderJewelleryInsertCacheMut.Lock()
		accountOrderJewelleryInsertCache[key] = cache
		accountOrderJewelleryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AccountOrderJewellery record using the global executor.
// See Update for more documentation.
func (o *AccountOrderJewellery) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AccountOrderJewellery.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AccountOrderJewellery) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	accountOrderJewelleryUpdateCacheMut.RLock()
	cache, cached := accountOrderJewelleryUpdateCache[key]
	accountOrderJewelleryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			accountOrderJewelleryAllColumns,
			accountOrderJewelleryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update account_order_jewelleries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"account_order_jewelleries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, accountOrderJewelleryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(accountOrderJewelleryType, accountOrderJewelleryMapping, append(wl, accountOrderJewelleryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update account_order_jewelleries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for account_order_jewelleries")
	}

	if !cached {
		accountOrderJewelleryUpdateCacheMut.Lock()
		accountOrderJewelleryUpdateCache[key] = cache
		accountOrderJewelleryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q accountOrderJewelleryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q accountOrderJewelleryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for account_order_jewelleries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for account_order_jewelleries")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AccountOrderJewellerySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AccountOrderJewellerySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountOrderJewelleryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"account_order_jewelleries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, accountOrderJewelleryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in accountOrderJewellery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all accountOrderJewellery")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AccountOrderJewellery) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AccountOrderJewellery) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no account_order_jewelleries provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountOrderJewelleryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	accountOrderJewelleryUpsertCacheMut.RLock()
	cache, cached := accountOrderJewelleryUpsertCache[key]
	accountOrderJewelleryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			accountOrderJewelleryAllColumns,
			accountOrderJewelleryColumnsWithDefault,
			accountOrderJewelleryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			accountOrderJewelleryAllColumns,
			accountOrderJewelleryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert account_order_jewelleries, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(accountOrderJewelleryPrimaryKeyColumns))
			copy(conflict, accountOrderJewelleryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"account_order_jewelleries\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(accountOrderJewelleryType, accountOrderJewelleryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(accountOrderJewelleryType, accountOrderJewelleryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert account_order_jewelleries")
	}

	if !cached {
		accountOrderJewelleryUpsertCacheMut.Lock()
		accountOrderJewelleryUpsertCache[key] = cache
		accountOrderJewelleryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AccountOrderJewellery record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AccountOrderJewellery) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AccountOrderJewellery record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AccountOrderJewellery) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no AccountOrderJewellery provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), accountOrderJewelleryPrimaryKeyMapping)
	sql := "DELETE FROM \"account_order_jewelleries\" WHERE \"order_id\"=$1 AND \"jewellery_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from account_order_jewelleries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for account_order_jewelleries")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q accountOrderJewelleryQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q accountOrderJewelleryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no accountOrderJewelleryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from account_order_jewelleries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for account_order_jewelleries")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AccountOrderJewellerySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AccountOrderJewellerySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(accountOrderJewelleryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountOrderJewelleryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"account_order_jewelleries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountOrderJewelleryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from accountOrderJewellery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for account_order_jewelleries")
	}

	if len(accountOrderJewelleryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AccountOrderJewellery) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("orm: no AccountOrderJewellery provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AccountOrderJewellery) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAccountOrderJewellery(ctx, exec, o.OrderID, o.JewelleryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountOrderJewellerySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("orm: empty AccountOrderJewellerySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountOrderJewellerySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AccountOrderJewellerySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountOrderJewelleryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"account_order_jewelleries\".* FROM \"account_order_jewelleries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountOrderJewelleryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in AccountOrderJewellerySlice")
	}

	*o = slice

	return nil
}

// AccountOrderJewelleryExistsG checks if the AccountOrderJewellery row exists.
func AccountOrderJewelleryExistsG(ctx context.Context, orderID string, jewelleryID string) (bool, error) {
	return AccountOrderJewelleryExists(ctx, boil.GetContextDB(), orderID, jewelleryID)
}

// AccountOrderJewelleryExists checks if the AccountOrderJewellery row exists.
func AccountOrderJewelleryExists(ctx context.Context, exec boil.ContextExecutor, orderID string, jewelleryID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"account_order_jewelleries\" where \"order_id\"=$1 AND \"jewellery_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, orderID, jewelleryID)
	}
	row := exec.QueryRowContext(ctx, sql, orderID, jewelleryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if account_order_jewelleries exists")
	}

	return exists, nil
}

// Exists checks if the AccountOrderJewellery row exists.
func (o *AccountOrderJewellery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AccountOrderJewelleryExists(ctx, exec, o.OrderID, o.JewelleryID)
}
