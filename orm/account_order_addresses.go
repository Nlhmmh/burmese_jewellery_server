// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AccountOrderAddress is an object representing the database table.
type AccountOrderAddress struct {
	OrderID     string      `boil:"order_id" json:"orderID" toml:"orderID" yaml:"orderID"`
	CountryCode string      `boil:"country_code" json:"countryCode" toml:"countryCode" yaml:"countryCode"`
	PostCode    null.String `boil:"post_code" json:"postCode,omitempty" toml:"postCode" yaml:"postCode,omitempty"`
	// State, Province, Division
	State     null.String `boil:"state" json:"state,omitempty" toml:"state" yaml:"state,omitempty"`
	City      string      `boil:"city" json:"city" toml:"city" yaml:"city"`
	Address   string      `boil:"address" json:"address" toml:"address" yaml:"address"`
	Remarks   null.String `boil:"remarks" json:"remarks,omitempty" toml:"remarks" yaml:"remarks,omitempty"`
	CreatedAt time.Time   `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *accountOrderAddressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L accountOrderAddressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AccountOrderAddressColumns = struct {
	OrderID     string
	CountryCode string
	PostCode    string
	State       string
	City        string
	Address     string
	Remarks     string
	CreatedAt   string
	UpdatedAt   string
}{
	OrderID:     "order_id",
	CountryCode: "country_code",
	PostCode:    "post_code",
	State:       "state",
	City:        "city",
	Address:     "address",
	Remarks:     "remarks",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var AccountOrderAddressTableColumns = struct {
	OrderID     string
	CountryCode string
	PostCode    string
	State       string
	City        string
	Address     string
	Remarks     string
	CreatedAt   string
	UpdatedAt   string
}{
	OrderID:     "account_order_addresses.order_id",
	CountryCode: "account_order_addresses.country_code",
	PostCode:    "account_order_addresses.post_code",
	State:       "account_order_addresses.state",
	City:        "account_order_addresses.city",
	Address:     "account_order_addresses.address",
	Remarks:     "account_order_addresses.remarks",
	CreatedAt:   "account_order_addresses.created_at",
	UpdatedAt:   "account_order_addresses.updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AccountOrderAddressWhere = struct {
	OrderID     whereHelperstring
	CountryCode whereHelperstring
	PostCode    whereHelpernull_String
	State       whereHelpernull_String
	City        whereHelperstring
	Address     whereHelperstring
	Remarks     whereHelpernull_String
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	OrderID:     whereHelperstring{field: "\"account_order_addresses\".\"order_id\""},
	CountryCode: whereHelperstring{field: "\"account_order_addresses\".\"country_code\""},
	PostCode:    whereHelpernull_String{field: "\"account_order_addresses\".\"post_code\""},
	State:       whereHelpernull_String{field: "\"account_order_addresses\".\"state\""},
	City:        whereHelperstring{field: "\"account_order_addresses\".\"city\""},
	Address:     whereHelperstring{field: "\"account_order_addresses\".\"address\""},
	Remarks:     whereHelpernull_String{field: "\"account_order_addresses\".\"remarks\""},
	CreatedAt:   whereHelpertime_Time{field: "\"account_order_addresses\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"account_order_addresses\".\"updated_at\""},
}

// AccountOrderAddressRels is where relationship names are stored.
var AccountOrderAddressRels = struct {
	Order string
}{
	Order: "Order",
}

// accountOrderAddressR is where relationships are stored.
type accountOrderAddressR struct {
	Order *AccountOrder `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
}

// NewStruct creates a new relationship struct
func (*accountOrderAddressR) NewStruct() *accountOrderAddressR {
	return &accountOrderAddressR{}
}

func (r *accountOrderAddressR) GetOrder() *AccountOrder {
	if r == nil {
		return nil
	}
	return r.Order
}

// accountOrderAddressL is where Load methods for each relationship are stored.
type accountOrderAddressL struct{}

var (
	accountOrderAddressAllColumns            = []string{"order_id", "country_code", "post_code", "state", "city", "address", "remarks", "created_at", "updated_at"}
	accountOrderAddressColumnsWithoutDefault = []string{"order_id", "country_code", "city", "address"}
	accountOrderAddressColumnsWithDefault    = []string{"post_code", "state", "remarks", "created_at", "updated_at"}
	accountOrderAddressPrimaryKeyColumns     = []string{"order_id"}
	accountOrderAddressGeneratedColumns      = []string{}
)

type (
	// AccountOrderAddressSlice is an alias for a slice of pointers to AccountOrderAddress.
	// This should almost always be used instead of []AccountOrderAddress.
	AccountOrderAddressSlice []*AccountOrderAddress
	// AccountOrderAddressHook is the signature for custom AccountOrderAddress hook methods
	AccountOrderAddressHook func(context.Context, boil.ContextExecutor, *AccountOrderAddress) error

	accountOrderAddressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	accountOrderAddressType                 = reflect.TypeOf(&AccountOrderAddress{})
	accountOrderAddressMapping              = queries.MakeStructMapping(accountOrderAddressType)
	accountOrderAddressPrimaryKeyMapping, _ = queries.BindMapping(accountOrderAddressType, accountOrderAddressMapping, accountOrderAddressPrimaryKeyColumns)
	accountOrderAddressInsertCacheMut       sync.RWMutex
	accountOrderAddressInsertCache          = make(map[string]insertCache)
	accountOrderAddressUpdateCacheMut       sync.RWMutex
	accountOrderAddressUpdateCache          = make(map[string]updateCache)
	accountOrderAddressUpsertCacheMut       sync.RWMutex
	accountOrderAddressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var accountOrderAddressAfterSelectHooks []AccountOrderAddressHook

var accountOrderAddressBeforeInsertHooks []AccountOrderAddressHook
var accountOrderAddressAfterInsertHooks []AccountOrderAddressHook

var accountOrderAddressBeforeUpdateHooks []AccountOrderAddressHook
var accountOrderAddressAfterUpdateHooks []AccountOrderAddressHook

var accountOrderAddressBeforeDeleteHooks []AccountOrderAddressHook
var accountOrderAddressAfterDeleteHooks []AccountOrderAddressHook

var accountOrderAddressBeforeUpsertHooks []AccountOrderAddressHook
var accountOrderAddressAfterUpsertHooks []AccountOrderAddressHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AccountOrderAddress) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOrderAddressAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AccountOrderAddress) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOrderAddressBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AccountOrderAddress) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOrderAddressAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AccountOrderAddress) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOrderAddressBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AccountOrderAddress) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOrderAddressAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AccountOrderAddress) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOrderAddressBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AccountOrderAddress) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOrderAddressAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AccountOrderAddress) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOrderAddressBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AccountOrderAddress) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountOrderAddressAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAccountOrderAddressHook registers your hook function for all future operations.
func AddAccountOrderAddressHook(hookPoint boil.HookPoint, accountOrderAddressHook AccountOrderAddressHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		accountOrderAddressAfterSelectHooks = append(accountOrderAddressAfterSelectHooks, accountOrderAddressHook)
	case boil.BeforeInsertHook:
		accountOrderAddressBeforeInsertHooks = append(accountOrderAddressBeforeInsertHooks, accountOrderAddressHook)
	case boil.AfterInsertHook:
		accountOrderAddressAfterInsertHooks = append(accountOrderAddressAfterInsertHooks, accountOrderAddressHook)
	case boil.BeforeUpdateHook:
		accountOrderAddressBeforeUpdateHooks = append(accountOrderAddressBeforeUpdateHooks, accountOrderAddressHook)
	case boil.AfterUpdateHook:
		accountOrderAddressAfterUpdateHooks = append(accountOrderAddressAfterUpdateHooks, accountOrderAddressHook)
	case boil.BeforeDeleteHook:
		accountOrderAddressBeforeDeleteHooks = append(accountOrderAddressBeforeDeleteHooks, accountOrderAddressHook)
	case boil.AfterDeleteHook:
		accountOrderAddressAfterDeleteHooks = append(accountOrderAddressAfterDeleteHooks, accountOrderAddressHook)
	case boil.BeforeUpsertHook:
		accountOrderAddressBeforeUpsertHooks = append(accountOrderAddressBeforeUpsertHooks, accountOrderAddressHook)
	case boil.AfterUpsertHook:
		accountOrderAddressAfterUpsertHooks = append(accountOrderAddressAfterUpsertHooks, accountOrderAddressHook)
	}
}

// OneG returns a single accountOrderAddress record from the query using the global executor.
func (q accountOrderAddressQuery) OneG(ctx context.Context) (*AccountOrderAddress, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single accountOrderAddress record from the query.
func (q accountOrderAddressQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AccountOrderAddress, error) {
	o := &AccountOrderAddress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for account_order_addresses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AccountOrderAddress records from the query using the global executor.
func (q accountOrderAddressQuery) AllG(ctx context.Context) (AccountOrderAddressSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AccountOrderAddress records from the query.
func (q accountOrderAddressQuery) All(ctx context.Context, exec boil.ContextExecutor) (AccountOrderAddressSlice, error) {
	var o []*AccountOrderAddress

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to AccountOrderAddress slice")
	}

	if len(accountOrderAddressAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AccountOrderAddress records in the query using the global executor
func (q accountOrderAddressQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AccountOrderAddress records in the query.
func (q accountOrderAddressQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count account_order_addresses rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q accountOrderAddressQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q accountOrderAddressQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if account_order_addresses exists")
	}

	return count > 0, nil
}

// Order pointed to by the foreign key.
func (o *AccountOrderAddress) Order(mods ...qm.QueryMod) accountOrderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"order_id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return AccountOrders(queryMods...)
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (accountOrderAddressL) LoadOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccountOrderAddress interface{}, mods queries.Applicator) error {
	var slice []*AccountOrderAddress
	var object *AccountOrderAddress

	if singular {
		var ok bool
		object, ok = maybeAccountOrderAddress.(*AccountOrderAddress)
		if !ok {
			object = new(AccountOrderAddress)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAccountOrderAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAccountOrderAddress))
			}
		}
	} else {
		s, ok := maybeAccountOrderAddress.(*[]*AccountOrderAddress)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAccountOrderAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAccountOrderAddress))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &accountOrderAddressR{}
		}
		args = append(args, object.OrderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountOrderAddressR{}
			}

			for _, a := range args {
				if a == obj.OrderID {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account_orders`),
		qm.WhereIn(`account_orders.order_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AccountOrder")
	}

	var resultSlice []*AccountOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AccountOrder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account_orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account_orders")
	}

	if len(accountOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderID == foreign.OrderID {
				local.R.Order = foreign
				break
			}
		}
	}

	return nil
}

// SetOrderG of the accountOrderAddress to the related item.
// Sets o.R.Order to related.
// Uses the global database handle.
func (o *AccountOrderAddress) SetOrderG(ctx context.Context, insert bool, related *AccountOrder) error {
	return o.SetOrder(ctx, boil.GetContextDB(), insert, related)
}

// SetOrder of the accountOrderAddress to the related item.
// Sets o.R.Order to related.
func (o *AccountOrderAddress) SetOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AccountOrder) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"account_order_addresses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, accountOrderAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderID, o.OrderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderID = related.OrderID
	if o.R == nil {
		o.R = &accountOrderAddressR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	return nil
}

// AccountOrderAddresses retrieves all the records using an executor.
func AccountOrderAddresses(mods ...qm.QueryMod) accountOrderAddressQuery {
	mods = append(mods, qm.From("\"account_order_addresses\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"account_order_addresses\".*"})
	}

	return accountOrderAddressQuery{q}
}

// FindAccountOrderAddressG retrieves a single record by ID.
func FindAccountOrderAddressG(ctx context.Context, orderID string, selectCols ...string) (*AccountOrderAddress, error) {
	return FindAccountOrderAddress(ctx, boil.GetContextDB(), orderID, selectCols...)
}

// FindAccountOrderAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAccountOrderAddress(ctx context.Context, exec boil.ContextExecutor, orderID string, selectCols ...string) (*AccountOrderAddress, error) {
	accountOrderAddressObj := &AccountOrderAddress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"account_order_addresses\" where \"order_id\"=$1", sel,
	)

	q := queries.Raw(query, orderID)

	err := q.Bind(ctx, exec, accountOrderAddressObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from account_order_addresses")
	}

	if err = accountOrderAddressObj.doAfterSelectHooks(ctx, exec); err != nil {
		return accountOrderAddressObj, err
	}

	return accountOrderAddressObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AccountOrderAddress) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AccountOrderAddress) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no account_order_addresses provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountOrderAddressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	accountOrderAddressInsertCacheMut.RLock()
	cache, cached := accountOrderAddressInsertCache[key]
	accountOrderAddressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			accountOrderAddressAllColumns,
			accountOrderAddressColumnsWithDefault,
			accountOrderAddressColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(accountOrderAddressType, accountOrderAddressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(accountOrderAddressType, accountOrderAddressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"account_order_addresses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"account_order_addresses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into account_order_addresses")
	}

	if !cached {
		accountOrderAddressInsertCacheMut.Lock()
		accountOrderAddressInsertCache[key] = cache
		accountOrderAddressInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AccountOrderAddress record using the global executor.
// See Update for more documentation.
func (o *AccountOrderAddress) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AccountOrderAddress.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AccountOrderAddress) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	accountOrderAddressUpdateCacheMut.RLock()
	cache, cached := accountOrderAddressUpdateCache[key]
	accountOrderAddressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			accountOrderAddressAllColumns,
			accountOrderAddressPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update account_order_addresses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"account_order_addresses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, accountOrderAddressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(accountOrderAddressType, accountOrderAddressMapping, append(wl, accountOrderAddressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update account_order_addresses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for account_order_addresses")
	}

	if !cached {
		accountOrderAddressUpdateCacheMut.Lock()
		accountOrderAddressUpdateCache[key] = cache
		accountOrderAddressUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q accountOrderAddressQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q accountOrderAddressQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for account_order_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for account_order_addresses")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AccountOrderAddressSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AccountOrderAddressSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountOrderAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"account_order_addresses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, accountOrderAddressPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in accountOrderAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all accountOrderAddress")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AccountOrderAddress) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AccountOrderAddress) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no account_order_addresses provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountOrderAddressColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	accountOrderAddressUpsertCacheMut.RLock()
	cache, cached := accountOrderAddressUpsertCache[key]
	accountOrderAddressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			accountOrderAddressAllColumns,
			accountOrderAddressColumnsWithDefault,
			accountOrderAddressColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			accountOrderAddressAllColumns,
			accountOrderAddressPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert account_order_addresses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(accountOrderAddressPrimaryKeyColumns))
			copy(conflict, accountOrderAddressPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"account_order_addresses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(accountOrderAddressType, accountOrderAddressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(accountOrderAddressType, accountOrderAddressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert account_order_addresses")
	}

	if !cached {
		accountOrderAddressUpsertCacheMut.Lock()
		accountOrderAddressUpsertCache[key] = cache
		accountOrderAddressUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AccountOrderAddress record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AccountOrderAddress) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AccountOrderAddress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AccountOrderAddress) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no AccountOrderAddress provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), accountOrderAddressPrimaryKeyMapping)
	sql := "DELETE FROM \"account_order_addresses\" WHERE \"order_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from account_order_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for account_order_addresses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q accountOrderAddressQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q accountOrderAddressQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no accountOrderAddressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from account_order_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for account_order_addresses")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AccountOrderAddressSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AccountOrderAddressSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(accountOrderAddressBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountOrderAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"account_order_addresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountOrderAddressPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from accountOrderAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for account_order_addresses")
	}

	if len(accountOrderAddressAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AccountOrderAddress) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("orm: no AccountOrderAddress provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AccountOrderAddress) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAccountOrderAddress(ctx, exec, o.OrderID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountOrderAddressSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("orm: empty AccountOrderAddressSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountOrderAddressSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AccountOrderAddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountOrderAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"account_order_addresses\".* FROM \"account_order_addresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountOrderAddressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in AccountOrderAddressSlice")
	}

	*o = slice

	return nil
}

// AccountOrderAddressExistsG checks if the AccountOrderAddress row exists.
func AccountOrderAddressExistsG(ctx context.Context, orderID string) (bool, error) {
	return AccountOrderAddressExists(ctx, boil.GetContextDB(), orderID)
}

// AccountOrderAddressExists checks if the AccountOrderAddress row exists.
func AccountOrderAddressExists(ctx context.Context, exec boil.ContextExecutor, orderID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"account_order_addresses\" where \"order_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, orderID)
	}
	row := exec.QueryRowContext(ctx, sql, orderID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if account_order_addresses exists")
	}

	return exists, nil
}

// Exists checks if the AccountOrderAddress row exists.
func (o *AccountOrderAddress) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AccountOrderAddressExists(ctx, exec, o.OrderID)
}
