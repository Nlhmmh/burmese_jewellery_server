// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Currency is an object representing the database table.
type Currency struct { // ISO 4217
	CurrencyCode string    `boil:"currency_code" json:"currencyCode" toml:"currencyCode" yaml:"currencyCode"`
	Name         string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Decimals     string    `boil:"decimals" json:"decimals" toml:"decimals" yaml:"decimals"`
	IsActive     bool      `boil:"is_active" json:"isActive" toml:"isActive" yaml:"isActive"`
	CreatedAt    time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *currencyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L currencyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CurrencyColumns = struct {
	CurrencyCode string
	Name         string
	Decimals     string
	IsActive     string
	CreatedAt    string
	UpdatedAt    string
}{
	CurrencyCode: "currency_code",
	Name:         "name",
	Decimals:     "decimals",
	IsActive:     "is_active",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var CurrencyTableColumns = struct {
	CurrencyCode string
	Name         string
	Decimals     string
	IsActive     string
	CreatedAt    string
	UpdatedAt    string
}{
	CurrencyCode: "currencies.currency_code",
	Name:         "currencies.name",
	Decimals:     "currencies.decimals",
	IsActive:     "currencies.is_active",
	CreatedAt:    "currencies.created_at",
	UpdatedAt:    "currencies.updated_at",
}

// Generated where

var CurrencyWhere = struct {
	CurrencyCode whereHelperstring
	Name         whereHelperstring
	Decimals     whereHelperstring
	IsActive     whereHelperbool
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	CurrencyCode: whereHelperstring{field: "\"currencies\".\"currency_code\""},
	Name:         whereHelperstring{field: "\"currencies\".\"name\""},
	Decimals:     whereHelperstring{field: "\"currencies\".\"decimals\""},
	IsActive:     whereHelperbool{field: "\"currencies\".\"is_active\""},
	CreatedAt:    whereHelpertime_Time{field: "\"currencies\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"currencies\".\"updated_at\""},
}

// CurrencyRels is where relationship names are stored.
var CurrencyRels = struct {
	CurrencyCodeCountries string
}{
	CurrencyCodeCountries: "CurrencyCodeCountries",
}

// currencyR is where relationships are stored.
type currencyR struct {
	CurrencyCodeCountries CountrySlice `boil:"CurrencyCodeCountries" json:"CurrencyCodeCountries" toml:"CurrencyCodeCountries" yaml:"CurrencyCodeCountries"`
}

// NewStruct creates a new relationship struct
func (*currencyR) NewStruct() *currencyR {
	return &currencyR{}
}

func (r *currencyR) GetCurrencyCodeCountries() CountrySlice {
	if r == nil {
		return nil
	}
	return r.CurrencyCodeCountries
}

// currencyL is where Load methods for each relationship are stored.
type currencyL struct{}

var (
	currencyAllColumns            = []string{"currency_code", "name", "decimals", "is_active", "created_at", "updated_at"}
	currencyColumnsWithoutDefault = []string{"currency_code", "name", "decimals", "is_active"}
	currencyColumnsWithDefault    = []string{"created_at", "updated_at"}
	currencyPrimaryKeyColumns     = []string{"currency_code"}
	currencyGeneratedColumns      = []string{}
)

type (
	// CurrencySlice is an alias for a slice of pointers to Currency.
	// This should almost always be used instead of []Currency.
	CurrencySlice []*Currency
	// CurrencyHook is the signature for custom Currency hook methods
	CurrencyHook func(context.Context, boil.ContextExecutor, *Currency) error

	currencyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	currencyType                 = reflect.TypeOf(&Currency{})
	currencyMapping              = queries.MakeStructMapping(currencyType)
	currencyPrimaryKeyMapping, _ = queries.BindMapping(currencyType, currencyMapping, currencyPrimaryKeyColumns)
	currencyInsertCacheMut       sync.RWMutex
	currencyInsertCache          = make(map[string]insertCache)
	currencyUpdateCacheMut       sync.RWMutex
	currencyUpdateCache          = make(map[string]updateCache)
	currencyUpsertCacheMut       sync.RWMutex
	currencyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var currencyAfterSelectHooks []CurrencyHook

var currencyBeforeInsertHooks []CurrencyHook
var currencyAfterInsertHooks []CurrencyHook

var currencyBeforeUpdateHooks []CurrencyHook
var currencyAfterUpdateHooks []CurrencyHook

var currencyBeforeDeleteHooks []CurrencyHook
var currencyAfterDeleteHooks []CurrencyHook

var currencyBeforeUpsertHooks []CurrencyHook
var currencyAfterUpsertHooks []CurrencyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Currency) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Currency) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Currency) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Currency) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Currency) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Currency) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Currency) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Currency) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Currency) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currencyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCurrencyHook registers your hook function for all future operations.
func AddCurrencyHook(hookPoint boil.HookPoint, currencyHook CurrencyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		currencyAfterSelectHooks = append(currencyAfterSelectHooks, currencyHook)
	case boil.BeforeInsertHook:
		currencyBeforeInsertHooks = append(currencyBeforeInsertHooks, currencyHook)
	case boil.AfterInsertHook:
		currencyAfterInsertHooks = append(currencyAfterInsertHooks, currencyHook)
	case boil.BeforeUpdateHook:
		currencyBeforeUpdateHooks = append(currencyBeforeUpdateHooks, currencyHook)
	case boil.AfterUpdateHook:
		currencyAfterUpdateHooks = append(currencyAfterUpdateHooks, currencyHook)
	case boil.BeforeDeleteHook:
		currencyBeforeDeleteHooks = append(currencyBeforeDeleteHooks, currencyHook)
	case boil.AfterDeleteHook:
		currencyAfterDeleteHooks = append(currencyAfterDeleteHooks, currencyHook)
	case boil.BeforeUpsertHook:
		currencyBeforeUpsertHooks = append(currencyBeforeUpsertHooks, currencyHook)
	case boil.AfterUpsertHook:
		currencyAfterUpsertHooks = append(currencyAfterUpsertHooks, currencyHook)
	}
}

// OneG returns a single currency record from the query using the global executor.
func (q currencyQuery) OneG(ctx context.Context) (*Currency, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single currency record from the query.
func (q currencyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Currency, error) {
	o := &Currency{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for currencies")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Currency records from the query using the global executor.
func (q currencyQuery) AllG(ctx context.Context) (CurrencySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Currency records from the query.
func (q currencyQuery) All(ctx context.Context, exec boil.ContextExecutor) (CurrencySlice, error) {
	var o []*Currency

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Currency slice")
	}

	if len(currencyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Currency records in the query using the global executor
func (q currencyQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Currency records in the query.
func (q currencyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count currencies rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q currencyQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q currencyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if currencies exists")
	}

	return count > 0, nil
}

// CurrencyCodeCountries retrieves all the country's Countries with an executor via currency_code column.
func (o *Currency) CurrencyCodeCountries(mods ...qm.QueryMod) countryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"countries\".\"currency_code\"=?", o.CurrencyCode),
	)

	return Countries(queryMods...)
}

// LoadCurrencyCodeCountries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (currencyL) LoadCurrencyCodeCountries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCurrency interface{}, mods queries.Applicator) error {
	var slice []*Currency
	var object *Currency

	if singular {
		var ok bool
		object, ok = maybeCurrency.(*Currency)
		if !ok {
			object = new(Currency)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCurrency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCurrency))
			}
		}
	} else {
		s, ok := maybeCurrency.(*[]*Currency)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCurrency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCurrency))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &currencyR{}
		}
		args = append(args, object.CurrencyCode)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currencyR{}
			}

			for _, a := range args {
				if a == obj.CurrencyCode {
					continue Outer
				}
			}

			args = append(args, obj.CurrencyCode)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`countries`),
		qm.WhereIn(`countries.currency_code in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load countries")
	}

	var resultSlice []*Country
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice countries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on countries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for countries")
	}

	if len(countryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CurrencyCodeCountries = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.CurrencyCode == foreign.CurrencyCode {
				local.R.CurrencyCodeCountries = append(local.R.CurrencyCodeCountries, foreign)
				break
			}
		}
	}

	return nil
}

// AddCurrencyCodeCountriesG adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.CurrencyCodeCountries.
// Uses the global database handle.
func (o *Currency) AddCurrencyCodeCountriesG(ctx context.Context, insert bool, related ...*Country) error {
	return o.AddCurrencyCodeCountries(ctx, boil.GetContextDB(), insert, related...)
}

// AddCurrencyCodeCountries adds the given related objects to the existing relationships
// of the currency, optionally inserting them as new records.
// Appends related to o.R.CurrencyCodeCountries.
func (o *Currency) AddCurrencyCodeCountries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Country) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CurrencyCode = o.CurrencyCode
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"countries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"currency_code"}),
				strmangle.WhereClause("\"", "\"", 2, countryPrimaryKeyColumns),
			)
			values := []interface{}{o.CurrencyCode, rel.CountryCode}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CurrencyCode = o.CurrencyCode
		}
	}

	if o.R == nil {
		o.R = &currencyR{
			CurrencyCodeCountries: related,
		}
	} else {
		o.R.CurrencyCodeCountries = append(o.R.CurrencyCodeCountries, related...)
	}

	return nil
}

// Currencies retrieves all the records using an executor.
func Currencies(mods ...qm.QueryMod) currencyQuery {
	mods = append(mods, qm.From("\"currencies\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"currencies\".*"})
	}

	return currencyQuery{q}
}

// FindCurrencyG retrieves a single record by ID.
func FindCurrencyG(ctx context.Context, currencyCode string, selectCols ...string) (*Currency, error) {
	return FindCurrency(ctx, boil.GetContextDB(), currencyCode, selectCols...)
}

// FindCurrency retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCurrency(ctx context.Context, exec boil.ContextExecutor, currencyCode string, selectCols ...string) (*Currency, error) {
	currencyObj := &Currency{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"currencies\" where \"currency_code\"=$1", sel,
	)

	q := queries.Raw(query, currencyCode)

	err := q.Bind(ctx, exec, currencyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from currencies")
	}

	if err = currencyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return currencyObj, err
	}

	return currencyObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Currency) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Currency) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no currencies provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currencyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	currencyInsertCacheMut.RLock()
	cache, cached := currencyInsertCache[key]
	currencyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			currencyAllColumns,
			currencyColumnsWithDefault,
			currencyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(currencyType, currencyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(currencyType, currencyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"currencies\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"currencies\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into currencies")
	}

	if !cached {
		currencyInsertCacheMut.Lock()
		currencyInsertCache[key] = cache
		currencyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Currency record using the global executor.
// See Update for more documentation.
func (o *Currency) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Currency.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Currency) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	currencyUpdateCacheMut.RLock()
	cache, cached := currencyUpdateCache[key]
	currencyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			currencyAllColumns,
			currencyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update currencies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"currencies\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, currencyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(currencyType, currencyMapping, append(wl, currencyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update currencies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for currencies")
	}

	if !cached {
		currencyUpdateCacheMut.Lock()
		currencyUpdateCache[key] = cache
		currencyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q currencyQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q currencyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for currencies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for currencies")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CurrencySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CurrencySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"currencies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, currencyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in currency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all currency")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Currency) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Currency) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no currencies provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currencyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	currencyUpsertCacheMut.RLock()
	cache, cached := currencyUpsertCache[key]
	currencyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			currencyAllColumns,
			currencyColumnsWithDefault,
			currencyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			currencyAllColumns,
			currencyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert currencies, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(currencyPrimaryKeyColumns))
			copy(conflict, currencyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"currencies\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(currencyType, currencyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(currencyType, currencyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert currencies")
	}

	if !cached {
		currencyUpsertCacheMut.Lock()
		currencyUpsertCache[key] = cache
		currencyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Currency record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Currency) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Currency record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Currency) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Currency provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), currencyPrimaryKeyMapping)
	sql := "DELETE FROM \"currencies\" WHERE \"currency_code\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from currencies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for currencies")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q currencyQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q currencyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no currencyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from currencies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for currencies")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CurrencySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CurrencySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(currencyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"currencies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currencyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from currency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for currencies")
	}

	if len(currencyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Currency) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("orm: no Currency provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Currency) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCurrency(ctx, exec, o.CurrencyCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurrencySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("orm: empty CurrencySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurrencySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CurrencySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"currencies\".* FROM \"currencies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currencyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in CurrencySlice")
	}

	*o = slice

	return nil
}

// CurrencyExistsG checks if the Currency row exists.
func CurrencyExistsG(ctx context.Context, currencyCode string) (bool, error) {
	return CurrencyExists(ctx, boil.GetContextDB(), currencyCode)
}

// CurrencyExists checks if the Currency row exists.
func CurrencyExists(ctx context.Context, exec boil.ContextExecutor, currencyCode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"currencies\" where \"currency_code\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, currencyCode)
	}
	row := exec.QueryRowContext(ctx, sql, currencyCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if currencies exists")
	}

	return exists, nil
}

// Exists checks if the Currency row exists.
func (o *Currency) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CurrencyExists(ctx, exec, o.CurrencyCode)
}
