// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Jewellery is an object representing the database table.
type Jewellery struct {
	JewelleryID string    `boil:"jewellery_id" json:"jewelleryID" toml:"jewelleryID" yaml:"jewelleryID"`
	CategoryID  string    `boil:"category_id" json:"categoryID" toml:"categoryID" yaml:"categoryID"`
	GemID       string    `boil:"gem_id" json:"gemID" toml:"gemID" yaml:"gemID"`
	MaterialID  string    `boil:"material_id" json:"materialID" toml:"materialID" yaml:"materialID"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Price       int       `boil:"price" json:"price" toml:"price" yaml:"price"`
	ImageURL    string    `boil:"image_url" json:"imageURL" toml:"imageURL" yaml:"imageURL"`
	IsPublished bool      `boil:"is_published" json:"isPublished" toml:"isPublished" yaml:"isPublished"`
	Quantity    int       `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	CreatedAt   time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *jewelleryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L jewelleryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var JewelleryColumns = struct {
	JewelleryID string
	CategoryID  string
	GemID       string
	MaterialID  string
	Name        string
	Description string
	Price       string
	ImageURL    string
	IsPublished string
	Quantity    string
	CreatedAt   string
	UpdatedAt   string
}{
	JewelleryID: "jewellery_id",
	CategoryID:  "category_id",
	GemID:       "gem_id",
	MaterialID:  "material_id",
	Name:        "name",
	Description: "description",
	Price:       "price",
	ImageURL:    "image_url",
	IsPublished: "is_published",
	Quantity:    "quantity",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var JewelleryTableColumns = struct {
	JewelleryID string
	CategoryID  string
	GemID       string
	MaterialID  string
	Name        string
	Description string
	Price       string
	ImageURL    string
	IsPublished string
	Quantity    string
	CreatedAt   string
	UpdatedAt   string
}{
	JewelleryID: "jewelleries.jewellery_id",
	CategoryID:  "jewelleries.category_id",
	GemID:       "jewelleries.gem_id",
	MaterialID:  "jewelleries.material_id",
	Name:        "jewelleries.name",
	Description: "jewelleries.description",
	Price:       "jewelleries.price",
	ImageURL:    "jewelleries.image_url",
	IsPublished: "jewelleries.is_published",
	Quantity:    "jewelleries.quantity",
	CreatedAt:   "jewelleries.created_at",
	UpdatedAt:   "jewelleries.updated_at",
}

// Generated where

var JewelleryWhere = struct {
	JewelleryID whereHelperstring
	CategoryID  whereHelperstring
	GemID       whereHelperstring
	MaterialID  whereHelperstring
	Name        whereHelperstring
	Description whereHelperstring
	Price       whereHelperint
	ImageURL    whereHelperstring
	IsPublished whereHelperbool
	Quantity    whereHelperint
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	JewelleryID: whereHelperstring{field: "\"jewelleries\".\"jewellery_id\""},
	CategoryID:  whereHelperstring{field: "\"jewelleries\".\"category_id\""},
	GemID:       whereHelperstring{field: "\"jewelleries\".\"gem_id\""},
	MaterialID:  whereHelperstring{field: "\"jewelleries\".\"material_id\""},
	Name:        whereHelperstring{field: "\"jewelleries\".\"name\""},
	Description: whereHelperstring{field: "\"jewelleries\".\"description\""},
	Price:       whereHelperint{field: "\"jewelleries\".\"price\""},
	ImageURL:    whereHelperstring{field: "\"jewelleries\".\"image_url\""},
	IsPublished: whereHelperbool{field: "\"jewelleries\".\"is_published\""},
	Quantity:    whereHelperint{field: "\"jewelleries\".\"quantity\""},
	CreatedAt:   whereHelpertime_Time{field: "\"jewelleries\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"jewelleries\".\"updated_at\""},
}

// JewelleryRels is where relationship names are stored.
var JewelleryRels = struct {
	Category                string
	Gem                     string
	Material                string
	AccountCartJewelleries  string
	AccountFavourites       string
	AccountOrderJewelleries string
}{
	Category:                "Category",
	Gem:                     "Gem",
	Material:                "Material",
	AccountCartJewelleries:  "AccountCartJewelleries",
	AccountFavourites:       "AccountFavourites",
	AccountOrderJewelleries: "AccountOrderJewelleries",
}

// jewelleryR is where relationships are stored.
type jewelleryR struct {
	Category                *Category                  `boil:"Category" json:"Category" toml:"Category" yaml:"Category"`
	Gem                     *Gem                       `boil:"Gem" json:"Gem" toml:"Gem" yaml:"Gem"`
	Material                *Material                  `boil:"Material" json:"Material" toml:"Material" yaml:"Material"`
	AccountCartJewelleries  AccountCartJewellerySlice  `boil:"AccountCartJewelleries" json:"AccountCartJewelleries" toml:"AccountCartJewelleries" yaml:"AccountCartJewelleries"`
	AccountFavourites       AccountFavouriteSlice      `boil:"AccountFavourites" json:"AccountFavourites" toml:"AccountFavourites" yaml:"AccountFavourites"`
	AccountOrderJewelleries AccountOrderJewellerySlice `boil:"AccountOrderJewelleries" json:"AccountOrderJewelleries" toml:"AccountOrderJewelleries" yaml:"AccountOrderJewelleries"`
}

// NewStruct creates a new relationship struct
func (*jewelleryR) NewStruct() *jewelleryR {
	return &jewelleryR{}
}

func (r *jewelleryR) GetCategory() *Category {
	if r == nil {
		return nil
	}
	return r.Category
}

func (r *jewelleryR) GetGem() *Gem {
	if r == nil {
		return nil
	}
	return r.Gem
}

func (r *jewelleryR) GetMaterial() *Material {
	if r == nil {
		return nil
	}
	return r.Material
}

func (r *jewelleryR) GetAccountCartJewelleries() AccountCartJewellerySlice {
	if r == nil {
		return nil
	}
	return r.AccountCartJewelleries
}

func (r *jewelleryR) GetAccountFavourites() AccountFavouriteSlice {
	if r == nil {
		return nil
	}
	return r.AccountFavourites
}

func (r *jewelleryR) GetAccountOrderJewelleries() AccountOrderJewellerySlice {
	if r == nil {
		return nil
	}
	return r.AccountOrderJewelleries
}

// jewelleryL is where Load methods for each relationship are stored.
type jewelleryL struct{}

var (
	jewelleryAllColumns            = []string{"jewellery_id", "category_id", "gem_id", "material_id", "name", "description", "price", "image_url", "is_published", "quantity", "created_at", "updated_at"}
	jewelleryColumnsWithoutDefault = []string{"category_id", "gem_id", "material_id", "name", "description", "price", "image_url", "is_published"}
	jewelleryColumnsWithDefault    = []string{"jewellery_id", "quantity", "created_at", "updated_at"}
	jewelleryPrimaryKeyColumns     = []string{"jewellery_id"}
	jewelleryGeneratedColumns      = []string{}
)

type (
	// JewellerySlice is an alias for a slice of pointers to Jewellery.
	// This should almost always be used instead of []Jewellery.
	JewellerySlice []*Jewellery
	// JewelleryHook is the signature for custom Jewellery hook methods
	JewelleryHook func(context.Context, boil.ContextExecutor, *Jewellery) error

	jewelleryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	jewelleryType                 = reflect.TypeOf(&Jewellery{})
	jewelleryMapping              = queries.MakeStructMapping(jewelleryType)
	jewelleryPrimaryKeyMapping, _ = queries.BindMapping(jewelleryType, jewelleryMapping, jewelleryPrimaryKeyColumns)
	jewelleryInsertCacheMut       sync.RWMutex
	jewelleryInsertCache          = make(map[string]insertCache)
	jewelleryUpdateCacheMut       sync.RWMutex
	jewelleryUpdateCache          = make(map[string]updateCache)
	jewelleryUpsertCacheMut       sync.RWMutex
	jewelleryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var jewelleryAfterSelectHooks []JewelleryHook

var jewelleryBeforeInsertHooks []JewelleryHook
var jewelleryAfterInsertHooks []JewelleryHook

var jewelleryBeforeUpdateHooks []JewelleryHook
var jewelleryAfterUpdateHooks []JewelleryHook

var jewelleryBeforeDeleteHooks []JewelleryHook
var jewelleryAfterDeleteHooks []JewelleryHook

var jewelleryBeforeUpsertHooks []JewelleryHook
var jewelleryAfterUpsertHooks []JewelleryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Jewellery) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jewelleryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Jewellery) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jewelleryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Jewellery) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jewelleryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Jewellery) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jewelleryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Jewellery) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jewelleryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Jewellery) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jewelleryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Jewellery) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jewelleryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Jewellery) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jewelleryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Jewellery) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jewelleryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddJewelleryHook registers your hook function for all future operations.
func AddJewelleryHook(hookPoint boil.HookPoint, jewelleryHook JewelleryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		jewelleryAfterSelectHooks = append(jewelleryAfterSelectHooks, jewelleryHook)
	case boil.BeforeInsertHook:
		jewelleryBeforeInsertHooks = append(jewelleryBeforeInsertHooks, jewelleryHook)
	case boil.AfterInsertHook:
		jewelleryAfterInsertHooks = append(jewelleryAfterInsertHooks, jewelleryHook)
	case boil.BeforeUpdateHook:
		jewelleryBeforeUpdateHooks = append(jewelleryBeforeUpdateHooks, jewelleryHook)
	case boil.AfterUpdateHook:
		jewelleryAfterUpdateHooks = append(jewelleryAfterUpdateHooks, jewelleryHook)
	case boil.BeforeDeleteHook:
		jewelleryBeforeDeleteHooks = append(jewelleryBeforeDeleteHooks, jewelleryHook)
	case boil.AfterDeleteHook:
		jewelleryAfterDeleteHooks = append(jewelleryAfterDeleteHooks, jewelleryHook)
	case boil.BeforeUpsertHook:
		jewelleryBeforeUpsertHooks = append(jewelleryBeforeUpsertHooks, jewelleryHook)
	case boil.AfterUpsertHook:
		jewelleryAfterUpsertHooks = append(jewelleryAfterUpsertHooks, jewelleryHook)
	}
}

// OneG returns a single jewellery record from the query using the global executor.
func (q jewelleryQuery) OneG(ctx context.Context) (*Jewellery, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single jewellery record from the query.
func (q jewelleryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Jewellery, error) {
	o := &Jewellery{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for jewelleries")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Jewellery records from the query using the global executor.
func (q jewelleryQuery) AllG(ctx context.Context) (JewellerySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Jewellery records from the query.
func (q jewelleryQuery) All(ctx context.Context, exec boil.ContextExecutor) (JewellerySlice, error) {
	var o []*Jewellery

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Jewellery slice")
	}

	if len(jewelleryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Jewellery records in the query using the global executor
func (q jewelleryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Jewellery records in the query.
func (q jewelleryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count jewelleries rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q jewelleryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q jewelleryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if jewelleries exists")
	}

	return count > 0, nil
}

// Category pointed to by the foreign key.
func (o *Jewellery) Category(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"category_id\" = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	return Categories(queryMods...)
}

// Gem pointed to by the foreign key.
func (o *Jewellery) Gem(mods ...qm.QueryMod) gemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"gem_id\" = ?", o.GemID),
	}

	queryMods = append(queryMods, mods...)

	return Gems(queryMods...)
}

// Material pointed to by the foreign key.
func (o *Jewellery) Material(mods ...qm.QueryMod) materialQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"material_id\" = ?", o.MaterialID),
	}

	queryMods = append(queryMods, mods...)

	return Materials(queryMods...)
}

// AccountCartJewelleries retrieves all the account_cart_jewellery's AccountCartJewelleries with an executor.
func (o *Jewellery) AccountCartJewelleries(mods ...qm.QueryMod) accountCartJewelleryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"account_cart_jewelleries\".\"jewellery_id\"=?", o.JewelleryID),
	)

	return AccountCartJewelleries(queryMods...)
}

// AccountFavourites retrieves all the account_favourite's AccountFavourites with an executor.
func (o *Jewellery) AccountFavourites(mods ...qm.QueryMod) accountFavouriteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"account_favourites\".\"jewellery_id\"=?", o.JewelleryID),
	)

	return AccountFavourites(queryMods...)
}

// AccountOrderJewelleries retrieves all the account_order_jewellery's AccountOrderJewelleries with an executor.
func (o *Jewellery) AccountOrderJewelleries(mods ...qm.QueryMod) accountOrderJewelleryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"account_order_jewelleries\".\"jewellery_id\"=?", o.JewelleryID),
	)

	return AccountOrderJewelleries(queryMods...)
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (jewelleryL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJewellery interface{}, mods queries.Applicator) error {
	var slice []*Jewellery
	var object *Jewellery

	if singular {
		var ok bool
		object, ok = maybeJewellery.(*Jewellery)
		if !ok {
			object = new(Jewellery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeJewellery))
			}
		}
	} else {
		s, ok := maybeJewellery.(*[]*Jewellery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeJewellery))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jewelleryR{}
		}
		args = append(args, object.CategoryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jewelleryR{}
			}

			for _, a := range args {
				if a == obj.CategoryID {
					continue Outer
				}
			}

			args = append(args, obj.CategoryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`categories`),
		qm.WhereIn(`categories.category_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(categoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryID == foreign.CategoryID {
				local.R.Category = foreign
				break
			}
		}
	}

	return nil
}

// LoadGem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (jewelleryL) LoadGem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJewellery interface{}, mods queries.Applicator) error {
	var slice []*Jewellery
	var object *Jewellery

	if singular {
		var ok bool
		object, ok = maybeJewellery.(*Jewellery)
		if !ok {
			object = new(Jewellery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeJewellery))
			}
		}
	} else {
		s, ok := maybeJewellery.(*[]*Jewellery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeJewellery))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jewelleryR{}
		}
		args = append(args, object.GemID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jewelleryR{}
			}

			for _, a := range args {
				if a == obj.GemID {
					continue Outer
				}
			}

			args = append(args, obj.GemID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`gems`),
		qm.WhereIn(`gems.gem_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Gem")
	}

	var resultSlice []*Gem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Gem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for gems")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gems")
	}

	if len(gemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Gem = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GemID == foreign.GemID {
				local.R.Gem = foreign
				break
			}
		}
	}

	return nil
}

// LoadMaterial allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (jewelleryL) LoadMaterial(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJewellery interface{}, mods queries.Applicator) error {
	var slice []*Jewellery
	var object *Jewellery

	if singular {
		var ok bool
		object, ok = maybeJewellery.(*Jewellery)
		if !ok {
			object = new(Jewellery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeJewellery))
			}
		}
	} else {
		s, ok := maybeJewellery.(*[]*Jewellery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeJewellery))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jewelleryR{}
		}
		args = append(args, object.MaterialID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jewelleryR{}
			}

			for _, a := range args {
				if a == obj.MaterialID {
					continue Outer
				}
			}

			args = append(args, obj.MaterialID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`materials`),
		qm.WhereIn(`materials.material_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Material")
	}

	var resultSlice []*Material
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Material")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for materials")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for materials")
	}

	if len(materialAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Material = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MaterialID == foreign.MaterialID {
				local.R.Material = foreign
				break
			}
		}
	}

	return nil
}

// LoadAccountCartJewelleries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (jewelleryL) LoadAccountCartJewelleries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJewellery interface{}, mods queries.Applicator) error {
	var slice []*Jewellery
	var object *Jewellery

	if singular {
		var ok bool
		object, ok = maybeJewellery.(*Jewellery)
		if !ok {
			object = new(Jewellery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeJewellery))
			}
		}
	} else {
		s, ok := maybeJewellery.(*[]*Jewellery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeJewellery))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jewelleryR{}
		}
		args = append(args, object.JewelleryID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jewelleryR{}
			}

			for _, a := range args {
				if a == obj.JewelleryID {
					continue Outer
				}
			}

			args = append(args, obj.JewelleryID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account_cart_jewelleries`),
		qm.WhereIn(`account_cart_jewelleries.jewellery_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load account_cart_jewelleries")
	}

	var resultSlice []*AccountCartJewellery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice account_cart_jewelleries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on account_cart_jewelleries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account_cart_jewelleries")
	}

	if len(accountCartJewelleryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AccountCartJewelleries = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.JewelleryID == foreign.JewelleryID {
				local.R.AccountCartJewelleries = append(local.R.AccountCartJewelleries, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAccountFavourites allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (jewelleryL) LoadAccountFavourites(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJewellery interface{}, mods queries.Applicator) error {
	var slice []*Jewellery
	var object *Jewellery

	if singular {
		var ok bool
		object, ok = maybeJewellery.(*Jewellery)
		if !ok {
			object = new(Jewellery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeJewellery))
			}
		}
	} else {
		s, ok := maybeJewellery.(*[]*Jewellery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeJewellery))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jewelleryR{}
		}
		args = append(args, object.JewelleryID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jewelleryR{}
			}

			for _, a := range args {
				if a == obj.JewelleryID {
					continue Outer
				}
			}

			args = append(args, obj.JewelleryID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account_favourites`),
		qm.WhereIn(`account_favourites.jewellery_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load account_favourites")
	}

	var resultSlice []*AccountFavourite
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice account_favourites")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on account_favourites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account_favourites")
	}

	if len(accountFavouriteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AccountFavourites = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.JewelleryID == foreign.JewelleryID {
				local.R.AccountFavourites = append(local.R.AccountFavourites, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAccountOrderJewelleries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (jewelleryL) LoadAccountOrderJewelleries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJewellery interface{}, mods queries.Applicator) error {
	var slice []*Jewellery
	var object *Jewellery

	if singular {
		var ok bool
		object, ok = maybeJewellery.(*Jewellery)
		if !ok {
			object = new(Jewellery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeJewellery))
			}
		}
	} else {
		s, ok := maybeJewellery.(*[]*Jewellery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeJewellery))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jewelleryR{}
		}
		args = append(args, object.JewelleryID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jewelleryR{}
			}

			for _, a := range args {
				if a == obj.JewelleryID {
					continue Outer
				}
			}

			args = append(args, obj.JewelleryID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account_order_jewelleries`),
		qm.WhereIn(`account_order_jewelleries.jewellery_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load account_order_jewelleries")
	}

	var resultSlice []*AccountOrderJewellery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice account_order_jewelleries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on account_order_jewelleries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account_order_jewelleries")
	}

	if len(accountOrderJewelleryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AccountOrderJewelleries = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.JewelleryID == foreign.JewelleryID {
				local.R.AccountOrderJewelleries = append(local.R.AccountOrderJewelleries, foreign)
				break
			}
		}
	}

	return nil
}

// SetCategoryG of the jewellery to the related item.
// Sets o.R.Category to related.
// Uses the global database handle.
func (o *Jewellery) SetCategoryG(ctx context.Context, insert bool, related *Category) error {
	return o.SetCategory(ctx, boil.GetContextDB(), insert, related)
}

// SetCategory of the jewellery to the related item.
// Sets o.R.Category to related.
func (o *Jewellery) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"jewelleries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
		strmangle.WhereClause("\"", "\"", 2, jewelleryPrimaryKeyColumns),
	)
	values := []interface{}{related.CategoryID, o.JewelleryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryID = related.CategoryID
	if o.R == nil {
		o.R = &jewelleryR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	return nil
}

// SetGemG of the jewellery to the related item.
// Sets o.R.Gem to related.
// Uses the global database handle.
func (o *Jewellery) SetGemG(ctx context.Context, insert bool, related *Gem) error {
	return o.SetGem(ctx, boil.GetContextDB(), insert, related)
}

// SetGem of the jewellery to the related item.
// Sets o.R.Gem to related.
func (o *Jewellery) SetGem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Gem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"jewelleries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"gem_id"}),
		strmangle.WhereClause("\"", "\"", 2, jewelleryPrimaryKeyColumns),
	)
	values := []interface{}{related.GemID, o.JewelleryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GemID = related.GemID
	if o.R == nil {
		o.R = &jewelleryR{
			Gem: related,
		}
	} else {
		o.R.Gem = related
	}

	return nil
}

// SetMaterialG of the jewellery to the related item.
// Sets o.R.Material to related.
// Uses the global database handle.
func (o *Jewellery) SetMaterialG(ctx context.Context, insert bool, related *Material) error {
	return o.SetMaterial(ctx, boil.GetContextDB(), insert, related)
}

// SetMaterial of the jewellery to the related item.
// Sets o.R.Material to related.
func (o *Jewellery) SetMaterial(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Material) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"jewelleries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"material_id"}),
		strmangle.WhereClause("\"", "\"", 2, jewelleryPrimaryKeyColumns),
	)
	values := []interface{}{related.MaterialID, o.JewelleryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MaterialID = related.MaterialID
	if o.R == nil {
		o.R = &jewelleryR{
			Material: related,
		}
	} else {
		o.R.Material = related
	}

	return nil
}

// AddAccountCartJewelleriesG adds the given related objects to the existing relationships
// of the jewellery, optionally inserting them as new records.
// Appends related to o.R.AccountCartJewelleries.
// Uses the global database handle.
func (o *Jewellery) AddAccountCartJewelleriesG(ctx context.Context, insert bool, related ...*AccountCartJewellery) error {
	return o.AddAccountCartJewelleries(ctx, boil.GetContextDB(), insert, related...)
}

// AddAccountCartJewelleries adds the given related objects to the existing relationships
// of the jewellery, optionally inserting them as new records.
// Appends related to o.R.AccountCartJewelleries.
func (o *Jewellery) AddAccountCartJewelleries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AccountCartJewellery) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.JewelleryID = o.JewelleryID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"account_cart_jewelleries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"jewellery_id"}),
				strmangle.WhereClause("\"", "\"", 2, accountCartJewelleryPrimaryKeyColumns),
			)
			values := []interface{}{o.JewelleryID, rel.AccountID, rel.JewelleryID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.JewelleryID = o.JewelleryID
		}
	}

	if o.R == nil {
		o.R = &jewelleryR{
			AccountCartJewelleries: related,
		}
	} else {
		o.R.AccountCartJewelleries = append(o.R.AccountCartJewelleries, related...)
	}

	return nil
}

// AddAccountFavouritesG adds the given related objects to the existing relationships
// of the jewellery, optionally inserting them as new records.
// Appends related to o.R.AccountFavourites.
// Uses the global database handle.
func (o *Jewellery) AddAccountFavouritesG(ctx context.Context, insert bool, related ...*AccountFavourite) error {
	return o.AddAccountFavourites(ctx, boil.GetContextDB(), insert, related...)
}

// AddAccountFavourites adds the given related objects to the existing relationships
// of the jewellery, optionally inserting them as new records.
// Appends related to o.R.AccountFavourites.
func (o *Jewellery) AddAccountFavourites(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AccountFavourite) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.JewelleryID = o.JewelleryID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"account_favourites\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"jewellery_id"}),
				strmangle.WhereClause("\"", "\"", 2, accountFavouritePrimaryKeyColumns),
			)
			values := []interface{}{o.JewelleryID, rel.AccountID, rel.JewelleryID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.JewelleryID = o.JewelleryID
		}
	}

	if o.R == nil {
		o.R = &jewelleryR{
			AccountFavourites: related,
		}
	} else {
		o.R.AccountFavourites = append(o.R.AccountFavourites, related...)
	}

	return nil
}

// AddAccountOrderJewelleriesG adds the given related objects to the existing relationships
// of the jewellery, optionally inserting them as new records.
// Appends related to o.R.AccountOrderJewelleries.
// Uses the global database handle.
func (o *Jewellery) AddAccountOrderJewelleriesG(ctx context.Context, insert bool, related ...*AccountOrderJewellery) error {
	return o.AddAccountOrderJewelleries(ctx, boil.GetContextDB(), insert, related...)
}

// AddAccountOrderJewelleries adds the given related objects to the existing relationships
// of the jewellery, optionally inserting them as new records.
// Appends related to o.R.AccountOrderJewelleries.
func (o *Jewellery) AddAccountOrderJewelleries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AccountOrderJewellery) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.JewelleryID = o.JewelleryID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"account_order_jewelleries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"jewellery_id"}),
				strmangle.WhereClause("\"", "\"", 2, accountOrderJewelleryPrimaryKeyColumns),
			)
			values := []interface{}{o.JewelleryID, rel.OrderID, rel.JewelleryID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.JewelleryID = o.JewelleryID
		}
	}

	if o.R == nil {
		o.R = &jewelleryR{
			AccountOrderJewelleries: related,
		}
	} else {
		o.R.AccountOrderJewelleries = append(o.R.AccountOrderJewelleries, related...)
	}

	return nil
}

// Jewelleries retrieves all the records using an executor.
func Jewelleries(mods ...qm.QueryMod) jewelleryQuery {
	mods = append(mods, qm.From("\"jewelleries\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"jewelleries\".*"})
	}

	return jewelleryQuery{q}
}

// FindJewelleryG retrieves a single record by ID.
func FindJewelleryG(ctx context.Context, jewelleryID string, selectCols ...string) (*Jewellery, error) {
	return FindJewellery(ctx, boil.GetContextDB(), jewelleryID, selectCols...)
}

// FindJewellery retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindJewellery(ctx context.Context, exec boil.ContextExecutor, jewelleryID string, selectCols ...string) (*Jewellery, error) {
	jewelleryObj := &Jewellery{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"jewelleries\" where \"jewellery_id\"=$1", sel,
	)

	q := queries.Raw(query, jewelleryID)

	err := q.Bind(ctx, exec, jewelleryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from jewelleries")
	}

	if err = jewelleryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return jewelleryObj, err
	}

	return jewelleryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Jewellery) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Jewellery) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no jewelleries provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jewelleryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	jewelleryInsertCacheMut.RLock()
	cache, cached := jewelleryInsertCache[key]
	jewelleryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			jewelleryAllColumns,
			jewelleryColumnsWithDefault,
			jewelleryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(jewelleryType, jewelleryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(jewelleryType, jewelleryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"jewelleries\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"jewelleries\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into jewelleries")
	}

	if !cached {
		jewelleryInsertCacheMut.Lock()
		jewelleryInsertCache[key] = cache
		jewelleryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Jewellery record using the global executor.
// See Update for more documentation.
func (o *Jewellery) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Jewellery.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Jewellery) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	jewelleryUpdateCacheMut.RLock()
	cache, cached := jewelleryUpdateCache[key]
	jewelleryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			jewelleryAllColumns,
			jewelleryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update jewelleries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"jewelleries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, jewelleryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(jewelleryType, jewelleryMapping, append(wl, jewelleryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update jewelleries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for jewelleries")
	}

	if !cached {
		jewelleryUpdateCacheMut.Lock()
		jewelleryUpdateCache[key] = cache
		jewelleryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q jewelleryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q jewelleryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for jewelleries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for jewelleries")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o JewellerySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o JewellerySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jewelleryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"jewelleries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, jewelleryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in jewellery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all jewellery")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Jewellery) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Jewellery) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no jewelleries provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jewelleryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	jewelleryUpsertCacheMut.RLock()
	cache, cached := jewelleryUpsertCache[key]
	jewelleryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			jewelleryAllColumns,
			jewelleryColumnsWithDefault,
			jewelleryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			jewelleryAllColumns,
			jewelleryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert jewelleries, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(jewelleryPrimaryKeyColumns))
			copy(conflict, jewelleryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"jewelleries\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(jewelleryType, jewelleryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(jewelleryType, jewelleryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert jewelleries")
	}

	if !cached {
		jewelleryUpsertCacheMut.Lock()
		jewelleryUpsertCache[key] = cache
		jewelleryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Jewellery record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Jewellery) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Jewellery record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Jewellery) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Jewellery provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), jewelleryPrimaryKeyMapping)
	sql := "DELETE FROM \"jewelleries\" WHERE \"jewellery_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from jewelleries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for jewelleries")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q jewelleryQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q jewelleryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no jewelleryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from jewelleries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for jewelleries")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o JewellerySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o JewellerySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(jewelleryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jewelleryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"jewelleries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jewelleryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from jewellery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for jewelleries")
	}

	if len(jewelleryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Jewellery) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("orm: no Jewellery provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Jewellery) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindJewellery(ctx, exec, o.JewelleryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JewellerySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("orm: empty JewellerySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JewellerySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := JewellerySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jewelleryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"jewelleries\".* FROM \"jewelleries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jewelleryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in JewellerySlice")
	}

	*o = slice

	return nil
}

// JewelleryExistsG checks if the Jewellery row exists.
func JewelleryExistsG(ctx context.Context, jewelleryID string) (bool, error) {
	return JewelleryExists(ctx, boil.GetContextDB(), jewelleryID)
}

// JewelleryExists checks if the Jewellery row exists.
func JewelleryExists(ctx context.Context, exec boil.ContextExecutor, jewelleryID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"jewelleries\" where \"jewellery_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, jewelleryID)
	}
	row := exec.QueryRowContext(ctx, sql, jewelleryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if jewelleries exists")
	}

	return exists, nil
}

// Exists checks if the Jewellery row exists.
func (o *Jewellery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return JewelleryExists(ctx, exec, o.JewelleryID)
}
