// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AccountCartJewellery is an object representing the database table.
type AccountCartJewellery struct {
	CartID      string    `boil:"cart_id" json:"cartID" toml:"cartID" yaml:"cartID"`
	JewelleryID string    `boil:"jewellery_id" json:"jewelleryID" toml:"jewelleryID" yaml:"jewelleryID"`
	Quantity    int       `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	CreatedAt   time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *accountCartJewelleryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L accountCartJewelleryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AccountCartJewelleryColumns = struct {
	CartID      string
	JewelleryID string
	Quantity    string
	CreatedAt   string
	UpdatedAt   string
}{
	CartID:      "cart_id",
	JewelleryID: "jewellery_id",
	Quantity:    "quantity",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var AccountCartJewelleryTableColumns = struct {
	CartID      string
	JewelleryID string
	Quantity    string
	CreatedAt   string
	UpdatedAt   string
}{
	CartID:      "account_cart_jewelleries.cart_id",
	JewelleryID: "account_cart_jewelleries.jewellery_id",
	Quantity:    "account_cart_jewelleries.quantity",
	CreatedAt:   "account_cart_jewelleries.created_at",
	UpdatedAt:   "account_cart_jewelleries.updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AccountCartJewelleryWhere = struct {
	CartID      whereHelperstring
	JewelleryID whereHelperstring
	Quantity    whereHelperint
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	CartID:      whereHelperstring{field: "\"account_cart_jewelleries\".\"cart_id\""},
	JewelleryID: whereHelperstring{field: "\"account_cart_jewelleries\".\"jewellery_id\""},
	Quantity:    whereHelperint{field: "\"account_cart_jewelleries\".\"quantity\""},
	CreatedAt:   whereHelpertime_Time{field: "\"account_cart_jewelleries\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"account_cart_jewelleries\".\"updated_at\""},
}

// AccountCartJewelleryRels is where relationship names are stored.
var AccountCartJewelleryRels = struct {
	Cart      string
	Jewellery string
}{
	Cart:      "Cart",
	Jewellery: "Jewellery",
}

// accountCartJewelleryR is where relationships are stored.
type accountCartJewelleryR struct {
	Cart      *AccountCart `boil:"Cart" json:"Cart" toml:"Cart" yaml:"Cart"`
	Jewellery *Jewellery   `boil:"Jewellery" json:"Jewellery" toml:"Jewellery" yaml:"Jewellery"`
}

// NewStruct creates a new relationship struct
func (*accountCartJewelleryR) NewStruct() *accountCartJewelleryR {
	return &accountCartJewelleryR{}
}

func (r *accountCartJewelleryR) GetCart() *AccountCart {
	if r == nil {
		return nil
	}
	return r.Cart
}

func (r *accountCartJewelleryR) GetJewellery() *Jewellery {
	if r == nil {
		return nil
	}
	return r.Jewellery
}

// accountCartJewelleryL is where Load methods for each relationship are stored.
type accountCartJewelleryL struct{}

var (
	accountCartJewelleryAllColumns            = []string{"cart_id", "jewellery_id", "quantity", "created_at", "updated_at"}
	accountCartJewelleryColumnsWithoutDefault = []string{"cart_id", "jewellery_id", "quantity"}
	accountCartJewelleryColumnsWithDefault    = []string{"created_at", "updated_at"}
	accountCartJewelleryPrimaryKeyColumns     = []string{"cart_id", "jewellery_id"}
	accountCartJewelleryGeneratedColumns      = []string{}
)

type (
	// AccountCartJewellerySlice is an alias for a slice of pointers to AccountCartJewellery.
	// This should almost always be used instead of []AccountCartJewellery.
	AccountCartJewellerySlice []*AccountCartJewellery
	// AccountCartJewelleryHook is the signature for custom AccountCartJewellery hook methods
	AccountCartJewelleryHook func(context.Context, boil.ContextExecutor, *AccountCartJewellery) error

	accountCartJewelleryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	accountCartJewelleryType                 = reflect.TypeOf(&AccountCartJewellery{})
	accountCartJewelleryMapping              = queries.MakeStructMapping(accountCartJewelleryType)
	accountCartJewelleryPrimaryKeyMapping, _ = queries.BindMapping(accountCartJewelleryType, accountCartJewelleryMapping, accountCartJewelleryPrimaryKeyColumns)
	accountCartJewelleryInsertCacheMut       sync.RWMutex
	accountCartJewelleryInsertCache          = make(map[string]insertCache)
	accountCartJewelleryUpdateCacheMut       sync.RWMutex
	accountCartJewelleryUpdateCache          = make(map[string]updateCache)
	accountCartJewelleryUpsertCacheMut       sync.RWMutex
	accountCartJewelleryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var accountCartJewelleryAfterSelectHooks []AccountCartJewelleryHook

var accountCartJewelleryBeforeInsertHooks []AccountCartJewelleryHook
var accountCartJewelleryAfterInsertHooks []AccountCartJewelleryHook

var accountCartJewelleryBeforeUpdateHooks []AccountCartJewelleryHook
var accountCartJewelleryAfterUpdateHooks []AccountCartJewelleryHook

var accountCartJewelleryBeforeDeleteHooks []AccountCartJewelleryHook
var accountCartJewelleryAfterDeleteHooks []AccountCartJewelleryHook

var accountCartJewelleryBeforeUpsertHooks []AccountCartJewelleryHook
var accountCartJewelleryAfterUpsertHooks []AccountCartJewelleryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AccountCartJewellery) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountCartJewelleryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AccountCartJewellery) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountCartJewelleryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AccountCartJewellery) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountCartJewelleryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AccountCartJewellery) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountCartJewelleryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AccountCartJewellery) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountCartJewelleryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AccountCartJewellery) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountCartJewelleryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AccountCartJewellery) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountCartJewelleryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AccountCartJewellery) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountCartJewelleryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AccountCartJewellery) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountCartJewelleryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAccountCartJewelleryHook registers your hook function for all future operations.
func AddAccountCartJewelleryHook(hookPoint boil.HookPoint, accountCartJewelleryHook AccountCartJewelleryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		accountCartJewelleryAfterSelectHooks = append(accountCartJewelleryAfterSelectHooks, accountCartJewelleryHook)
	case boil.BeforeInsertHook:
		accountCartJewelleryBeforeInsertHooks = append(accountCartJewelleryBeforeInsertHooks, accountCartJewelleryHook)
	case boil.AfterInsertHook:
		accountCartJewelleryAfterInsertHooks = append(accountCartJewelleryAfterInsertHooks, accountCartJewelleryHook)
	case boil.BeforeUpdateHook:
		accountCartJewelleryBeforeUpdateHooks = append(accountCartJewelleryBeforeUpdateHooks, accountCartJewelleryHook)
	case boil.AfterUpdateHook:
		accountCartJewelleryAfterUpdateHooks = append(accountCartJewelleryAfterUpdateHooks, accountCartJewelleryHook)
	case boil.BeforeDeleteHook:
		accountCartJewelleryBeforeDeleteHooks = append(accountCartJewelleryBeforeDeleteHooks, accountCartJewelleryHook)
	case boil.AfterDeleteHook:
		accountCartJewelleryAfterDeleteHooks = append(accountCartJewelleryAfterDeleteHooks, accountCartJewelleryHook)
	case boil.BeforeUpsertHook:
		accountCartJewelleryBeforeUpsertHooks = append(accountCartJewelleryBeforeUpsertHooks, accountCartJewelleryHook)
	case boil.AfterUpsertHook:
		accountCartJewelleryAfterUpsertHooks = append(accountCartJewelleryAfterUpsertHooks, accountCartJewelleryHook)
	}
}

// OneG returns a single accountCartJewellery record from the query using the global executor.
func (q accountCartJewelleryQuery) OneG(ctx context.Context) (*AccountCartJewellery, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single accountCartJewellery record from the query.
func (q accountCartJewelleryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AccountCartJewellery, error) {
	o := &AccountCartJewellery{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for account_cart_jewelleries")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AccountCartJewellery records from the query using the global executor.
func (q accountCartJewelleryQuery) AllG(ctx context.Context) (AccountCartJewellerySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AccountCartJewellery records from the query.
func (q accountCartJewelleryQuery) All(ctx context.Context, exec boil.ContextExecutor) (AccountCartJewellerySlice, error) {
	var o []*AccountCartJewellery

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to AccountCartJewellery slice")
	}

	if len(accountCartJewelleryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AccountCartJewellery records in the query using the global executor
func (q accountCartJewelleryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AccountCartJewellery records in the query.
func (q accountCartJewelleryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count account_cart_jewelleries rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q accountCartJewelleryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q accountCartJewelleryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if account_cart_jewelleries exists")
	}

	return count > 0, nil
}

// Cart pointed to by the foreign key.
func (o *AccountCartJewellery) Cart(mods ...qm.QueryMod) accountCartQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"cart_id\" = ?", o.CartID),
	}

	queryMods = append(queryMods, mods...)

	return AccountCarts(queryMods...)
}

// Jewellery pointed to by the foreign key.
func (o *AccountCartJewellery) Jewellery(mods ...qm.QueryMod) jewelleryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"jewellery_id\" = ?", o.JewelleryID),
	}

	queryMods = append(queryMods, mods...)

	return Jewelleries(queryMods...)
}

// LoadCart allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (accountCartJewelleryL) LoadCart(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccountCartJewellery interface{}, mods queries.Applicator) error {
	var slice []*AccountCartJewellery
	var object *AccountCartJewellery

	if singular {
		var ok bool
		object, ok = maybeAccountCartJewellery.(*AccountCartJewellery)
		if !ok {
			object = new(AccountCartJewellery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAccountCartJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAccountCartJewellery))
			}
		}
	} else {
		s, ok := maybeAccountCartJewellery.(*[]*AccountCartJewellery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAccountCartJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAccountCartJewellery))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &accountCartJewelleryR{}
		}
		args = append(args, object.CartID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountCartJewelleryR{}
			}

			for _, a := range args {
				if a == obj.CartID {
					continue Outer
				}
			}

			args = append(args, obj.CartID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account_carts`),
		qm.WhereIn(`account_carts.cart_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AccountCart")
	}

	var resultSlice []*AccountCart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AccountCart")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account_carts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account_carts")
	}

	if len(accountCartAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Cart = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CartID == foreign.CartID {
				local.R.Cart = foreign
				break
			}
		}
	}

	return nil
}

// LoadJewellery allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (accountCartJewelleryL) LoadJewellery(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccountCartJewellery interface{}, mods queries.Applicator) error {
	var slice []*AccountCartJewellery
	var object *AccountCartJewellery

	if singular {
		var ok bool
		object, ok = maybeAccountCartJewellery.(*AccountCartJewellery)
		if !ok {
			object = new(AccountCartJewellery)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAccountCartJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAccountCartJewellery))
			}
		}
	} else {
		s, ok := maybeAccountCartJewellery.(*[]*AccountCartJewellery)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAccountCartJewellery)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAccountCartJewellery))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &accountCartJewelleryR{}
		}
		args = append(args, object.JewelleryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountCartJewelleryR{}
			}

			for _, a := range args {
				if a == obj.JewelleryID {
					continue Outer
				}
			}

			args = append(args, obj.JewelleryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`jewelleries`),
		qm.WhereIn(`jewelleries.jewellery_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Jewellery")
	}

	var resultSlice []*Jewellery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Jewellery")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for jewelleries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for jewelleries")
	}

	if len(jewelleryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Jewellery = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.JewelleryID == foreign.JewelleryID {
				local.R.Jewellery = foreign
				break
			}
		}
	}

	return nil
}

// SetCartG of the accountCartJewellery to the related item.
// Sets o.R.Cart to related.
// Uses the global database handle.
func (o *AccountCartJewellery) SetCartG(ctx context.Context, insert bool, related *AccountCart) error {
	return o.SetCart(ctx, boil.GetContextDB(), insert, related)
}

// SetCart of the accountCartJewellery to the related item.
// Sets o.R.Cart to related.
func (o *AccountCartJewellery) SetCart(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AccountCart) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"account_cart_jewelleries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"cart_id"}),
		strmangle.WhereClause("\"", "\"", 2, accountCartJewelleryPrimaryKeyColumns),
	)
	values := []interface{}{related.CartID, o.CartID, o.JewelleryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CartID = related.CartID
	if o.R == nil {
		o.R = &accountCartJewelleryR{
			Cart: related,
		}
	} else {
		o.R.Cart = related
	}

	return nil
}

// SetJewelleryG of the accountCartJewellery to the related item.
// Sets o.R.Jewellery to related.
// Uses the global database handle.
func (o *AccountCartJewellery) SetJewelleryG(ctx context.Context, insert bool, related *Jewellery) error {
	return o.SetJewellery(ctx, boil.GetContextDB(), insert, related)
}

// SetJewellery of the accountCartJewellery to the related item.
// Sets o.R.Jewellery to related.
func (o *AccountCartJewellery) SetJewellery(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Jewellery) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"account_cart_jewelleries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"jewellery_id"}),
		strmangle.WhereClause("\"", "\"", 2, accountCartJewelleryPrimaryKeyColumns),
	)
	values := []interface{}{related.JewelleryID, o.CartID, o.JewelleryID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.JewelleryID = related.JewelleryID
	if o.R == nil {
		o.R = &accountCartJewelleryR{
			Jewellery: related,
		}
	} else {
		o.R.Jewellery = related
	}

	return nil
}

// AccountCartJewelleries retrieves all the records using an executor.
func AccountCartJewelleries(mods ...qm.QueryMod) accountCartJewelleryQuery {
	mods = append(mods, qm.From("\"account_cart_jewelleries\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"account_cart_jewelleries\".*"})
	}

	return accountCartJewelleryQuery{q}
}

// FindAccountCartJewelleryG retrieves a single record by ID.
func FindAccountCartJewelleryG(ctx context.Context, cartID string, jewelleryID string, selectCols ...string) (*AccountCartJewellery, error) {
	return FindAccountCartJewellery(ctx, boil.GetContextDB(), cartID, jewelleryID, selectCols...)
}

// FindAccountCartJewellery retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAccountCartJewellery(ctx context.Context, exec boil.ContextExecutor, cartID string, jewelleryID string, selectCols ...string) (*AccountCartJewellery, error) {
	accountCartJewelleryObj := &AccountCartJewellery{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"account_cart_jewelleries\" where \"cart_id\"=$1 AND \"jewellery_id\"=$2", sel,
	)

	q := queries.Raw(query, cartID, jewelleryID)

	err := q.Bind(ctx, exec, accountCartJewelleryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from account_cart_jewelleries")
	}

	if err = accountCartJewelleryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return accountCartJewelleryObj, err
	}

	return accountCartJewelleryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AccountCartJewellery) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AccountCartJewellery) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no account_cart_jewelleries provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountCartJewelleryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	accountCartJewelleryInsertCacheMut.RLock()
	cache, cached := accountCartJewelleryInsertCache[key]
	accountCartJewelleryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			accountCartJewelleryAllColumns,
			accountCartJewelleryColumnsWithDefault,
			accountCartJewelleryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(accountCartJewelleryType, accountCartJewelleryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(accountCartJewelleryType, accountCartJewelleryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"account_cart_jewelleries\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"account_cart_jewelleries\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into account_cart_jewelleries")
	}

	if !cached {
		accountCartJewelleryInsertCacheMut.Lock()
		accountCartJewelleryInsertCache[key] = cache
		accountCartJewelleryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AccountCartJewellery record using the global executor.
// See Update for more documentation.
func (o *AccountCartJewellery) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AccountCartJewellery.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AccountCartJewellery) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	accountCartJewelleryUpdateCacheMut.RLock()
	cache, cached := accountCartJewelleryUpdateCache[key]
	accountCartJewelleryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			accountCartJewelleryAllColumns,
			accountCartJewelleryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update account_cart_jewelleries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"account_cart_jewelleries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, accountCartJewelleryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(accountCartJewelleryType, accountCartJewelleryMapping, append(wl, accountCartJewelleryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update account_cart_jewelleries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for account_cart_jewelleries")
	}

	if !cached {
		accountCartJewelleryUpdateCacheMut.Lock()
		accountCartJewelleryUpdateCache[key] = cache
		accountCartJewelleryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q accountCartJewelleryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q accountCartJewelleryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for account_cart_jewelleries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for account_cart_jewelleries")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AccountCartJewellerySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AccountCartJewellerySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountCartJewelleryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"account_cart_jewelleries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, accountCartJewelleryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in accountCartJewellery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all accountCartJewellery")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AccountCartJewellery) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AccountCartJewellery) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no account_cart_jewelleries provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountCartJewelleryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	accountCartJewelleryUpsertCacheMut.RLock()
	cache, cached := accountCartJewelleryUpsertCache[key]
	accountCartJewelleryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			accountCartJewelleryAllColumns,
			accountCartJewelleryColumnsWithDefault,
			accountCartJewelleryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			accountCartJewelleryAllColumns,
			accountCartJewelleryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert account_cart_jewelleries, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(accountCartJewelleryPrimaryKeyColumns))
			copy(conflict, accountCartJewelleryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"account_cart_jewelleries\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(accountCartJewelleryType, accountCartJewelleryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(accountCartJewelleryType, accountCartJewelleryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert account_cart_jewelleries")
	}

	if !cached {
		accountCartJewelleryUpsertCacheMut.Lock()
		accountCartJewelleryUpsertCache[key] = cache
		accountCartJewelleryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AccountCartJewellery record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AccountCartJewellery) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AccountCartJewellery record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AccountCartJewellery) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no AccountCartJewellery provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), accountCartJewelleryPrimaryKeyMapping)
	sql := "DELETE FROM \"account_cart_jewelleries\" WHERE \"cart_id\"=$1 AND \"jewellery_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from account_cart_jewelleries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for account_cart_jewelleries")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q accountCartJewelleryQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q accountCartJewelleryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no accountCartJewelleryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from account_cart_jewelleries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for account_cart_jewelleries")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AccountCartJewellerySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AccountCartJewellerySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(accountCartJewelleryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountCartJewelleryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"account_cart_jewelleries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountCartJewelleryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from accountCartJewellery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for account_cart_jewelleries")
	}

	if len(accountCartJewelleryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AccountCartJewellery) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("orm: no AccountCartJewellery provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AccountCartJewellery) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAccountCartJewellery(ctx, exec, o.CartID, o.JewelleryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountCartJewellerySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("orm: empty AccountCartJewellerySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountCartJewellerySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AccountCartJewellerySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountCartJewelleryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"account_cart_jewelleries\".* FROM \"account_cart_jewelleries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountCartJewelleryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in AccountCartJewellerySlice")
	}

	*o = slice

	return nil
}

// AccountCartJewelleryExistsG checks if the AccountCartJewellery row exists.
func AccountCartJewelleryExistsG(ctx context.Context, cartID string, jewelleryID string) (bool, error) {
	return AccountCartJewelleryExists(ctx, boil.GetContextDB(), cartID, jewelleryID)
}

// AccountCartJewelleryExists checks if the AccountCartJewellery row exists.
func AccountCartJewelleryExists(ctx context.Context, exec boil.ContextExecutor, cartID string, jewelleryID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"account_cart_jewelleries\" where \"cart_id\"=$1 AND \"jewellery_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, cartID, jewelleryID)
	}
	row := exec.QueryRowContext(ctx, sql, cartID, jewelleryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if account_cart_jewelleries exists")
	}

	return exists, nil
}

// Exists checks if the AccountCartJewellery row exists.
func (o *AccountCartJewellery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AccountCartJewelleryExists(ctx, exec, o.CartID, o.JewelleryID)
}
