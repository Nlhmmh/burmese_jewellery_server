// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "burmese_jewellery/models"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Display the main page
	// (GET /api)
	GetApi(c *gin.Context)
	// List user
	// (GET /api/admin/account)
	GetApiAdminAccount(c *gin.Context)
	// Get user
	// (GET /api/admin/account/{account_id})
	GetApiAdminAccountAccountId(c *gin.Context, accountId ID)
	// Update user status
	// (PUT /api/admin/account/{account_id})
	PutApiAdminAccountAccountId(c *gin.Context, accountId ID)
	// List admin user
	// (GET /api/admin/account_admin)
	GetApiAdminAccountAdmin(c *gin.Context)

	// (POST /api/admin/account_admin)
	PostApiAdminAccountAdmin(c *gin.Context)
	// Delete admin user
	// (DELETE /api/admin/account_admin/{account_admins_id})
	DeleteApiAdminAccountAdminAccountAdminsId(c *gin.Context, accountAdminsId ID)
	// Get admin user
	// (GET /api/admin/account_admin/{account_admins_id})
	GetApiAdminAccountAdminAccountAdminsId(c *gin.Context, accountAdminsId ID)
	// Edit admin user
	// (PUT /api/admin/account_admin/{account_admins_id})
	PutApiAdminAccountAdminAccountAdminsId(c *gin.Context, accountAdminsId ID)

	// (POST /api/admin/category)
	PostApiAdminCategory(c *gin.Context)

	// (DELETE /api/admin/category/{category_id})
	DeleteApiAdminCategoryCategoryId(c *gin.Context, categoryId ID)

	// (PUT /api/admin/category/{category_id})
	PutApiAdminCategoryCategoryId(c *gin.Context, categoryId ID)

	// (POST /api/admin/gem)
	PostApiAdminGem(c *gin.Context)

	// (DELETE /api/admin/gem/{gem_id})
	DeleteApiAdminGemGemId(c *gin.Context, gemId ID)

	// (PUT /api/admin/gem/{gem_id})
	PutApiAdminGemGemId(c *gin.Context, gemId ID)

	// (POST /api/admin/jewellery)
	PostApiAdminJewellery(c *gin.Context)

	// (DELETE /api/admin/jewellery/{jewellery_id})
	DeleteApiAdminJewelleryJewelleryId(c *gin.Context, jewelleryId ID)

	// (PUT /api/admin/jewellery/{jewellery_id})
	PutApiAdminJewelleryJewelleryId(c *gin.Context, jewelleryId ID)
	// Login as admin user
	// (POST /api/admin/login)
	PostApiAdminLogin(c *gin.Context)

	// (POST /api/admin/material)
	PostApiAdminMaterial(c *gin.Context)

	// (DELETE /api/admin/material/{material_id})
	DeleteApiAdminMaterialMaterialId(c *gin.Context, materialId ID)

	// (PUT /api/admin/material/{material_id})
	PutApiAdminMaterialMaterialId(c *gin.Context, materialId ID)
	// Handle Google OAuth2 callback
	// (GET /api/auth/google/callback)
	GetApiAuthGoogleCallback(c *gin.Context, params GetApiAuthGoogleCallbackParams)
	// Initiate Google OAuth2 login
	// (GET /api/auth/google/login)
	GetApiAuthGoogleLogin(c *gin.Context)

	// (GET /api/category)
	GetApiCategory(c *gin.Context)

	// (GET /api/gem)
	GetApiGem(c *gin.Context)
	// Health Check
	// (GET /api/health_check)
	GetApiHealthCheck(c *gin.Context)

	// (GET /api/jewellery)
	GetApiJewellery(c *gin.Context, params GetApiJewelleryParams)

	// (GET /api/jewellery/{jewellery_id})
	GetApiJewelleryJewelleryId(c *gin.Context, jewelleryId ID)

	// (GET /api/material)
	GetApiMaterial(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApi operation middleware
func (siw *ServerInterfaceWrapper) GetApi(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApi(c)
}

// GetApiAdminAccount operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminAccount(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAdminAccount(c)
}

// GetApiAdminAccountAccountId operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminAccountAccountId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_id" -------------
	var accountId ID

	err = runtime.BindStyledParameter("simple", false, "account_id", c.Param("account_id"), &accountId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAdminAccountAccountId(c, accountId)
}

// PutApiAdminAccountAccountId operation middleware
func (siw *ServerInterfaceWrapper) PutApiAdminAccountAccountId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_id" -------------
	var accountId ID

	err = runtime.BindStyledParameter("simple", false, "account_id", c.Param("account_id"), &accountId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiAdminAccountAccountId(c, accountId)
}

// GetApiAdminAccountAdmin operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminAccountAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAdminAccountAdmin(c)
}

// PostApiAdminAccountAdmin operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminAccountAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAdminAccountAdmin(c)
}

// DeleteApiAdminAccountAdminAccountAdminsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiAdminAccountAdminAccountAdminsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_admins_id" -------------
	var accountAdminsId ID

	err = runtime.BindStyledParameter("simple", false, "account_admins_id", c.Param("account_admins_id"), &accountAdminsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_admins_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiAdminAccountAdminAccountAdminsId(c, accountAdminsId)
}

// GetApiAdminAccountAdminAccountAdminsId operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminAccountAdminAccountAdminsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_admins_id" -------------
	var accountAdminsId ID

	err = runtime.BindStyledParameter("simple", false, "account_admins_id", c.Param("account_admins_id"), &accountAdminsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_admins_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAdminAccountAdminAccountAdminsId(c, accountAdminsId)
}

// PutApiAdminAccountAdminAccountAdminsId operation middleware
func (siw *ServerInterfaceWrapper) PutApiAdminAccountAdminAccountAdminsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_admins_id" -------------
	var accountAdminsId ID

	err = runtime.BindStyledParameter("simple", false, "account_admins_id", c.Param("account_admins_id"), &accountAdminsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_admins_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiAdminAccountAdminAccountAdminsId(c, accountAdminsId)
}

// PostApiAdminCategory operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminCategory(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAdminCategory(c)
}

// DeleteApiAdminCategoryCategoryId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiAdminCategoryCategoryId(c *gin.Context) {

	var err error

	// ------------- Path parameter "category_id" -------------
	var categoryId ID

	err = runtime.BindStyledParameter("simple", false, "category_id", c.Param("category_id"), &categoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiAdminCategoryCategoryId(c, categoryId)
}

// PutApiAdminCategoryCategoryId operation middleware
func (siw *ServerInterfaceWrapper) PutApiAdminCategoryCategoryId(c *gin.Context) {

	var err error

	// ------------- Path parameter "category_id" -------------
	var categoryId ID

	err = runtime.BindStyledParameter("simple", false, "category_id", c.Param("category_id"), &categoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiAdminCategoryCategoryId(c, categoryId)
}

// PostApiAdminGem operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminGem(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAdminGem(c)
}

// DeleteApiAdminGemGemId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiAdminGemGemId(c *gin.Context) {

	var err error

	// ------------- Path parameter "gem_id" -------------
	var gemId ID

	err = runtime.BindStyledParameter("simple", false, "gem_id", c.Param("gem_id"), &gemId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gem_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiAdminGemGemId(c, gemId)
}

// PutApiAdminGemGemId operation middleware
func (siw *ServerInterfaceWrapper) PutApiAdminGemGemId(c *gin.Context) {

	var err error

	// ------------- Path parameter "gem_id" -------------
	var gemId ID

	err = runtime.BindStyledParameter("simple", false, "gem_id", c.Param("gem_id"), &gemId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gem_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiAdminGemGemId(c, gemId)
}

// PostApiAdminJewellery operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminJewellery(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAdminJewellery(c)
}

// DeleteApiAdminJewelleryJewelleryId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiAdminJewelleryJewelleryId(c *gin.Context) {

	var err error

	// ------------- Path parameter "jewellery_id" -------------
	var jewelleryId ID

	err = runtime.BindStyledParameter("simple", false, "jewellery_id", c.Param("jewellery_id"), &jewelleryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter jewellery_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiAdminJewelleryJewelleryId(c, jewelleryId)
}

// PutApiAdminJewelleryJewelleryId operation middleware
func (siw *ServerInterfaceWrapper) PutApiAdminJewelleryJewelleryId(c *gin.Context) {

	var err error

	// ------------- Path parameter "jewellery_id" -------------
	var jewelleryId ID

	err = runtime.BindStyledParameter("simple", false, "jewellery_id", c.Param("jewellery_id"), &jewelleryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter jewellery_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiAdminJewelleryJewelleryId(c, jewelleryId)
}

// PostApiAdminLogin operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAdminLogin(c)
}

// PostApiAdminMaterial operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminMaterial(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAdminMaterial(c)
}

// DeleteApiAdminMaterialMaterialId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiAdminMaterialMaterialId(c *gin.Context) {

	var err error

	// ------------- Path parameter "material_id" -------------
	var materialId ID

	err = runtime.BindStyledParameter("simple", false, "material_id", c.Param("material_id"), &materialId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter material_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiAdminMaterialMaterialId(c, materialId)
}

// PutApiAdminMaterialMaterialId operation middleware
func (siw *ServerInterfaceWrapper) PutApiAdminMaterialMaterialId(c *gin.Context) {

	var err error

	// ------------- Path parameter "material_id" -------------
	var materialId ID

	err = runtime.BindStyledParameter("simple", false, "material_id", c.Param("material_id"), &materialId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter material_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiAdminMaterialMaterialId(c, materialId)
}

// GetApiAuthGoogleCallback operation middleware
func (siw *ServerInterfaceWrapper) GetApiAuthGoogleCallback(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiAuthGoogleCallbackParams

	// ------------- Required query parameter "state" -------------

	if paramValue := c.Query("state"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument state is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "code" -------------

	if paramValue := c.Query("code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAuthGoogleCallback(c, params)
}

// GetApiAuthGoogleLogin operation middleware
func (siw *ServerInterfaceWrapper) GetApiAuthGoogleLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAuthGoogleLogin(c)
}

// GetApiCategory operation middleware
func (siw *ServerInterfaceWrapper) GetApiCategory(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiCategory(c)
}

// GetApiGem operation middleware
func (siw *ServerInterfaceWrapper) GetApiGem(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiGem(c)
}

// GetApiHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) GetApiHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiHealthCheck(c)
}

// GetApiJewellery operation middleware
func (siw *ServerInterfaceWrapper) GetApiJewellery(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiJewelleryParams

	// ------------- Required query parameter "offset" -------------

	if paramValue := c.Query("offset"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument offset is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := c.Query("limit"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument limit is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", c.Request.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "category_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "category_id", c.Request.URL.Query(), &params.CategoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gem_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "gem_id", c.Request.URL.Query(), &params.GemId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gem_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "material_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "material_id", c.Request.URL.Query(), &params.MaterialId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter material_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "is_published" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_published", c.Request.URL.Query(), &params.IsPublished)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter is_published: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiJewellery(c, params)
}

// GetApiJewelleryJewelleryId operation middleware
func (siw *ServerInterfaceWrapper) GetApiJewelleryJewelleryId(c *gin.Context) {

	var err error

	// ------------- Path parameter "jewellery_id" -------------
	var jewelleryId ID

	err = runtime.BindStyledParameter("simple", false, "jewellery_id", c.Param("jewellery_id"), &jewelleryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter jewellery_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiJewelleryJewelleryId(c, jewelleryId)
}

// GetApiMaterial operation middleware
func (siw *ServerInterfaceWrapper) GetApiMaterial(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiMaterial(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api", wrapper.GetApi)
	router.GET(options.BaseURL+"/api/admin/account", wrapper.GetApiAdminAccount)
	router.GET(options.BaseURL+"/api/admin/account/:account_id", wrapper.GetApiAdminAccountAccountId)
	router.PUT(options.BaseURL+"/api/admin/account/:account_id", wrapper.PutApiAdminAccountAccountId)
	router.GET(options.BaseURL+"/api/admin/account_admin", wrapper.GetApiAdminAccountAdmin)
	router.POST(options.BaseURL+"/api/admin/account_admin", wrapper.PostApiAdminAccountAdmin)
	router.DELETE(options.BaseURL+"/api/admin/account_admin/:account_admins_id", wrapper.DeleteApiAdminAccountAdminAccountAdminsId)
	router.GET(options.BaseURL+"/api/admin/account_admin/:account_admins_id", wrapper.GetApiAdminAccountAdminAccountAdminsId)
	router.PUT(options.BaseURL+"/api/admin/account_admin/:account_admins_id", wrapper.PutApiAdminAccountAdminAccountAdminsId)
	router.POST(options.BaseURL+"/api/admin/category", wrapper.PostApiAdminCategory)
	router.DELETE(options.BaseURL+"/api/admin/category/:category_id", wrapper.DeleteApiAdminCategoryCategoryId)
	router.PUT(options.BaseURL+"/api/admin/category/:category_id", wrapper.PutApiAdminCategoryCategoryId)
	router.POST(options.BaseURL+"/api/admin/gem", wrapper.PostApiAdminGem)
	router.DELETE(options.BaseURL+"/api/admin/gem/:gem_id", wrapper.DeleteApiAdminGemGemId)
	router.PUT(options.BaseURL+"/api/admin/gem/:gem_id", wrapper.PutApiAdminGemGemId)
	router.POST(options.BaseURL+"/api/admin/jewellery", wrapper.PostApiAdminJewellery)
	router.DELETE(options.BaseURL+"/api/admin/jewellery/:jewellery_id", wrapper.DeleteApiAdminJewelleryJewelleryId)
	router.PUT(options.BaseURL+"/api/admin/jewellery/:jewellery_id", wrapper.PutApiAdminJewelleryJewelleryId)
	router.POST(options.BaseURL+"/api/admin/login", wrapper.PostApiAdminLogin)
	router.POST(options.BaseURL+"/api/admin/material", wrapper.PostApiAdminMaterial)
	router.DELETE(options.BaseURL+"/api/admin/material/:material_id", wrapper.DeleteApiAdminMaterialMaterialId)
	router.PUT(options.BaseURL+"/api/admin/material/:material_id", wrapper.PutApiAdminMaterialMaterialId)
	router.GET(options.BaseURL+"/api/auth/google/callback", wrapper.GetApiAuthGoogleCallback)
	router.GET(options.BaseURL+"/api/auth/google/login", wrapper.GetApiAuthGoogleLogin)
	router.GET(options.BaseURL+"/api/category", wrapper.GetApiCategory)
	router.GET(options.BaseURL+"/api/gem", wrapper.GetApiGem)
	router.GET(options.BaseURL+"/api/health_check", wrapper.GetApiHealthCheck)
	router.GET(options.BaseURL+"/api/jewellery", wrapper.GetApiJewellery)
	router.GET(options.BaseURL+"/api/jewellery/:jewellery_id", wrapper.GetApiJewelleryJewelleryId)
	router.GET(options.BaseURL+"/api/material", wrapper.GetApiMaterial)
}

type GetApiRequestObject struct {
}

type GetApiResponseObject interface {
	VisitGetApiResponse(w http.ResponseWriter) error
}

type GetApi200Response struct {
}

func (response GetApi200Response) VisitGetApiResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetApiAdminAccountRequestObject struct {
}

type GetApiAdminAccountResponseObject interface {
	VisitGetApiAdminAccountResponse(w http.ResponseWriter) error
}

type GetApiAdminAccount200JSONResponse []Account

func (response GetApiAdminAccount200JSONResponse) VisitGetApiAdminAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAdminAccountAccountIdRequestObject struct {
	AccountId ID `json:"account_id"`
}

type GetApiAdminAccountAccountIdResponseObject interface {
	VisitGetApiAdminAccountAccountIdResponse(w http.ResponseWriter) error
}

type GetApiAdminAccountAccountId200JSONResponse Account

func (response GetApiAdminAccountAccountId200JSONResponse) VisitGetApiAdminAccountAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutApiAdminAccountAccountIdRequestObject struct {
	AccountId ID `json:"account_id"`
	Body      *PutApiAdminAccountAccountIdJSONRequestBody
}

type PutApiAdminAccountAccountIdResponseObject interface {
	VisitPutApiAdminAccountAccountIdResponse(w http.ResponseWriter) error
}

type PutApiAdminAccountAccountId200Response struct {
}

func (response PutApiAdminAccountAccountId200Response) VisitPutApiAdminAccountAccountIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetApiAdminAccountAdminRequestObject struct {
}

type GetApiAdminAccountAdminResponseObject interface {
	VisitGetApiAdminAccountAdminResponse(w http.ResponseWriter) error
}

type GetApiAdminAccountAdmin200JSONResponse []AccountAdmin

func (response GetApiAdminAccountAdmin200JSONResponse) VisitGetApiAdminAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAdminAccountAdminRequestObject struct {
	Body *PostApiAdminAccountAdminJSONRequestBody
}

type PostApiAdminAccountAdminResponseObject interface {
	VisitPostApiAdminAccountAdminResponse(w http.ResponseWriter) error
}

type PostApiAdminAccountAdmin200Response struct {
}

func (response PostApiAdminAccountAdmin200Response) VisitPostApiAdminAccountAdminResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteApiAdminAccountAdminAccountAdminsIdRequestObject struct {
	AccountAdminsId ID `json:"account_admins_id"`
}

type DeleteApiAdminAccountAdminAccountAdminsIdResponseObject interface {
	VisitDeleteApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error
}

type DeleteApiAdminAccountAdminAccountAdminsId204Response struct {
}

func (response DeleteApiAdminAccountAdminAccountAdminsId204Response) VisitDeleteApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetApiAdminAccountAdminAccountAdminsIdRequestObject struct {
	AccountAdminsId ID `json:"account_admins_id"`
}

type GetApiAdminAccountAdminAccountAdminsIdResponseObject interface {
	VisitGetApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error
}

type GetApiAdminAccountAdminAccountAdminsId200JSONResponse AccountAdmin

func (response GetApiAdminAccountAdminAccountAdminsId200JSONResponse) VisitGetApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutApiAdminAccountAdminAccountAdminsIdRequestObject struct {
	AccountAdminsId ID `json:"account_admins_id"`
	Body            *PutApiAdminAccountAdminAccountAdminsIdJSONRequestBody
}

type PutApiAdminAccountAdminAccountAdminsIdResponseObject interface {
	VisitPutApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error
}

type PutApiAdminAccountAdminAccountAdminsId200Response struct {
}

func (response PutApiAdminAccountAdminAccountAdminsId200Response) VisitPutApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostApiAdminCategoryRequestObject struct {
	Body *PostApiAdminCategoryJSONRequestBody
}

type PostApiAdminCategoryResponseObject interface {
	VisitPostApiAdminCategoryResponse(w http.ResponseWriter) error
}

type PostApiAdminCategory200Response struct {
}

func (response PostApiAdminCategory200Response) VisitPostApiAdminCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteApiAdminCategoryCategoryIdRequestObject struct {
	CategoryId ID `json:"category_id"`
}

type DeleteApiAdminCategoryCategoryIdResponseObject interface {
	VisitDeleteApiAdminCategoryCategoryIdResponse(w http.ResponseWriter) error
}

type DeleteApiAdminCategoryCategoryId204Response struct {
}

func (response DeleteApiAdminCategoryCategoryId204Response) VisitDeleteApiAdminCategoryCategoryIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutApiAdminCategoryCategoryIdRequestObject struct {
	CategoryId ID `json:"category_id"`
	Body       *PutApiAdminCategoryCategoryIdJSONRequestBody
}

type PutApiAdminCategoryCategoryIdResponseObject interface {
	VisitPutApiAdminCategoryCategoryIdResponse(w http.ResponseWriter) error
}

type PutApiAdminCategoryCategoryId200Response struct {
}

func (response PutApiAdminCategoryCategoryId200Response) VisitPutApiAdminCategoryCategoryIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostApiAdminGemRequestObject struct {
	Body *PostApiAdminGemJSONRequestBody
}

type PostApiAdminGemResponseObject interface {
	VisitPostApiAdminGemResponse(w http.ResponseWriter) error
}

type PostApiAdminGem200Response struct {
}

func (response PostApiAdminGem200Response) VisitPostApiAdminGemResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteApiAdminGemGemIdRequestObject struct {
	GemId ID `json:"gem_id"`
}

type DeleteApiAdminGemGemIdResponseObject interface {
	VisitDeleteApiAdminGemGemIdResponse(w http.ResponseWriter) error
}

type DeleteApiAdminGemGemId204Response struct {
}

func (response DeleteApiAdminGemGemId204Response) VisitDeleteApiAdminGemGemIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutApiAdminGemGemIdRequestObject struct {
	GemId ID `json:"gem_id"`
	Body  *PutApiAdminGemGemIdJSONRequestBody
}

type PutApiAdminGemGemIdResponseObject interface {
	VisitPutApiAdminGemGemIdResponse(w http.ResponseWriter) error
}

type PutApiAdminGemGemId200Response struct {
}

func (response PutApiAdminGemGemId200Response) VisitPutApiAdminGemGemIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostApiAdminJewelleryRequestObject struct {
	Body *PostApiAdminJewelleryJSONRequestBody
}

type PostApiAdminJewelleryResponseObject interface {
	VisitPostApiAdminJewelleryResponse(w http.ResponseWriter) error
}

type PostApiAdminJewellery200Response struct {
}

func (response PostApiAdminJewellery200Response) VisitPostApiAdminJewelleryResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteApiAdminJewelleryJewelleryIdRequestObject struct {
	JewelleryId ID `json:"jewellery_id"`
}

type DeleteApiAdminJewelleryJewelleryIdResponseObject interface {
	VisitDeleteApiAdminJewelleryJewelleryIdResponse(w http.ResponseWriter) error
}

type DeleteApiAdminJewelleryJewelleryId204Response struct {
}

func (response DeleteApiAdminJewelleryJewelleryId204Response) VisitDeleteApiAdminJewelleryJewelleryIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutApiAdminJewelleryJewelleryIdRequestObject struct {
	JewelleryId ID `json:"jewellery_id"`
	Body        *PutApiAdminJewelleryJewelleryIdJSONRequestBody
}

type PutApiAdminJewelleryJewelleryIdResponseObject interface {
	VisitPutApiAdminJewelleryJewelleryIdResponse(w http.ResponseWriter) error
}

type PutApiAdminJewelleryJewelleryId200Response struct {
}

func (response PutApiAdminJewelleryJewelleryId200Response) VisitPutApiAdminJewelleryJewelleryIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostApiAdminLoginRequestObject struct {
	Body *PostApiAdminLoginJSONRequestBody
}

type PostApiAdminLoginResponseObject interface {
	VisitPostApiAdminLoginResponse(w http.ResponseWriter) error
}

type PostApiAdminLogin200JSONResponse struct {
	Token *string `json:"token,omitempty"`
}

func (response PostApiAdminLogin200JSONResponse) VisitPostApiAdminLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAdminMaterialRequestObject struct {
	Body *PostApiAdminMaterialJSONRequestBody
}

type PostApiAdminMaterialResponseObject interface {
	VisitPostApiAdminMaterialResponse(w http.ResponseWriter) error
}

type PostApiAdminMaterial200Response struct {
}

func (response PostApiAdminMaterial200Response) VisitPostApiAdminMaterialResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteApiAdminMaterialMaterialIdRequestObject struct {
	MaterialId ID `json:"material_id"`
}

type DeleteApiAdminMaterialMaterialIdResponseObject interface {
	VisitDeleteApiAdminMaterialMaterialIdResponse(w http.ResponseWriter) error
}

type DeleteApiAdminMaterialMaterialId204Response struct {
}

func (response DeleteApiAdminMaterialMaterialId204Response) VisitDeleteApiAdminMaterialMaterialIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutApiAdminMaterialMaterialIdRequestObject struct {
	MaterialId ID `json:"material_id"`
	Body       *PutApiAdminMaterialMaterialIdJSONRequestBody
}

type PutApiAdminMaterialMaterialIdResponseObject interface {
	VisitPutApiAdminMaterialMaterialIdResponse(w http.ResponseWriter) error
}

type PutApiAdminMaterialMaterialId200Response struct {
}

func (response PutApiAdminMaterialMaterialId200Response) VisitPutApiAdminMaterialMaterialIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetApiAuthGoogleCallbackRequestObject struct {
	Params GetApiAuthGoogleCallbackParams
}

type GetApiAuthGoogleCallbackResponseObject interface {
	VisitGetApiAuthGoogleCallbackResponse(w http.ResponseWriter) error
}

type GetApiAuthGoogleCallback200JSONResponse AuthGoogleCallbackResp

func (response GetApiAuthGoogleCallback200JSONResponse) VisitGetApiAuthGoogleCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAuthGoogleLoginRequestObject struct {
}

type GetApiAuthGoogleLoginResponseObject interface {
	VisitGetApiAuthGoogleLoginResponse(w http.ResponseWriter) error
}

type GetApiAuthGoogleLogin302Response struct {
}

func (response GetApiAuthGoogleLogin302Response) VisitGetApiAuthGoogleLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(302)
	return nil
}

type GetApiCategoryRequestObject struct {
}

type GetApiCategoryResponseObject interface {
	VisitGetApiCategoryResponse(w http.ResponseWriter) error
}

type GetApiCategory200JSONResponse []Category

func (response GetApiCategory200JSONResponse) VisitGetApiCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiGemRequestObject struct {
}

type GetApiGemResponseObject interface {
	VisitGetApiGemResponse(w http.ResponseWriter) error
}

type GetApiGem200JSONResponse []Gem

func (response GetApiGem200JSONResponse) VisitGetApiGemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiHealthCheckRequestObject struct {
}

type GetApiHealthCheckResponseObject interface {
	VisitGetApiHealthCheckResponse(w http.ResponseWriter) error
}

type GetApiHealthCheck200JSONResponse struct {
	Message string `json:"message"`
}

func (response GetApiHealthCheck200JSONResponse) VisitGetApiHealthCheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiJewelleryRequestObject struct {
	Params GetApiJewelleryParams
}

type GetApiJewelleryResponseObject interface {
	VisitGetApiJewelleryResponse(w http.ResponseWriter) error
}

type GetApiJewellery200JSONResponse []Jewellery

func (response GetApiJewellery200JSONResponse) VisitGetApiJewelleryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiJewelleryJewelleryIdRequestObject struct {
	JewelleryId ID `json:"jewellery_id"`
}

type GetApiJewelleryJewelleryIdResponseObject interface {
	VisitGetApiJewelleryJewelleryIdResponse(w http.ResponseWriter) error
}

type GetApiJewelleryJewelleryId200JSONResponse Jewellery

func (response GetApiJewelleryJewelleryId200JSONResponse) VisitGetApiJewelleryJewelleryIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiMaterialRequestObject struct {
}

type GetApiMaterialResponseObject interface {
	VisitGetApiMaterialResponse(w http.ResponseWriter) error
}

type GetApiMaterial200JSONResponse []Material

func (response GetApiMaterial200JSONResponse) VisitGetApiMaterialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Display the main page
	// (GET /api)
	GetApi(ctx context.Context, request GetApiRequestObject) (GetApiResponseObject, error)
	// List user
	// (GET /api/admin/account)
	GetApiAdminAccount(ctx context.Context, request GetApiAdminAccountRequestObject) (GetApiAdminAccountResponseObject, error)
	// Get user
	// (GET /api/admin/account/{account_id})
	GetApiAdminAccountAccountId(ctx context.Context, request GetApiAdminAccountAccountIdRequestObject) (GetApiAdminAccountAccountIdResponseObject, error)
	// Update user status
	// (PUT /api/admin/account/{account_id})
	PutApiAdminAccountAccountId(ctx context.Context, request PutApiAdminAccountAccountIdRequestObject) (PutApiAdminAccountAccountIdResponseObject, error)
	// List admin user
	// (GET /api/admin/account_admin)
	GetApiAdminAccountAdmin(ctx context.Context, request GetApiAdminAccountAdminRequestObject) (GetApiAdminAccountAdminResponseObject, error)

	// (POST /api/admin/account_admin)
	PostApiAdminAccountAdmin(ctx context.Context, request PostApiAdminAccountAdminRequestObject) (PostApiAdminAccountAdminResponseObject, error)
	// Delete admin user
	// (DELETE /api/admin/account_admin/{account_admins_id})
	DeleteApiAdminAccountAdminAccountAdminsId(ctx context.Context, request DeleteApiAdminAccountAdminAccountAdminsIdRequestObject) (DeleteApiAdminAccountAdminAccountAdminsIdResponseObject, error)
	// Get admin user
	// (GET /api/admin/account_admin/{account_admins_id})
	GetApiAdminAccountAdminAccountAdminsId(ctx context.Context, request GetApiAdminAccountAdminAccountAdminsIdRequestObject) (GetApiAdminAccountAdminAccountAdminsIdResponseObject, error)
	// Edit admin user
	// (PUT /api/admin/account_admin/{account_admins_id})
	PutApiAdminAccountAdminAccountAdminsId(ctx context.Context, request PutApiAdminAccountAdminAccountAdminsIdRequestObject) (PutApiAdminAccountAdminAccountAdminsIdResponseObject, error)

	// (POST /api/admin/category)
	PostApiAdminCategory(ctx context.Context, request PostApiAdminCategoryRequestObject) (PostApiAdminCategoryResponseObject, error)

	// (DELETE /api/admin/category/{category_id})
	DeleteApiAdminCategoryCategoryId(ctx context.Context, request DeleteApiAdminCategoryCategoryIdRequestObject) (DeleteApiAdminCategoryCategoryIdResponseObject, error)

	// (PUT /api/admin/category/{category_id})
	PutApiAdminCategoryCategoryId(ctx context.Context, request PutApiAdminCategoryCategoryIdRequestObject) (PutApiAdminCategoryCategoryIdResponseObject, error)

	// (POST /api/admin/gem)
	PostApiAdminGem(ctx context.Context, request PostApiAdminGemRequestObject) (PostApiAdminGemResponseObject, error)

	// (DELETE /api/admin/gem/{gem_id})
	DeleteApiAdminGemGemId(ctx context.Context, request DeleteApiAdminGemGemIdRequestObject) (DeleteApiAdminGemGemIdResponseObject, error)

	// (PUT /api/admin/gem/{gem_id})
	PutApiAdminGemGemId(ctx context.Context, request PutApiAdminGemGemIdRequestObject) (PutApiAdminGemGemIdResponseObject, error)

	// (POST /api/admin/jewellery)
	PostApiAdminJewellery(ctx context.Context, request PostApiAdminJewelleryRequestObject) (PostApiAdminJewelleryResponseObject, error)

	// (DELETE /api/admin/jewellery/{jewellery_id})
	DeleteApiAdminJewelleryJewelleryId(ctx context.Context, request DeleteApiAdminJewelleryJewelleryIdRequestObject) (DeleteApiAdminJewelleryJewelleryIdResponseObject, error)

	// (PUT /api/admin/jewellery/{jewellery_id})
	PutApiAdminJewelleryJewelleryId(ctx context.Context, request PutApiAdminJewelleryJewelleryIdRequestObject) (PutApiAdminJewelleryJewelleryIdResponseObject, error)
	// Login as admin user
	// (POST /api/admin/login)
	PostApiAdminLogin(ctx context.Context, request PostApiAdminLoginRequestObject) (PostApiAdminLoginResponseObject, error)

	// (POST /api/admin/material)
	PostApiAdminMaterial(ctx context.Context, request PostApiAdminMaterialRequestObject) (PostApiAdminMaterialResponseObject, error)

	// (DELETE /api/admin/material/{material_id})
	DeleteApiAdminMaterialMaterialId(ctx context.Context, request DeleteApiAdminMaterialMaterialIdRequestObject) (DeleteApiAdminMaterialMaterialIdResponseObject, error)

	// (PUT /api/admin/material/{material_id})
	PutApiAdminMaterialMaterialId(ctx context.Context, request PutApiAdminMaterialMaterialIdRequestObject) (PutApiAdminMaterialMaterialIdResponseObject, error)
	// Handle Google OAuth2 callback
	// (GET /api/auth/google/callback)
	GetApiAuthGoogleCallback(ctx context.Context, request GetApiAuthGoogleCallbackRequestObject) (GetApiAuthGoogleCallbackResponseObject, error)
	// Initiate Google OAuth2 login
	// (GET /api/auth/google/login)
	GetApiAuthGoogleLogin(ctx context.Context, request GetApiAuthGoogleLoginRequestObject) (GetApiAuthGoogleLoginResponseObject, error)

	// (GET /api/category)
	GetApiCategory(ctx context.Context, request GetApiCategoryRequestObject) (GetApiCategoryResponseObject, error)

	// (GET /api/gem)
	GetApiGem(ctx context.Context, request GetApiGemRequestObject) (GetApiGemResponseObject, error)
	// Health Check
	// (GET /api/health_check)
	GetApiHealthCheck(ctx context.Context, request GetApiHealthCheckRequestObject) (GetApiHealthCheckResponseObject, error)

	// (GET /api/jewellery)
	GetApiJewellery(ctx context.Context, request GetApiJewelleryRequestObject) (GetApiJewelleryResponseObject, error)

	// (GET /api/jewellery/{jewellery_id})
	GetApiJewelleryJewelleryId(ctx context.Context, request GetApiJewelleryJewelleryIdRequestObject) (GetApiJewelleryJewelleryIdResponseObject, error)

	// (GET /api/material)
	GetApiMaterial(ctx context.Context, request GetApiMaterialRequestObject) (GetApiMaterialResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetApi operation middleware
func (sh *strictHandler) GetApi(ctx *gin.Context) {
	var request GetApiRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApi(ctx, request.(GetApiRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApi")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiResponseObject); ok {
		if err := validResponse.VisitGetApiResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiAdminAccount operation middleware
func (sh *strictHandler) GetApiAdminAccount(ctx *gin.Context) {
	var request GetApiAdminAccountRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAdminAccount(ctx, request.(GetApiAdminAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAdminAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAdminAccountResponseObject); ok {
		if err := validResponse.VisitGetApiAdminAccountResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiAdminAccountAccountId operation middleware
func (sh *strictHandler) GetApiAdminAccountAccountId(ctx *gin.Context, accountId ID) {
	var request GetApiAdminAccountAccountIdRequestObject

	request.AccountId = accountId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAdminAccountAccountId(ctx, request.(GetApiAdminAccountAccountIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAdminAccountAccountId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAdminAccountAccountIdResponseObject); ok {
		if err := validResponse.VisitGetApiAdminAccountAccountIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiAdminAccountAccountId operation middleware
func (sh *strictHandler) PutApiAdminAccountAccountId(ctx *gin.Context, accountId ID) {
	var request PutApiAdminAccountAccountIdRequestObject

	request.AccountId = accountId

	var body PutApiAdminAccountAccountIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiAdminAccountAccountId(ctx, request.(PutApiAdminAccountAccountIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiAdminAccountAccountId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiAdminAccountAccountIdResponseObject); ok {
		if err := validResponse.VisitPutApiAdminAccountAccountIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiAdminAccountAdmin operation middleware
func (sh *strictHandler) GetApiAdminAccountAdmin(ctx *gin.Context) {
	var request GetApiAdminAccountAdminRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAdminAccountAdmin(ctx, request.(GetApiAdminAccountAdminRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAdminAccountAdmin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAdminAccountAdminResponseObject); ok {
		if err := validResponse.VisitGetApiAdminAccountAdminResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiAdminAccountAdmin operation middleware
func (sh *strictHandler) PostApiAdminAccountAdmin(ctx *gin.Context) {
	var request PostApiAdminAccountAdminRequestObject

	var body PostApiAdminAccountAdminJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAdminAccountAdmin(ctx, request.(PostApiAdminAccountAdminRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAdminAccountAdmin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAdminAccountAdminResponseObject); ok {
		if err := validResponse.VisitPostApiAdminAccountAdminResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiAdminAccountAdminAccountAdminsId operation middleware
func (sh *strictHandler) DeleteApiAdminAccountAdminAccountAdminsId(ctx *gin.Context, accountAdminsId ID) {
	var request DeleteApiAdminAccountAdminAccountAdminsIdRequestObject

	request.AccountAdminsId = accountAdminsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiAdminAccountAdminAccountAdminsId(ctx, request.(DeleteApiAdminAccountAdminAccountAdminsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiAdminAccountAdminAccountAdminsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiAdminAccountAdminAccountAdminsIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiAdminAccountAdminAccountAdminsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiAdminAccountAdminAccountAdminsId operation middleware
func (sh *strictHandler) GetApiAdminAccountAdminAccountAdminsId(ctx *gin.Context, accountAdminsId ID) {
	var request GetApiAdminAccountAdminAccountAdminsIdRequestObject

	request.AccountAdminsId = accountAdminsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAdminAccountAdminAccountAdminsId(ctx, request.(GetApiAdminAccountAdminAccountAdminsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAdminAccountAdminAccountAdminsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAdminAccountAdminAccountAdminsIdResponseObject); ok {
		if err := validResponse.VisitGetApiAdminAccountAdminAccountAdminsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiAdminAccountAdminAccountAdminsId operation middleware
func (sh *strictHandler) PutApiAdminAccountAdminAccountAdminsId(ctx *gin.Context, accountAdminsId ID) {
	var request PutApiAdminAccountAdminAccountAdminsIdRequestObject

	request.AccountAdminsId = accountAdminsId

	var body PutApiAdminAccountAdminAccountAdminsIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiAdminAccountAdminAccountAdminsId(ctx, request.(PutApiAdminAccountAdminAccountAdminsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiAdminAccountAdminAccountAdminsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiAdminAccountAdminAccountAdminsIdResponseObject); ok {
		if err := validResponse.VisitPutApiAdminAccountAdminAccountAdminsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiAdminCategory operation middleware
func (sh *strictHandler) PostApiAdminCategory(ctx *gin.Context) {
	var request PostApiAdminCategoryRequestObject

	var body PostApiAdminCategoryJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAdminCategory(ctx, request.(PostApiAdminCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAdminCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAdminCategoryResponseObject); ok {
		if err := validResponse.VisitPostApiAdminCategoryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiAdminCategoryCategoryId operation middleware
func (sh *strictHandler) DeleteApiAdminCategoryCategoryId(ctx *gin.Context, categoryId ID) {
	var request DeleteApiAdminCategoryCategoryIdRequestObject

	request.CategoryId = categoryId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiAdminCategoryCategoryId(ctx, request.(DeleteApiAdminCategoryCategoryIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiAdminCategoryCategoryId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiAdminCategoryCategoryIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiAdminCategoryCategoryIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiAdminCategoryCategoryId operation middleware
func (sh *strictHandler) PutApiAdminCategoryCategoryId(ctx *gin.Context, categoryId ID) {
	var request PutApiAdminCategoryCategoryIdRequestObject

	request.CategoryId = categoryId

	var body PutApiAdminCategoryCategoryIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiAdminCategoryCategoryId(ctx, request.(PutApiAdminCategoryCategoryIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiAdminCategoryCategoryId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiAdminCategoryCategoryIdResponseObject); ok {
		if err := validResponse.VisitPutApiAdminCategoryCategoryIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiAdminGem operation middleware
func (sh *strictHandler) PostApiAdminGem(ctx *gin.Context) {
	var request PostApiAdminGemRequestObject

	var body PostApiAdminGemJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAdminGem(ctx, request.(PostApiAdminGemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAdminGem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAdminGemResponseObject); ok {
		if err := validResponse.VisitPostApiAdminGemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiAdminGemGemId operation middleware
func (sh *strictHandler) DeleteApiAdminGemGemId(ctx *gin.Context, gemId ID) {
	var request DeleteApiAdminGemGemIdRequestObject

	request.GemId = gemId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiAdminGemGemId(ctx, request.(DeleteApiAdminGemGemIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiAdminGemGemId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiAdminGemGemIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiAdminGemGemIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiAdminGemGemId operation middleware
func (sh *strictHandler) PutApiAdminGemGemId(ctx *gin.Context, gemId ID) {
	var request PutApiAdminGemGemIdRequestObject

	request.GemId = gemId

	var body PutApiAdminGemGemIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiAdminGemGemId(ctx, request.(PutApiAdminGemGemIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiAdminGemGemId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiAdminGemGemIdResponseObject); ok {
		if err := validResponse.VisitPutApiAdminGemGemIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiAdminJewellery operation middleware
func (sh *strictHandler) PostApiAdminJewellery(ctx *gin.Context) {
	var request PostApiAdminJewelleryRequestObject

	var body PostApiAdminJewelleryJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAdminJewellery(ctx, request.(PostApiAdminJewelleryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAdminJewellery")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAdminJewelleryResponseObject); ok {
		if err := validResponse.VisitPostApiAdminJewelleryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiAdminJewelleryJewelleryId operation middleware
func (sh *strictHandler) DeleteApiAdminJewelleryJewelleryId(ctx *gin.Context, jewelleryId ID) {
	var request DeleteApiAdminJewelleryJewelleryIdRequestObject

	request.JewelleryId = jewelleryId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiAdminJewelleryJewelleryId(ctx, request.(DeleteApiAdminJewelleryJewelleryIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiAdminJewelleryJewelleryId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiAdminJewelleryJewelleryIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiAdminJewelleryJewelleryIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiAdminJewelleryJewelleryId operation middleware
func (sh *strictHandler) PutApiAdminJewelleryJewelleryId(ctx *gin.Context, jewelleryId ID) {
	var request PutApiAdminJewelleryJewelleryIdRequestObject

	request.JewelleryId = jewelleryId

	var body PutApiAdminJewelleryJewelleryIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiAdminJewelleryJewelleryId(ctx, request.(PutApiAdminJewelleryJewelleryIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiAdminJewelleryJewelleryId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiAdminJewelleryJewelleryIdResponseObject); ok {
		if err := validResponse.VisitPutApiAdminJewelleryJewelleryIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiAdminLogin operation middleware
func (sh *strictHandler) PostApiAdminLogin(ctx *gin.Context) {
	var request PostApiAdminLoginRequestObject

	var body PostApiAdminLoginJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAdminLogin(ctx, request.(PostApiAdminLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAdminLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAdminLoginResponseObject); ok {
		if err := validResponse.VisitPostApiAdminLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiAdminMaterial operation middleware
func (sh *strictHandler) PostApiAdminMaterial(ctx *gin.Context) {
	var request PostApiAdminMaterialRequestObject

	var body PostApiAdminMaterialJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAdminMaterial(ctx, request.(PostApiAdminMaterialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAdminMaterial")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAdminMaterialResponseObject); ok {
		if err := validResponse.VisitPostApiAdminMaterialResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiAdminMaterialMaterialId operation middleware
func (sh *strictHandler) DeleteApiAdminMaterialMaterialId(ctx *gin.Context, materialId ID) {
	var request DeleteApiAdminMaterialMaterialIdRequestObject

	request.MaterialId = materialId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiAdminMaterialMaterialId(ctx, request.(DeleteApiAdminMaterialMaterialIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiAdminMaterialMaterialId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiAdminMaterialMaterialIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiAdminMaterialMaterialIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiAdminMaterialMaterialId operation middleware
func (sh *strictHandler) PutApiAdminMaterialMaterialId(ctx *gin.Context, materialId ID) {
	var request PutApiAdminMaterialMaterialIdRequestObject

	request.MaterialId = materialId

	var body PutApiAdminMaterialMaterialIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiAdminMaterialMaterialId(ctx, request.(PutApiAdminMaterialMaterialIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiAdminMaterialMaterialId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiAdminMaterialMaterialIdResponseObject); ok {
		if err := validResponse.VisitPutApiAdminMaterialMaterialIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiAuthGoogleCallback operation middleware
func (sh *strictHandler) GetApiAuthGoogleCallback(ctx *gin.Context, params GetApiAuthGoogleCallbackParams) {
	var request GetApiAuthGoogleCallbackRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAuthGoogleCallback(ctx, request.(GetApiAuthGoogleCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAuthGoogleCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAuthGoogleCallbackResponseObject); ok {
		if err := validResponse.VisitGetApiAuthGoogleCallbackResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiAuthGoogleLogin operation middleware
func (sh *strictHandler) GetApiAuthGoogleLogin(ctx *gin.Context) {
	var request GetApiAuthGoogleLoginRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAuthGoogleLogin(ctx, request.(GetApiAuthGoogleLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAuthGoogleLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAuthGoogleLoginResponseObject); ok {
		if err := validResponse.VisitGetApiAuthGoogleLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiCategory operation middleware
func (sh *strictHandler) GetApiCategory(ctx *gin.Context) {
	var request GetApiCategoryRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiCategory(ctx, request.(GetApiCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiCategoryResponseObject); ok {
		if err := validResponse.VisitGetApiCategoryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiGem operation middleware
func (sh *strictHandler) GetApiGem(ctx *gin.Context) {
	var request GetApiGemRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiGem(ctx, request.(GetApiGemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiGem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiGemResponseObject); ok {
		if err := validResponse.VisitGetApiGemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiHealthCheck operation middleware
func (sh *strictHandler) GetApiHealthCheck(ctx *gin.Context) {
	var request GetApiHealthCheckRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiHealthCheck(ctx, request.(GetApiHealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiHealthCheck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiHealthCheckResponseObject); ok {
		if err := validResponse.VisitGetApiHealthCheckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiJewellery operation middleware
func (sh *strictHandler) GetApiJewellery(ctx *gin.Context, params GetApiJewelleryParams) {
	var request GetApiJewelleryRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiJewellery(ctx, request.(GetApiJewelleryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiJewellery")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiJewelleryResponseObject); ok {
		if err := validResponse.VisitGetApiJewelleryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiJewelleryJewelleryId operation middleware
func (sh *strictHandler) GetApiJewelleryJewelleryId(ctx *gin.Context, jewelleryId ID) {
	var request GetApiJewelleryJewelleryIdRequestObject

	request.JewelleryId = jewelleryId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiJewelleryJewelleryId(ctx, request.(GetApiJewelleryJewelleryIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiJewelleryJewelleryId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiJewelleryJewelleryIdResponseObject); ok {
		if err := validResponse.VisitGetApiJewelleryJewelleryIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiMaterial operation middleware
func (sh *strictHandler) GetApiMaterial(ctx *gin.Context) {
	var request GetApiMaterialRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiMaterial(ctx, request.(GetApiMaterialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiMaterial")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiMaterialResponseObject); ok {
		if err := validResponse.VisitGetApiMaterialResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"u+V/AwAA//93EyFoUUwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
