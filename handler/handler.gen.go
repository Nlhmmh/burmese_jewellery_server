// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "burmese_jewellery/models"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Display the main page
	// (GET /api)
	GetApi(c *gin.Context)

	// (GET /api/admin/account_admin)
	GetApiAdminAccountAdmin(c *gin.Context)

	// (POST /api/admin/account_admin)
	PostApiAdminAccountAdmin(c *gin.Context)

	// (DELETE /api/admin/account_admin/{account_admins_id})
	DeleteApiAdminAccountAdminAccountAdminsId(c *gin.Context, accountAdminsId AccountAdminID)

	// (GET /api/admin/account_admin/{account_admins_id})
	GetApiAdminAccountAdminAccountAdminsId(c *gin.Context, accountAdminsId AccountAdminID)

	// (PUT /api/admin/account_admin/{account_admins_id})
	PutApiAdminAccountAdminAccountAdminsId(c *gin.Context, accountAdminsId AccountAdminID)

	// (POST /api/admin/login)
	PostApiAdminLogin(c *gin.Context)
	// Handle Google OAuth2 callback
	// (GET /api/auth/google/callback)
	GetApiAuthGoogleCallback(c *gin.Context, params GetApiAuthGoogleCallbackParams)
	// Initiate Google OAuth2 login
	// (GET /api/auth/google/login)
	GetApiAuthGoogleLogin(c *gin.Context)
	// Health Check
	// (GET /api/health_check)
	GetApiHealthCheck(c *gin.Context)

	// (GET /api/jewellery)
	GetApiJewellery(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApi operation middleware
func (siw *ServerInterfaceWrapper) GetApi(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApi(c)
}

// GetApiAdminAccountAdmin operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminAccountAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAdminAccountAdmin(c)
}

// PostApiAdminAccountAdmin operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminAccountAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAdminAccountAdmin(c)
}

// DeleteApiAdminAccountAdminAccountAdminsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiAdminAccountAdminAccountAdminsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_admins_id" -------------
	var accountAdminsId AccountAdminID

	err = runtime.BindStyledParameter("simple", false, "account_admins_id", c.Param("account_admins_id"), &accountAdminsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_admins_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiAdminAccountAdminAccountAdminsId(c, accountAdminsId)
}

// GetApiAdminAccountAdminAccountAdminsId operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminAccountAdminAccountAdminsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_admins_id" -------------
	var accountAdminsId AccountAdminID

	err = runtime.BindStyledParameter("simple", false, "account_admins_id", c.Param("account_admins_id"), &accountAdminsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_admins_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAdminAccountAdminAccountAdminsId(c, accountAdminsId)
}

// PutApiAdminAccountAdminAccountAdminsId operation middleware
func (siw *ServerInterfaceWrapper) PutApiAdminAccountAdminAccountAdminsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_admins_id" -------------
	var accountAdminsId AccountAdminID

	err = runtime.BindStyledParameter("simple", false, "account_admins_id", c.Param("account_admins_id"), &accountAdminsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_admins_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiAdminAccountAdminAccountAdminsId(c, accountAdminsId)
}

// PostApiAdminLogin operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAdminLogin(c)
}

// GetApiAuthGoogleCallback operation middleware
func (siw *ServerInterfaceWrapper) GetApiAuthGoogleCallback(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiAuthGoogleCallbackParams

	// ------------- Required query parameter "state" -------------

	if paramValue := c.Query("state"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument state is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "code" -------------

	if paramValue := c.Query("code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAuthGoogleCallback(c, params)
}

// GetApiAuthGoogleLogin operation middleware
func (siw *ServerInterfaceWrapper) GetApiAuthGoogleLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAuthGoogleLogin(c)
}

// GetApiHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) GetApiHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiHealthCheck(c)
}

// GetApiJewellery operation middleware
func (siw *ServerInterfaceWrapper) GetApiJewellery(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiJewellery(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api", wrapper.GetApi)
	router.GET(options.BaseURL+"/api/admin/account_admin", wrapper.GetApiAdminAccountAdmin)
	router.POST(options.BaseURL+"/api/admin/account_admin", wrapper.PostApiAdminAccountAdmin)
	router.DELETE(options.BaseURL+"/api/admin/account_admin/:account_admins_id", wrapper.DeleteApiAdminAccountAdminAccountAdminsId)
	router.GET(options.BaseURL+"/api/admin/account_admin/:account_admins_id", wrapper.GetApiAdminAccountAdminAccountAdminsId)
	router.PUT(options.BaseURL+"/api/admin/account_admin/:account_admins_id", wrapper.PutApiAdminAccountAdminAccountAdminsId)
	router.POST(options.BaseURL+"/api/admin/login", wrapper.PostApiAdminLogin)
	router.GET(options.BaseURL+"/api/auth/google/callback", wrapper.GetApiAuthGoogleCallback)
	router.GET(options.BaseURL+"/api/auth/google/login", wrapper.GetApiAuthGoogleLogin)
	router.GET(options.BaseURL+"/api/health_check", wrapper.GetApiHealthCheck)
	router.GET(options.BaseURL+"/api/jewellery", wrapper.GetApiJewellery)
}

type GetApiRequestObject struct {
}

type GetApiResponseObject interface {
	VisitGetApiResponse(w http.ResponseWriter) error
}

type GetApi200Response struct {
}

func (response GetApi200Response) VisitGetApiResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetApiAdminAccountAdminRequestObject struct {
}

type GetApiAdminAccountAdminResponseObject interface {
	VisitGetApiAdminAccountAdminResponse(w http.ResponseWriter) error
}

type GetApiAdminAccountAdmin200JSONResponse []AccountAdmin

func (response GetApiAdminAccountAdmin200JSONResponse) VisitGetApiAdminAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAdminAccountAdmin400JSONResponse ErrMsg

func (response GetApiAdminAccountAdmin400JSONResponse) VisitGetApiAdminAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAdminAccountAdmin401JSONResponse ErrMsg

func (response GetApiAdminAccountAdmin401JSONResponse) VisitGetApiAdminAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAdminAccountAdmin500JSONResponse ErrMsg

func (response GetApiAdminAccountAdmin500JSONResponse) VisitGetApiAdminAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAdminAccountAdminRequestObject struct {
	Body *PostApiAdminAccountAdminJSONRequestBody
}

type PostApiAdminAccountAdminResponseObject interface {
	VisitPostApiAdminAccountAdminResponse(w http.ResponseWriter) error
}

type PostApiAdminAccountAdmin200Response struct {
}

func (response PostApiAdminAccountAdmin200Response) VisitPostApiAdminAccountAdminResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostApiAdminAccountAdmin400JSONResponse ErrMsg

func (response PostApiAdminAccountAdmin400JSONResponse) VisitPostApiAdminAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAdminAccountAdmin401JSONResponse ErrMsg

func (response PostApiAdminAccountAdmin401JSONResponse) VisitPostApiAdminAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAdminAccountAdmin500JSONResponse ErrMsg

func (response PostApiAdminAccountAdmin500JSONResponse) VisitPostApiAdminAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApiAdminAccountAdminAccountAdminsIdRequestObject struct {
	AccountAdminsId AccountAdminID `json:"account_admins_id"`
}

type DeleteApiAdminAccountAdminAccountAdminsIdResponseObject interface {
	VisitDeleteApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error
}

type DeleteApiAdminAccountAdminAccountAdminsId204Response struct {
}

func (response DeleteApiAdminAccountAdminAccountAdminsId204Response) VisitDeleteApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteApiAdminAccountAdminAccountAdminsId400JSONResponse ErrMsg

func (response DeleteApiAdminAccountAdminAccountAdminsId400JSONResponse) VisitDeleteApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApiAdminAccountAdminAccountAdminsId401JSONResponse ErrMsg

func (response DeleteApiAdminAccountAdminAccountAdminsId401JSONResponse) VisitDeleteApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApiAdminAccountAdminAccountAdminsId404JSONResponse ErrMsg

func (response DeleteApiAdminAccountAdminAccountAdminsId404JSONResponse) VisitDeleteApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApiAdminAccountAdminAccountAdminsId500JSONResponse ErrMsg

func (response DeleteApiAdminAccountAdminAccountAdminsId500JSONResponse) VisitDeleteApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAdminAccountAdminAccountAdminsIdRequestObject struct {
	AccountAdminsId AccountAdminID `json:"account_admins_id"`
}

type GetApiAdminAccountAdminAccountAdminsIdResponseObject interface {
	VisitGetApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error
}

type GetApiAdminAccountAdminAccountAdminsId200JSONResponse AccountAdmin

func (response GetApiAdminAccountAdminAccountAdminsId200JSONResponse) VisitGetApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAdminAccountAdminAccountAdminsId400JSONResponse ErrMsg

func (response GetApiAdminAccountAdminAccountAdminsId400JSONResponse) VisitGetApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAdminAccountAdminAccountAdminsId401JSONResponse ErrMsg

func (response GetApiAdminAccountAdminAccountAdminsId401JSONResponse) VisitGetApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAdminAccountAdminAccountAdminsId404JSONResponse ErrMsg

func (response GetApiAdminAccountAdminAccountAdminsId404JSONResponse) VisitGetApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAdminAccountAdminAccountAdminsId500JSONResponse ErrMsg

func (response GetApiAdminAccountAdminAccountAdminsId500JSONResponse) VisitGetApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutApiAdminAccountAdminAccountAdminsIdRequestObject struct {
	AccountAdminsId AccountAdminID `json:"account_admins_id"`
	Body            *PutApiAdminAccountAdminAccountAdminsIdJSONRequestBody
}

type PutApiAdminAccountAdminAccountAdminsIdResponseObject interface {
	VisitPutApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error
}

type PutApiAdminAccountAdminAccountAdminsId200Response struct {
}

func (response PutApiAdminAccountAdminAccountAdminsId200Response) VisitPutApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutApiAdminAccountAdminAccountAdminsId400JSONResponse ErrMsg

func (response PutApiAdminAccountAdminAccountAdminsId400JSONResponse) VisitPutApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutApiAdminAccountAdminAccountAdminsId401JSONResponse ErrMsg

func (response PutApiAdminAccountAdminAccountAdminsId401JSONResponse) VisitPutApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutApiAdminAccountAdminAccountAdminsId404JSONResponse ErrMsg

func (response PutApiAdminAccountAdminAccountAdminsId404JSONResponse) VisitPutApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutApiAdminAccountAdminAccountAdminsId500JSONResponse ErrMsg

func (response PutApiAdminAccountAdminAccountAdminsId500JSONResponse) VisitPutApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAdminLoginRequestObject struct {
	Body *PostApiAdminLoginJSONRequestBody
}

type PostApiAdminLoginResponseObject interface {
	VisitPostApiAdminLoginResponse(w http.ResponseWriter) error
}

type PostApiAdminLogin200JSONResponse struct {
	Token *string `json:"token,omitempty"`
}

func (response PostApiAdminLogin200JSONResponse) VisitPostApiAdminLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAdminLogin400JSONResponse ErrMsg

func (response PostApiAdminLogin400JSONResponse) VisitPostApiAdminLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAdminLogin401JSONResponse ErrMsg

func (response PostApiAdminLogin401JSONResponse) VisitPostApiAdminLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAdminLogin500JSONResponse ErrMsg

func (response PostApiAdminLogin500JSONResponse) VisitPostApiAdminLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAuthGoogleCallbackRequestObject struct {
	Params GetApiAuthGoogleCallbackParams
}

type GetApiAuthGoogleCallbackResponseObject interface {
	VisitGetApiAuthGoogleCallbackResponse(w http.ResponseWriter) error
}

type GetApiAuthGoogleCallback302Response struct {
}

func (response GetApiAuthGoogleCallback302Response) VisitGetApiAuthGoogleCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(302)
	return nil
}

type GetApiAuthGoogleLoginRequestObject struct {
}

type GetApiAuthGoogleLoginResponseObject interface {
	VisitGetApiAuthGoogleLoginResponse(w http.ResponseWriter) error
}

type GetApiAuthGoogleLogin302Response struct {
}

func (response GetApiAuthGoogleLogin302Response) VisitGetApiAuthGoogleLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(302)
	return nil
}

type GetApiHealthCheckRequestObject struct {
}

type GetApiHealthCheckResponseObject interface {
	VisitGetApiHealthCheckResponse(w http.ResponseWriter) error
}

type GetApiHealthCheck200JSONResponse struct {
	Message string `json:"message"`
}

func (response GetApiHealthCheck200JSONResponse) VisitGetApiHealthCheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiJewelleryRequestObject struct {
	Body *GetApiJewelleryJSONRequestBody
}

type GetApiJewelleryResponseObject interface {
	VisitGetApiJewelleryResponse(w http.ResponseWriter) error
}

type GetApiJewellery200JSONResponse []Jewellery

func (response GetApiJewellery200JSONResponse) VisitGetApiJewelleryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiJewellery400JSONResponse ErrMsg

func (response GetApiJewellery400JSONResponse) VisitGetApiJewelleryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetApiJewellery500JSONResponse ErrMsg

func (response GetApiJewellery500JSONResponse) VisitGetApiJewelleryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Display the main page
	// (GET /api)
	GetApi(ctx context.Context, request GetApiRequestObject) (GetApiResponseObject, error)

	// (GET /api/admin/account_admin)
	GetApiAdminAccountAdmin(ctx context.Context, request GetApiAdminAccountAdminRequestObject) (GetApiAdminAccountAdminResponseObject, error)

	// (POST /api/admin/account_admin)
	PostApiAdminAccountAdmin(ctx context.Context, request PostApiAdminAccountAdminRequestObject) (PostApiAdminAccountAdminResponseObject, error)

	// (DELETE /api/admin/account_admin/{account_admins_id})
	DeleteApiAdminAccountAdminAccountAdminsId(ctx context.Context, request DeleteApiAdminAccountAdminAccountAdminsIdRequestObject) (DeleteApiAdminAccountAdminAccountAdminsIdResponseObject, error)

	// (GET /api/admin/account_admin/{account_admins_id})
	GetApiAdminAccountAdminAccountAdminsId(ctx context.Context, request GetApiAdminAccountAdminAccountAdminsIdRequestObject) (GetApiAdminAccountAdminAccountAdminsIdResponseObject, error)

	// (PUT /api/admin/account_admin/{account_admins_id})
	PutApiAdminAccountAdminAccountAdminsId(ctx context.Context, request PutApiAdminAccountAdminAccountAdminsIdRequestObject) (PutApiAdminAccountAdminAccountAdminsIdResponseObject, error)

	// (POST /api/admin/login)
	PostApiAdminLogin(ctx context.Context, request PostApiAdminLoginRequestObject) (PostApiAdminLoginResponseObject, error)
	// Handle Google OAuth2 callback
	// (GET /api/auth/google/callback)
	GetApiAuthGoogleCallback(ctx context.Context, request GetApiAuthGoogleCallbackRequestObject) (GetApiAuthGoogleCallbackResponseObject, error)
	// Initiate Google OAuth2 login
	// (GET /api/auth/google/login)
	GetApiAuthGoogleLogin(ctx context.Context, request GetApiAuthGoogleLoginRequestObject) (GetApiAuthGoogleLoginResponseObject, error)
	// Health Check
	// (GET /api/health_check)
	GetApiHealthCheck(ctx context.Context, request GetApiHealthCheckRequestObject) (GetApiHealthCheckResponseObject, error)

	// (GET /api/jewellery)
	GetApiJewellery(ctx context.Context, request GetApiJewelleryRequestObject) (GetApiJewelleryResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictGinHandlerFunc
type StrictMiddlewareFunc = runtime.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetApi operation middleware
func (sh *strictHandler) GetApi(ctx *gin.Context) {
	var request GetApiRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApi(ctx, request.(GetApiRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApi")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiResponseObject); ok {
		if err := validResponse.VisitGetApiResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetApiAdminAccountAdmin operation middleware
func (sh *strictHandler) GetApiAdminAccountAdmin(ctx *gin.Context) {
	var request GetApiAdminAccountAdminRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAdminAccountAdmin(ctx, request.(GetApiAdminAccountAdminRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAdminAccountAdmin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAdminAccountAdminResponseObject); ok {
		if err := validResponse.VisitGetApiAdminAccountAdminResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostApiAdminAccountAdmin operation middleware
func (sh *strictHandler) PostApiAdminAccountAdmin(ctx *gin.Context) {
	var request PostApiAdminAccountAdminRequestObject

	var body PostApiAdminAccountAdminJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAdminAccountAdmin(ctx, request.(PostApiAdminAccountAdminRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAdminAccountAdmin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAdminAccountAdminResponseObject); ok {
		if err := validResponse.VisitPostApiAdminAccountAdminResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteApiAdminAccountAdminAccountAdminsId operation middleware
func (sh *strictHandler) DeleteApiAdminAccountAdminAccountAdminsId(ctx *gin.Context, accountAdminsId AccountAdminID) {
	var request DeleteApiAdminAccountAdminAccountAdminsIdRequestObject

	request.AccountAdminsId = accountAdminsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiAdminAccountAdminAccountAdminsId(ctx, request.(DeleteApiAdminAccountAdminAccountAdminsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiAdminAccountAdminAccountAdminsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiAdminAccountAdminAccountAdminsIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiAdminAccountAdminAccountAdminsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetApiAdminAccountAdminAccountAdminsId operation middleware
func (sh *strictHandler) GetApiAdminAccountAdminAccountAdminsId(ctx *gin.Context, accountAdminsId AccountAdminID) {
	var request GetApiAdminAccountAdminAccountAdminsIdRequestObject

	request.AccountAdminsId = accountAdminsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAdminAccountAdminAccountAdminsId(ctx, request.(GetApiAdminAccountAdminAccountAdminsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAdminAccountAdminAccountAdminsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAdminAccountAdminAccountAdminsIdResponseObject); ok {
		if err := validResponse.VisitGetApiAdminAccountAdminAccountAdminsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PutApiAdminAccountAdminAccountAdminsId operation middleware
func (sh *strictHandler) PutApiAdminAccountAdminAccountAdminsId(ctx *gin.Context, accountAdminsId AccountAdminID) {
	var request PutApiAdminAccountAdminAccountAdminsIdRequestObject

	request.AccountAdminsId = accountAdminsId

	var body PutApiAdminAccountAdminAccountAdminsIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiAdminAccountAdminAccountAdminsId(ctx, request.(PutApiAdminAccountAdminAccountAdminsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiAdminAccountAdminAccountAdminsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiAdminAccountAdminAccountAdminsIdResponseObject); ok {
		if err := validResponse.VisitPutApiAdminAccountAdminAccountAdminsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// PostApiAdminLogin operation middleware
func (sh *strictHandler) PostApiAdminLogin(ctx *gin.Context) {
	var request PostApiAdminLoginRequestObject

	var body PostApiAdminLoginJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAdminLogin(ctx, request.(PostApiAdminLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAdminLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAdminLoginResponseObject); ok {
		if err := validResponse.VisitPostApiAdminLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetApiAuthGoogleCallback operation middleware
func (sh *strictHandler) GetApiAuthGoogleCallback(ctx *gin.Context, params GetApiAuthGoogleCallbackParams) {
	var request GetApiAuthGoogleCallbackRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAuthGoogleCallback(ctx, request.(GetApiAuthGoogleCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAuthGoogleCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAuthGoogleCallbackResponseObject); ok {
		if err := validResponse.VisitGetApiAuthGoogleCallbackResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetApiAuthGoogleLogin operation middleware
func (sh *strictHandler) GetApiAuthGoogleLogin(ctx *gin.Context) {
	var request GetApiAuthGoogleLoginRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAuthGoogleLogin(ctx, request.(GetApiAuthGoogleLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAuthGoogleLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAuthGoogleLoginResponseObject); ok {
		if err := validResponse.VisitGetApiAuthGoogleLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetApiHealthCheck operation middleware
func (sh *strictHandler) GetApiHealthCheck(ctx *gin.Context) {
	var request GetApiHealthCheckRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiHealthCheck(ctx, request.(GetApiHealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiHealthCheck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiHealthCheckResponseObject); ok {
		if err := validResponse.VisitGetApiHealthCheckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetApiJewellery operation middleware
func (sh *strictHandler) GetApiJewellery(ctx *gin.Context) {
	var request GetApiJewelleryRequestObject

	var body GetApiJewelleryJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiJewellery(ctx, request.(GetApiJewelleryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiJewellery")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiJewelleryResponseObject); ok {
		if err := validResponse.VisitGetApiJewelleryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"MXZhNWPw9Hz6dwAAAP//nQISYGEfAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
