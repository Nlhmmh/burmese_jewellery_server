// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "burmese_jewellery/models"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health Check
	// (GET /api/health_check)
	GetApiHealthCheck(c *gin.Context)
	// Jewellery List
	// (GET /api/jewellery)
	GetApiJewellery(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) GetApiHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiHealthCheck(c)
}

// GetApiJewellery operation middleware
func (siw *ServerInterfaceWrapper) GetApiJewellery(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiJewellery(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/health_check", wrapper.GetApiHealthCheck)
	router.GET(options.BaseURL+"/api/jewellery", wrapper.GetApiJewellery)
}

type GetApiHealthCheckRequestObject struct {
}

type GetApiHealthCheckResponseObject interface {
	VisitGetApiHealthCheckResponse(w http.ResponseWriter) error
}

type GetApiHealthCheck200JSONResponse struct {
	Message string `json:"message"`
}

func (response GetApiHealthCheck200JSONResponse) VisitGetApiHealthCheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiJewelleryRequestObject struct {
	Body *GetApiJewelleryJSONRequestBody
}

type GetApiJewelleryResponseObject interface {
	VisitGetApiJewelleryResponse(w http.ResponseWriter) error
}

type GetApiJewellery200JSONResponse []Jewellery

func (response GetApiJewellery200JSONResponse) VisitGetApiJewelleryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiJewellery400JSONResponse ErrorMessage

func (response GetApiJewellery400JSONResponse) VisitGetApiJewelleryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetApiJewellery500JSONResponse ErrorMessage

func (response GetApiJewellery500JSONResponse) VisitGetApiJewelleryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Health Check
	// (GET /api/health_check)
	GetApiHealthCheck(ctx context.Context, request GetApiHealthCheckRequestObject) (GetApiHealthCheckResponseObject, error)
	// Jewellery List
	// (GET /api/jewellery)
	GetApiJewellery(ctx context.Context, request GetApiJewelleryRequestObject) (GetApiJewelleryResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictGinHandlerFunc
type StrictMiddlewareFunc = runtime.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetApiHealthCheck operation middleware
func (sh *strictHandler) GetApiHealthCheck(ctx *gin.Context) {
	var request GetApiHealthCheckRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiHealthCheck(ctx, request.(GetApiHealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiHealthCheck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiHealthCheckResponseObject); ok {
		if err := validResponse.VisitGetApiHealthCheckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetApiJewellery operation middleware
func (sh *strictHandler) GetApiJewellery(ctx *gin.Context) {
	var request GetApiJewelleryRequestObject

	var body GetApiJewelleryJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiJewellery(ctx, request.(GetApiJewelleryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiJewellery")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiJewelleryResponseObject); ok {
		if err := validResponse.VisitGetApiJewelleryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("Unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWXW8bRRf+K6t5e7neXbtxGq0UvUpJSk0/RRFclMoa755dT7Izs52ZTWJVlmqvKCBA",
	"AoRASFR8Sq2oGir1oiCK+mOmJf0ZaGbtOI7dFBfEhbUfc85znnn2nGd8A0Wc5pwBUxKFN5CMukCxvd0Q",
	"gosLICVOwTzHICNBckU4Q2G16oyXXZQLnoNQBGwufUnaxjhN9XJAIZJKEJaivou2QUgbejRzLc8zEmHz",
	"5Lw9CprJ7/dd9AbsQJaB6BmMaVpTiDcQ7GKaZyb/HYhjwlLnDBewDcIhzLmcYUVYQZ0doroOds7iLKlF",
	"REQZODxx1gmmnMXSdRpew6EUuYji3fPAUtVFYaPZPMrNRbs1jnNSi3gMKbAa7CqBawqnFbUOCqf4ma0Q",
	"ilNoFyKbZttVKpeh71OICfYUSRLMel7EqU+kb3P8t6qX/kbEaUsBPd/wR3G1pNpjB7O4ZpjV6svNU0vL",
	"J5vterDUbJ5caW+sty94m3n6/3eLIGgs87xdSLpa90413boXuMteUC2ciATPL64GXt2tfivmV63FkOAi",
	"Uy3DZvUit9e1bUwy3MmgxRQIhrMqdOGEhKrVHejk6FU0nmhqFN4cN0ubxCbkhIAEheh//mQs/NFM+AeN",
	"1Vo3ncowhWO76F9pCVvFMM0Fiabr1YMgCFyUcEGxQiFKMo7V8tJEFcIUpJbHy+tU8KbQ9QIzRVTvaK1D",
	"lQh75ToH6HZWRwC8swmRQoeHt7U+awEHi05rHR2iUxQknu8FsFv1zTqPZg0AnSEsdnihHMoFOLhjbq/s",
	"4LTaix07O2uh78vqtUe4YUlYwuc41OWW+fTOObJVUKDcM5yIsq0xfuesXW6hQy6H6l7gBQaT58BwTlCI",
	"TnqB1zCWilXXsvZxTvwu4Ex121EXoi3zMgVlLsberCm2YhSi10Gt5eSsDX3NRrpIgMw5k5UDNoLAXCLO",
	"FDALgCe+6m/Kyhirjp/1zylbt+OKQnTp3BztTdnrBREQo/DqQd61mS9uIqdVvFJEEUiZFJkzZm7xZEEp",
	"NqaOqu051f7MktVn87DtHyPO5HioOIJUp3ncW0iVv+USZnP9fyg/UUDlAhUP9MVC4N48eS+dM1FLC/I4",
	"rvzU/4Q5FU/j2HmzEtqUbv6HpcfHhnMFhDnWbfyRbpqYynkiRx0pbbhE4dWjM67Lr3R5X5c39fAXPXyk",
	"yzu6fLj/+YNnP5RTlmGOZ5wTb2vsBYwXMsNpIc05jfruDPDwN13e0uVjPfxVlw/18MExqFKlCyCX7+vy",
	"a8u61OVnunx8DHIM24sg37eE7+ny3hzMEWTGI5y9ADRcCVbqr4RsUbtcqhGEsRZ7zsx+suGjsbjf7e99",
	"v//prec339ODPT148vSPJ/tf3NWDO3rwiR5+pId3jfTlh7q8rYc/2fsP0PikR7InFdA2jilhczhXZsOF",
	"Htx9QcmPF6s3BpxT689vfn629+3zH+0+jkfp4Ggr4+k8kQe39WDv6e9fToJBRah/rf9XAAAA//9zD3ed",
	"FgwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
