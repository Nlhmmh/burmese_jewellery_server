// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "burmese_jewellery/models"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Display the main page
	// (GET /api)
	GetApi(c *gin.Context)
	// List user
	// (GET /api/admin/account)
	GetApiAdminAccount(c *gin.Context, params GetApiAdminAccountParams)
	// Get user
	// (GET /api/admin/account/{account_id})
	GetApiAdminAccountAccountId(c *gin.Context, accountId ID)
	// Update user status
	// (PUT /api/admin/account/{account_id})
	PutApiAdminAccountAccountId(c *gin.Context, accountId ID)
	// List admin user
	// (GET /api/admin/account_admin)
	GetApiAdminAccountAdmin(c *gin.Context, params GetApiAdminAccountAdminParams)

	// (POST /api/admin/account_admin)
	PostApiAdminAccountAdmin(c *gin.Context)
	// Delete admin user
	// (DELETE /api/admin/account_admin/{account_admins_id})
	DeleteApiAdminAccountAdminAccountAdminsId(c *gin.Context, accountAdminsId ID)
	// Get admin user
	// (GET /api/admin/account_admin/{account_admins_id})
	GetApiAdminAccountAdminAccountAdminsId(c *gin.Context, accountAdminsId ID)
	// Edit admin user
	// (PUT /api/admin/account_admin/{account_admins_id})
	PutApiAdminAccountAdminAccountAdminsId(c *gin.Context, accountAdminsId ID)

	// (POST /api/admin/category)
	PostApiAdminCategory(c *gin.Context)

	// (DELETE /api/admin/category/{category_id})
	DeleteApiAdminCategoryCategoryId(c *gin.Context, categoryId ID)

	// (PUT /api/admin/category/{category_id})
	PutApiAdminCategoryCategoryId(c *gin.Context, categoryId ID)

	// (POST /api/admin/faq)
	PostApiAdminFaq(c *gin.Context)

	// (DELETE /api/admin/faq/{faq_id})
	DeleteApiAdminFaqFaqId(c *gin.Context, faqId ID)

	// (PUT /api/admin/faq/{faq_id})
	PutApiAdminFaqFaqId(c *gin.Context, faqId ID)

	// (POST /api/admin/gem)
	PostApiAdminGem(c *gin.Context)

	// (DELETE /api/admin/gem/{gem_id})
	DeleteApiAdminGemGemId(c *gin.Context, gemId ID)

	// (PUT /api/admin/gem/{gem_id})
	PutApiAdminGemGemId(c *gin.Context, gemId ID)

	// (POST /api/admin/jewellery)
	PostApiAdminJewellery(c *gin.Context)

	// (DELETE /api/admin/jewellery/{jewellery_id})
	DeleteApiAdminJewelleryJewelleryId(c *gin.Context, jewelleryId ID)

	// (PUT /api/admin/jewellery/{jewellery_id})
	PutApiAdminJewelleryJewelleryId(c *gin.Context, jewelleryId ID)
	// Login as admin user
	// (POST /api/admin/login)
	PostApiAdminLogin(c *gin.Context)

	// (POST /api/admin/material)
	PostApiAdminMaterial(c *gin.Context)

	// (DELETE /api/admin/material/{material_id})
	DeleteApiAdminMaterialMaterialId(c *gin.Context, materialId ID)

	// (PUT /api/admin/material/{material_id})
	PutApiAdminMaterialMaterialId(c *gin.Context, materialId ID)

	// (POST /api/auth/email/login)
	PostApiAuthEmailLogin(c *gin.Context)

	// (POST /api/auth/email/register)
	PostApiAuthEmailRegister(c *gin.Context)
	// Handle Google OAuth2 callback
	// (GET /api/auth/google/callback)
	GetApiAuthGoogleCallback(c *gin.Context, params GetApiAuthGoogleCallbackParams)
	// Initiate Google OAuth2 login
	// (GET /api/auth/google/login)
	GetApiAuthGoogleLogin(c *gin.Context)

	// (GET /api/cart)
	GetApiCart(c *gin.Context)

	// (POST /api/cart)
	PostApiCart(c *gin.Context)

	// (GET /api/category)
	GetApiCategory(c *gin.Context)

	// (GET /api/faq)
	GetApiFaq(c *gin.Context, params GetApiFaqParams)

	// (GET /api/favourite)
	GetApiFavourite(c *gin.Context)

	// (POST /api/favourite)
	PostApiFavourite(c *gin.Context)

	// (GET /api/gem)
	GetApiGem(c *gin.Context)
	// Health Check
	// (GET /api/health_check)
	GetApiHealthCheck(c *gin.Context)

	// (GET /api/jewellery)
	GetApiJewellery(c *gin.Context, params GetApiJewelleryParams)

	// (GET /api/jewellery/{jewellery_id})
	GetApiJewelleryJewelleryId(c *gin.Context, jewelleryId ID)

	// (GET /api/material)
	GetApiMaterial(c *gin.Context)

	// (GET /api/order)
	GetApiOrder(c *gin.Context)

	// (POST /api/order)
	PostApiOrder(c *gin.Context)

	// (GET /api/order/{account_order_id})
	GetApiOrderAccountOrderId(c *gin.Context, accountOrderId ID)

	// (GET /api/profile)
	GetApiProfile(c *gin.Context)

	// (POST /api/profile)
	PostApiProfile(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApi operation middleware
func (siw *ServerInterfaceWrapper) GetApi(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApi(c)
}

// GetApiAdminAccount operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminAccount(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiAdminAccountParams

	// ------------- Required query parameter "offset" -------------

	if paramValue := c.Query("offset"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument offset is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := c.Query("limit"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument limit is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", c.Request.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "first_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "first_name", c.Request.URL.Query(), &params.FirstName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter first_name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "last_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_name", c.Request.URL.Query(), &params.LastName)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter last_name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "account_status" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_status", c.Request.URL.Query(), &params.AccountStatus)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_status: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAdminAccount(c, params)
}

// GetApiAdminAccountAccountId operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminAccountAccountId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_id" -------------
	var accountId ID

	err = runtime.BindStyledParameter("simple", false, "account_id", c.Param("account_id"), &accountId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAdminAccountAccountId(c, accountId)
}

// PutApiAdminAccountAccountId operation middleware
func (siw *ServerInterfaceWrapper) PutApiAdminAccountAccountId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_id" -------------
	var accountId ID

	err = runtime.BindStyledParameter("simple", false, "account_id", c.Param("account_id"), &accountId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiAdminAccountAccountId(c, accountId)
}

// GetApiAdminAccountAdmin operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminAccountAdmin(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiAdminAccountAdminParams

	// ------------- Required query parameter "offset" -------------

	if paramValue := c.Query("offset"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument offset is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := c.Query("limit"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument limit is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", c.Request.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "mail" -------------

	err = runtime.BindQueryParameter("form", true, false, "mail", c.Request.URL.Query(), &params.Mail)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mail: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "account_admin_role" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_admin_role", c.Request.URL.Query(), &params.AccountAdminRole)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_admin_role: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "account_admin_status" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_admin_status", c.Request.URL.Query(), &params.AccountAdminStatus)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_admin_status: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAdminAccountAdmin(c, params)
}

// PostApiAdminAccountAdmin operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminAccountAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAdminAccountAdmin(c)
}

// DeleteApiAdminAccountAdminAccountAdminsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiAdminAccountAdminAccountAdminsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_admins_id" -------------
	var accountAdminsId ID

	err = runtime.BindStyledParameter("simple", false, "account_admins_id", c.Param("account_admins_id"), &accountAdminsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_admins_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiAdminAccountAdminAccountAdminsId(c, accountAdminsId)
}

// GetApiAdminAccountAdminAccountAdminsId operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminAccountAdminAccountAdminsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_admins_id" -------------
	var accountAdminsId ID

	err = runtime.BindStyledParameter("simple", false, "account_admins_id", c.Param("account_admins_id"), &accountAdminsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_admins_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAdminAccountAdminAccountAdminsId(c, accountAdminsId)
}

// PutApiAdminAccountAdminAccountAdminsId operation middleware
func (siw *ServerInterfaceWrapper) PutApiAdminAccountAdminAccountAdminsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_admins_id" -------------
	var accountAdminsId ID

	err = runtime.BindStyledParameter("simple", false, "account_admins_id", c.Param("account_admins_id"), &accountAdminsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_admins_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiAdminAccountAdminAccountAdminsId(c, accountAdminsId)
}

// PostApiAdminCategory operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminCategory(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAdminCategory(c)
}

// DeleteApiAdminCategoryCategoryId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiAdminCategoryCategoryId(c *gin.Context) {

	var err error

	// ------------- Path parameter "category_id" -------------
	var categoryId ID

	err = runtime.BindStyledParameter("simple", false, "category_id", c.Param("category_id"), &categoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiAdminCategoryCategoryId(c, categoryId)
}

// PutApiAdminCategoryCategoryId operation middleware
func (siw *ServerInterfaceWrapper) PutApiAdminCategoryCategoryId(c *gin.Context) {

	var err error

	// ------------- Path parameter "category_id" -------------
	var categoryId ID

	err = runtime.BindStyledParameter("simple", false, "category_id", c.Param("category_id"), &categoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiAdminCategoryCategoryId(c, categoryId)
}

// PostApiAdminFaq operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminFaq(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAdminFaq(c)
}

// DeleteApiAdminFaqFaqId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiAdminFaqFaqId(c *gin.Context) {

	var err error

	// ------------- Path parameter "faq_id" -------------
	var faqId ID

	err = runtime.BindStyledParameter("simple", false, "faq_id", c.Param("faq_id"), &faqId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter faq_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiAdminFaqFaqId(c, faqId)
}

// PutApiAdminFaqFaqId operation middleware
func (siw *ServerInterfaceWrapper) PutApiAdminFaqFaqId(c *gin.Context) {

	var err error

	// ------------- Path parameter "faq_id" -------------
	var faqId ID

	err = runtime.BindStyledParameter("simple", false, "faq_id", c.Param("faq_id"), &faqId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter faq_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiAdminFaqFaqId(c, faqId)
}

// PostApiAdminGem operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminGem(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAdminGem(c)
}

// DeleteApiAdminGemGemId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiAdminGemGemId(c *gin.Context) {

	var err error

	// ------------- Path parameter "gem_id" -------------
	var gemId ID

	err = runtime.BindStyledParameter("simple", false, "gem_id", c.Param("gem_id"), &gemId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gem_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiAdminGemGemId(c, gemId)
}

// PutApiAdminGemGemId operation middleware
func (siw *ServerInterfaceWrapper) PutApiAdminGemGemId(c *gin.Context) {

	var err error

	// ------------- Path parameter "gem_id" -------------
	var gemId ID

	err = runtime.BindStyledParameter("simple", false, "gem_id", c.Param("gem_id"), &gemId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gem_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiAdminGemGemId(c, gemId)
}

// PostApiAdminJewellery operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminJewellery(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAdminJewellery(c)
}

// DeleteApiAdminJewelleryJewelleryId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiAdminJewelleryJewelleryId(c *gin.Context) {

	var err error

	// ------------- Path parameter "jewellery_id" -------------
	var jewelleryId ID

	err = runtime.BindStyledParameter("simple", false, "jewellery_id", c.Param("jewellery_id"), &jewelleryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter jewellery_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiAdminJewelleryJewelleryId(c, jewelleryId)
}

// PutApiAdminJewelleryJewelleryId operation middleware
func (siw *ServerInterfaceWrapper) PutApiAdminJewelleryJewelleryId(c *gin.Context) {

	var err error

	// ------------- Path parameter "jewellery_id" -------------
	var jewelleryId ID

	err = runtime.BindStyledParameter("simple", false, "jewellery_id", c.Param("jewellery_id"), &jewelleryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter jewellery_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiAdminJewelleryJewelleryId(c, jewelleryId)
}

// PostApiAdminLogin operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAdminLogin(c)
}

// PostApiAdminMaterial operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminMaterial(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAdminMaterial(c)
}

// DeleteApiAdminMaterialMaterialId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiAdminMaterialMaterialId(c *gin.Context) {

	var err error

	// ------------- Path parameter "material_id" -------------
	var materialId ID

	err = runtime.BindStyledParameter("simple", false, "material_id", c.Param("material_id"), &materialId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter material_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiAdminMaterialMaterialId(c, materialId)
}

// PutApiAdminMaterialMaterialId operation middleware
func (siw *ServerInterfaceWrapper) PutApiAdminMaterialMaterialId(c *gin.Context) {

	var err error

	// ------------- Path parameter "material_id" -------------
	var materialId ID

	err = runtime.BindStyledParameter("simple", false, "material_id", c.Param("material_id"), &materialId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter material_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiAdminMaterialMaterialId(c, materialId)
}

// PostApiAuthEmailLogin operation middleware
func (siw *ServerInterfaceWrapper) PostApiAuthEmailLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAuthEmailLogin(c)
}

// PostApiAuthEmailRegister operation middleware
func (siw *ServerInterfaceWrapper) PostApiAuthEmailRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAuthEmailRegister(c)
}

// GetApiAuthGoogleCallback operation middleware
func (siw *ServerInterfaceWrapper) GetApiAuthGoogleCallback(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiAuthGoogleCallbackParams

	// ------------- Required query parameter "state" -------------

	if paramValue := c.Query("state"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument state is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "code" -------------

	if paramValue := c.Query("code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAuthGoogleCallback(c, params)
}

// GetApiAuthGoogleLogin operation middleware
func (siw *ServerInterfaceWrapper) GetApiAuthGoogleLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAuthGoogleLogin(c)
}

// GetApiCart operation middleware
func (siw *ServerInterfaceWrapper) GetApiCart(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiCart(c)
}

// PostApiCart operation middleware
func (siw *ServerInterfaceWrapper) PostApiCart(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiCart(c)
}

// GetApiCategory operation middleware
func (siw *ServerInterfaceWrapper) GetApiCategory(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiCategory(c)
}

// GetApiFaq operation middleware
func (siw *ServerInterfaceWrapper) GetApiFaq(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiFaqParams

	// ------------- Required query parameter "offset" -------------

	if paramValue := c.Query("offset"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument offset is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := c.Query("limit"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument limit is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", c.Request.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "question" -------------

	err = runtime.BindQueryParameter("form", true, false, "question", c.Request.URL.Query(), &params.Question)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter question: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "answer" -------------

	err = runtime.BindQueryParameter("form", true, false, "answer", c.Request.URL.Query(), &params.Answer)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter answer: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "is_active" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_active", c.Request.URL.Query(), &params.IsActive)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter is_active: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiFaq(c, params)
}

// GetApiFavourite operation middleware
func (siw *ServerInterfaceWrapper) GetApiFavourite(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiFavourite(c)
}

// PostApiFavourite operation middleware
func (siw *ServerInterfaceWrapper) PostApiFavourite(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiFavourite(c)
}

// GetApiGem operation middleware
func (siw *ServerInterfaceWrapper) GetApiGem(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiGem(c)
}

// GetApiHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) GetApiHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiHealthCheck(c)
}

// GetApiJewellery operation middleware
func (siw *ServerInterfaceWrapper) GetApiJewellery(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiJewelleryParams

	// ------------- Required query parameter "offset" -------------

	if paramValue := c.Query("offset"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument offset is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := c.Query("limit"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument limit is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", c.Request.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "category_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "category_id", c.Request.URL.Query(), &params.CategoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "gem_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "gem_id", c.Request.URL.Query(), &params.GemId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter gem_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "material_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "material_id", c.Request.URL.Query(), &params.MaterialId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter material_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "is_published" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_published", c.Request.URL.Query(), &params.IsPublished)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter is_published: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiJewellery(c, params)
}

// GetApiJewelleryJewelleryId operation middleware
func (siw *ServerInterfaceWrapper) GetApiJewelleryJewelleryId(c *gin.Context) {

	var err error

	// ------------- Path parameter "jewellery_id" -------------
	var jewelleryId ID

	err = runtime.BindStyledParameter("simple", false, "jewellery_id", c.Param("jewellery_id"), &jewelleryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter jewellery_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiJewelleryJewelleryId(c, jewelleryId)
}

// GetApiMaterial operation middleware
func (siw *ServerInterfaceWrapper) GetApiMaterial(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiMaterial(c)
}

// GetApiOrder operation middleware
func (siw *ServerInterfaceWrapper) GetApiOrder(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiOrder(c)
}

// PostApiOrder operation middleware
func (siw *ServerInterfaceWrapper) PostApiOrder(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiOrder(c)
}

// GetApiOrderAccountOrderId operation middleware
func (siw *ServerInterfaceWrapper) GetApiOrderAccountOrderId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_order_id" -------------
	var accountOrderId ID

	err = runtime.BindStyledParameter("simple", false, "account_order_id", c.Param("account_order_id"), &accountOrderId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_order_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiOrderAccountOrderId(c, accountOrderId)
}

// GetApiProfile operation middleware
func (siw *ServerInterfaceWrapper) GetApiProfile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiProfile(c)
}

// PostApiProfile operation middleware
func (siw *ServerInterfaceWrapper) PostApiProfile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiProfile(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api", wrapper.GetApi)
	router.GET(options.BaseURL+"/api/admin/account", wrapper.GetApiAdminAccount)
	router.GET(options.BaseURL+"/api/admin/account/:account_id", wrapper.GetApiAdminAccountAccountId)
	router.PUT(options.BaseURL+"/api/admin/account/:account_id", wrapper.PutApiAdminAccountAccountId)
	router.GET(options.BaseURL+"/api/admin/account_admin", wrapper.GetApiAdminAccountAdmin)
	router.POST(options.BaseURL+"/api/admin/account_admin", wrapper.PostApiAdminAccountAdmin)
	router.DELETE(options.BaseURL+"/api/admin/account_admin/:account_admins_id", wrapper.DeleteApiAdminAccountAdminAccountAdminsId)
	router.GET(options.BaseURL+"/api/admin/account_admin/:account_admins_id", wrapper.GetApiAdminAccountAdminAccountAdminsId)
	router.PUT(options.BaseURL+"/api/admin/account_admin/:account_admins_id", wrapper.PutApiAdminAccountAdminAccountAdminsId)
	router.POST(options.BaseURL+"/api/admin/category", wrapper.PostApiAdminCategory)
	router.DELETE(options.BaseURL+"/api/admin/category/:category_id", wrapper.DeleteApiAdminCategoryCategoryId)
	router.PUT(options.BaseURL+"/api/admin/category/:category_id", wrapper.PutApiAdminCategoryCategoryId)
	router.POST(options.BaseURL+"/api/admin/faq", wrapper.PostApiAdminFaq)
	router.DELETE(options.BaseURL+"/api/admin/faq/:faq_id", wrapper.DeleteApiAdminFaqFaqId)
	router.PUT(options.BaseURL+"/api/admin/faq/:faq_id", wrapper.PutApiAdminFaqFaqId)
	router.POST(options.BaseURL+"/api/admin/gem", wrapper.PostApiAdminGem)
	router.DELETE(options.BaseURL+"/api/admin/gem/:gem_id", wrapper.DeleteApiAdminGemGemId)
	router.PUT(options.BaseURL+"/api/admin/gem/:gem_id", wrapper.PutApiAdminGemGemId)
	router.POST(options.BaseURL+"/api/admin/jewellery", wrapper.PostApiAdminJewellery)
	router.DELETE(options.BaseURL+"/api/admin/jewellery/:jewellery_id", wrapper.DeleteApiAdminJewelleryJewelleryId)
	router.PUT(options.BaseURL+"/api/admin/jewellery/:jewellery_id", wrapper.PutApiAdminJewelleryJewelleryId)
	router.POST(options.BaseURL+"/api/admin/login", wrapper.PostApiAdminLogin)
	router.POST(options.BaseURL+"/api/admin/material", wrapper.PostApiAdminMaterial)
	router.DELETE(options.BaseURL+"/api/admin/material/:material_id", wrapper.DeleteApiAdminMaterialMaterialId)
	router.PUT(options.BaseURL+"/api/admin/material/:material_id", wrapper.PutApiAdminMaterialMaterialId)
	router.POST(options.BaseURL+"/api/auth/email/login", wrapper.PostApiAuthEmailLogin)
	router.POST(options.BaseURL+"/api/auth/email/register", wrapper.PostApiAuthEmailRegister)
	router.GET(options.BaseURL+"/api/auth/google/callback", wrapper.GetApiAuthGoogleCallback)
	router.GET(options.BaseURL+"/api/auth/google/login", wrapper.GetApiAuthGoogleLogin)
	router.GET(options.BaseURL+"/api/cart", wrapper.GetApiCart)
	router.POST(options.BaseURL+"/api/cart", wrapper.PostApiCart)
	router.GET(options.BaseURL+"/api/category", wrapper.GetApiCategory)
	router.GET(options.BaseURL+"/api/faq", wrapper.GetApiFaq)
	router.GET(options.BaseURL+"/api/favourite", wrapper.GetApiFavourite)
	router.POST(options.BaseURL+"/api/favourite", wrapper.PostApiFavourite)
	router.GET(options.BaseURL+"/api/gem", wrapper.GetApiGem)
	router.GET(options.BaseURL+"/api/health_check", wrapper.GetApiHealthCheck)
	router.GET(options.BaseURL+"/api/jewellery", wrapper.GetApiJewellery)
	router.GET(options.BaseURL+"/api/jewellery/:jewellery_id", wrapper.GetApiJewelleryJewelleryId)
	router.GET(options.BaseURL+"/api/material", wrapper.GetApiMaterial)
	router.GET(options.BaseURL+"/api/order", wrapper.GetApiOrder)
	router.POST(options.BaseURL+"/api/order", wrapper.PostApiOrder)
	router.GET(options.BaseURL+"/api/order/:account_order_id", wrapper.GetApiOrderAccountOrderId)
	router.GET(options.BaseURL+"/api/profile", wrapper.GetApiProfile)
	router.POST(options.BaseURL+"/api/profile", wrapper.PostApiProfile)
}

type GetApiRequestObject struct {
}

type GetApiResponseObject interface {
	VisitGetApiResponse(w http.ResponseWriter) error
}

type GetApi200Response struct {
}

func (response GetApi200Response) VisitGetApiResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetApiAdminAccountRequestObject struct {
	Params GetApiAdminAccountParams
}

type GetApiAdminAccountResponseObject interface {
	VisitGetApiAdminAccountResponse(w http.ResponseWriter) error
}

type GetApiAdminAccount200JSONResponse []AccountWithProfile

func (response GetApiAdminAccount200JSONResponse) VisitGetApiAdminAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAdminAccountAccountIdRequestObject struct {
	AccountId ID `json:"account_id"`
}

type GetApiAdminAccountAccountIdResponseObject interface {
	VisitGetApiAdminAccountAccountIdResponse(w http.ResponseWriter) error
}

type GetApiAdminAccountAccountId200JSONResponse Account

func (response GetApiAdminAccountAccountId200JSONResponse) VisitGetApiAdminAccountAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutApiAdminAccountAccountIdRequestObject struct {
	AccountId ID `json:"account_id"`
	Body      *PutApiAdminAccountAccountIdJSONRequestBody
}

type PutApiAdminAccountAccountIdResponseObject interface {
	VisitPutApiAdminAccountAccountIdResponse(w http.ResponseWriter) error
}

type PutApiAdminAccountAccountId200Response struct {
}

func (response PutApiAdminAccountAccountId200Response) VisitPutApiAdminAccountAccountIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetApiAdminAccountAdminRequestObject struct {
	Params GetApiAdminAccountAdminParams
}

type GetApiAdminAccountAdminResponseObject interface {
	VisitGetApiAdminAccountAdminResponse(w http.ResponseWriter) error
}

type GetApiAdminAccountAdmin200JSONResponse []AccountAdmin

func (response GetApiAdminAccountAdmin200JSONResponse) VisitGetApiAdminAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAdminAccountAdminRequestObject struct {
	Body *PostApiAdminAccountAdminJSONRequestBody
}

type PostApiAdminAccountAdminResponseObject interface {
	VisitPostApiAdminAccountAdminResponse(w http.ResponseWriter) error
}

type PostApiAdminAccountAdmin200Response struct {
}

func (response PostApiAdminAccountAdmin200Response) VisitPostApiAdminAccountAdminResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteApiAdminAccountAdminAccountAdminsIdRequestObject struct {
	AccountAdminsId ID `json:"account_admins_id"`
}

type DeleteApiAdminAccountAdminAccountAdminsIdResponseObject interface {
	VisitDeleteApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error
}

type DeleteApiAdminAccountAdminAccountAdminsId204Response struct {
}

func (response DeleteApiAdminAccountAdminAccountAdminsId204Response) VisitDeleteApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetApiAdminAccountAdminAccountAdminsIdRequestObject struct {
	AccountAdminsId ID `json:"account_admins_id"`
}

type GetApiAdminAccountAdminAccountAdminsIdResponseObject interface {
	VisitGetApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error
}

type GetApiAdminAccountAdminAccountAdminsId200JSONResponse AccountAdmin

func (response GetApiAdminAccountAdminAccountAdminsId200JSONResponse) VisitGetApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutApiAdminAccountAdminAccountAdminsIdRequestObject struct {
	AccountAdminsId ID `json:"account_admins_id"`
	Body            *PutApiAdminAccountAdminAccountAdminsIdJSONRequestBody
}

type PutApiAdminAccountAdminAccountAdminsIdResponseObject interface {
	VisitPutApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error
}

type PutApiAdminAccountAdminAccountAdminsId200Response struct {
}

func (response PutApiAdminAccountAdminAccountAdminsId200Response) VisitPutApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostApiAdminCategoryRequestObject struct {
	Body *PostApiAdminCategoryJSONRequestBody
}

type PostApiAdminCategoryResponseObject interface {
	VisitPostApiAdminCategoryResponse(w http.ResponseWriter) error
}

type PostApiAdminCategory200Response struct {
}

func (response PostApiAdminCategory200Response) VisitPostApiAdminCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteApiAdminCategoryCategoryIdRequestObject struct {
	CategoryId ID `json:"category_id"`
}

type DeleteApiAdminCategoryCategoryIdResponseObject interface {
	VisitDeleteApiAdminCategoryCategoryIdResponse(w http.ResponseWriter) error
}

type DeleteApiAdminCategoryCategoryId204Response struct {
}

func (response DeleteApiAdminCategoryCategoryId204Response) VisitDeleteApiAdminCategoryCategoryIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutApiAdminCategoryCategoryIdRequestObject struct {
	CategoryId ID `json:"category_id"`
	Body       *PutApiAdminCategoryCategoryIdJSONRequestBody
}

type PutApiAdminCategoryCategoryIdResponseObject interface {
	VisitPutApiAdminCategoryCategoryIdResponse(w http.ResponseWriter) error
}

type PutApiAdminCategoryCategoryId200Response struct {
}

func (response PutApiAdminCategoryCategoryId200Response) VisitPutApiAdminCategoryCategoryIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostApiAdminFaqRequestObject struct {
	Body *PostApiAdminFaqJSONRequestBody
}

type PostApiAdminFaqResponseObject interface {
	VisitPostApiAdminFaqResponse(w http.ResponseWriter) error
}

type PostApiAdminFaq200Response struct {
}

func (response PostApiAdminFaq200Response) VisitPostApiAdminFaqResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteApiAdminFaqFaqIdRequestObject struct {
	FaqId ID `json:"faq_id"`
}

type DeleteApiAdminFaqFaqIdResponseObject interface {
	VisitDeleteApiAdminFaqFaqIdResponse(w http.ResponseWriter) error
}

type DeleteApiAdminFaqFaqId204Response struct {
}

func (response DeleteApiAdminFaqFaqId204Response) VisitDeleteApiAdminFaqFaqIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutApiAdminFaqFaqIdRequestObject struct {
	FaqId ID `json:"faq_id"`
	Body  *PutApiAdminFaqFaqIdJSONRequestBody
}

type PutApiAdminFaqFaqIdResponseObject interface {
	VisitPutApiAdminFaqFaqIdResponse(w http.ResponseWriter) error
}

type PutApiAdminFaqFaqId200Response struct {
}

func (response PutApiAdminFaqFaqId200Response) VisitPutApiAdminFaqFaqIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostApiAdminGemRequestObject struct {
	Body *PostApiAdminGemJSONRequestBody
}

type PostApiAdminGemResponseObject interface {
	VisitPostApiAdminGemResponse(w http.ResponseWriter) error
}

type PostApiAdminGem200Response struct {
}

func (response PostApiAdminGem200Response) VisitPostApiAdminGemResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteApiAdminGemGemIdRequestObject struct {
	GemId ID `json:"gem_id"`
}

type DeleteApiAdminGemGemIdResponseObject interface {
	VisitDeleteApiAdminGemGemIdResponse(w http.ResponseWriter) error
}

type DeleteApiAdminGemGemId204Response struct {
}

func (response DeleteApiAdminGemGemId204Response) VisitDeleteApiAdminGemGemIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutApiAdminGemGemIdRequestObject struct {
	GemId ID `json:"gem_id"`
	Body  *PutApiAdminGemGemIdJSONRequestBody
}

type PutApiAdminGemGemIdResponseObject interface {
	VisitPutApiAdminGemGemIdResponse(w http.ResponseWriter) error
}

type PutApiAdminGemGemId200Response struct {
}

func (response PutApiAdminGemGemId200Response) VisitPutApiAdminGemGemIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostApiAdminJewelleryRequestObject struct {
	Body *PostApiAdminJewelleryJSONRequestBody
}

type PostApiAdminJewelleryResponseObject interface {
	VisitPostApiAdminJewelleryResponse(w http.ResponseWriter) error
}

type PostApiAdminJewellery200Response struct {
}

func (response PostApiAdminJewellery200Response) VisitPostApiAdminJewelleryResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteApiAdminJewelleryJewelleryIdRequestObject struct {
	JewelleryId ID `json:"jewellery_id"`
}

type DeleteApiAdminJewelleryJewelleryIdResponseObject interface {
	VisitDeleteApiAdminJewelleryJewelleryIdResponse(w http.ResponseWriter) error
}

type DeleteApiAdminJewelleryJewelleryId204Response struct {
}

func (response DeleteApiAdminJewelleryJewelleryId204Response) VisitDeleteApiAdminJewelleryJewelleryIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutApiAdminJewelleryJewelleryIdRequestObject struct {
	JewelleryId ID `json:"jewellery_id"`
	Body        *PutApiAdminJewelleryJewelleryIdJSONRequestBody
}

type PutApiAdminJewelleryJewelleryIdResponseObject interface {
	VisitPutApiAdminJewelleryJewelleryIdResponse(w http.ResponseWriter) error
}

type PutApiAdminJewelleryJewelleryId200Response struct {
}

func (response PutApiAdminJewelleryJewelleryId200Response) VisitPutApiAdminJewelleryJewelleryIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostApiAdminLoginRequestObject struct {
	Body *PostApiAdminLoginJSONRequestBody
}

type PostApiAdminLoginResponseObject interface {
	VisitPostApiAdminLoginResponse(w http.ResponseWriter) error
}

type PostApiAdminLogin200JSONResponse struct {
	Token *string `json:"token,omitempty"`
}

func (response PostApiAdminLogin200JSONResponse) VisitPostApiAdminLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAdminMaterialRequestObject struct {
	Body *PostApiAdminMaterialJSONRequestBody
}

type PostApiAdminMaterialResponseObject interface {
	VisitPostApiAdminMaterialResponse(w http.ResponseWriter) error
}

type PostApiAdminMaterial200Response struct {
}

func (response PostApiAdminMaterial200Response) VisitPostApiAdminMaterialResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteApiAdminMaterialMaterialIdRequestObject struct {
	MaterialId ID `json:"material_id"`
}

type DeleteApiAdminMaterialMaterialIdResponseObject interface {
	VisitDeleteApiAdminMaterialMaterialIdResponse(w http.ResponseWriter) error
}

type DeleteApiAdminMaterialMaterialId204Response struct {
}

func (response DeleteApiAdminMaterialMaterialId204Response) VisitDeleteApiAdminMaterialMaterialIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutApiAdminMaterialMaterialIdRequestObject struct {
	MaterialId ID `json:"material_id"`
	Body       *PutApiAdminMaterialMaterialIdJSONRequestBody
}

type PutApiAdminMaterialMaterialIdResponseObject interface {
	VisitPutApiAdminMaterialMaterialIdResponse(w http.ResponseWriter) error
}

type PutApiAdminMaterialMaterialId200Response struct {
}

func (response PutApiAdminMaterialMaterialId200Response) VisitPutApiAdminMaterialMaterialIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostApiAuthEmailLoginRequestObject struct {
	Body *PostApiAuthEmailLoginJSONRequestBody
}

type PostApiAuthEmailLoginResponseObject interface {
	VisitPostApiAuthEmailLoginResponse(w http.ResponseWriter) error
}

type PostApiAuthEmailLogin200Response struct {
}

func (response PostApiAuthEmailLogin200Response) VisitPostApiAuthEmailLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostApiAuthEmailRegisterRequestObject struct {
	Body *PostApiAuthEmailRegisterJSONRequestBody
}

type PostApiAuthEmailRegisterResponseObject interface {
	VisitPostApiAuthEmailRegisterResponse(w http.ResponseWriter) error
}

type PostApiAuthEmailRegister200JSONResponse AuthResp

func (response PostApiAuthEmailRegister200JSONResponse) VisitPostApiAuthEmailRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAuthGoogleCallbackRequestObject struct {
	Params GetApiAuthGoogleCallbackParams
}

type GetApiAuthGoogleCallbackResponseObject interface {
	VisitGetApiAuthGoogleCallbackResponse(w http.ResponseWriter) error
}

type GetApiAuthGoogleCallback200JSONResponse AuthResp

func (response GetApiAuthGoogleCallback200JSONResponse) VisitGetApiAuthGoogleCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAuthGoogleLoginRequestObject struct {
}

type GetApiAuthGoogleLoginResponseObject interface {
	VisitGetApiAuthGoogleLoginResponse(w http.ResponseWriter) error
}

type GetApiAuthGoogleLogin302Response struct {
}

func (response GetApiAuthGoogleLogin302Response) VisitGetApiAuthGoogleLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(302)
	return nil
}

type GetApiCartRequestObject struct {
}

type GetApiCartResponseObject interface {
	VisitGetApiCartResponse(w http.ResponseWriter) error
}

type GetApiCart200JSONResponse []AccountCartJewellery

func (response GetApiCart200JSONResponse) VisitGetApiCartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiCartRequestObject struct {
	Body *PostApiCartJSONRequestBody
}

type PostApiCartResponseObject interface {
	VisitPostApiCartResponse(w http.ResponseWriter) error
}

type PostApiCart200Response struct {
}

func (response PostApiCart200Response) VisitPostApiCartResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetApiCategoryRequestObject struct {
}

type GetApiCategoryResponseObject interface {
	VisitGetApiCategoryResponse(w http.ResponseWriter) error
}

type GetApiCategory200JSONResponse []Category

func (response GetApiCategory200JSONResponse) VisitGetApiCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiFaqRequestObject struct {
	Params GetApiFaqParams
}

type GetApiFaqResponseObject interface {
	VisitGetApiFaqResponse(w http.ResponseWriter) error
}

type GetApiFaq200JSONResponse []FAQ

func (response GetApiFaq200JSONResponse) VisitGetApiFaqResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiFavouriteRequestObject struct {
}

type GetApiFavouriteResponseObject interface {
	VisitGetApiFavouriteResponse(w http.ResponseWriter) error
}

type GetApiFavourite200JSONResponse []AccountFavourite

func (response GetApiFavourite200JSONResponse) VisitGetApiFavouriteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiFavouriteRequestObject struct {
	Body *PostApiFavouriteJSONRequestBody
}

type PostApiFavouriteResponseObject interface {
	VisitPostApiFavouriteResponse(w http.ResponseWriter) error
}

type PostApiFavourite200Response struct {
}

func (response PostApiFavourite200Response) VisitPostApiFavouriteResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetApiGemRequestObject struct {
}

type GetApiGemResponseObject interface {
	VisitGetApiGemResponse(w http.ResponseWriter) error
}

type GetApiGem200JSONResponse []Gem

func (response GetApiGem200JSONResponse) VisitGetApiGemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiHealthCheckRequestObject struct {
}

type GetApiHealthCheckResponseObject interface {
	VisitGetApiHealthCheckResponse(w http.ResponseWriter) error
}

type GetApiHealthCheck200JSONResponse struct {
	Message string `json:"message"`
}

func (response GetApiHealthCheck200JSONResponse) VisitGetApiHealthCheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiJewelleryRequestObject struct {
	Params GetApiJewelleryParams
}

type GetApiJewelleryResponseObject interface {
	VisitGetApiJewelleryResponse(w http.ResponseWriter) error
}

type GetApiJewellery200JSONResponse []Jewellery

func (response GetApiJewellery200JSONResponse) VisitGetApiJewelleryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiJewelleryJewelleryIdRequestObject struct {
	JewelleryId ID `json:"jewellery_id"`
}

type GetApiJewelleryJewelleryIdResponseObject interface {
	VisitGetApiJewelleryJewelleryIdResponse(w http.ResponseWriter) error
}

type GetApiJewelleryJewelleryId200JSONResponse Jewellery

func (response GetApiJewelleryJewelleryId200JSONResponse) VisitGetApiJewelleryJewelleryIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiMaterialRequestObject struct {
}

type GetApiMaterialResponseObject interface {
	VisitGetApiMaterialResponse(w http.ResponseWriter) error
}

type GetApiMaterial200JSONResponse []Material

func (response GetApiMaterial200JSONResponse) VisitGetApiMaterialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiOrderRequestObject struct {
}

type GetApiOrderResponseObject interface {
	VisitGetApiOrderResponse(w http.ResponseWriter) error
}

type GetApiOrder200JSONResponse []AccountOrder

func (response GetApiOrder200JSONResponse) VisitGetApiOrderResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiOrderRequestObject struct {
	Body *PostApiOrderJSONRequestBody
}

type PostApiOrderResponseObject interface {
	VisitPostApiOrderResponse(w http.ResponseWriter) error
}

type PostApiOrder200Response struct {
}

func (response PostApiOrder200Response) VisitPostApiOrderResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetApiOrderAccountOrderIdRequestObject struct {
	AccountOrderId ID `json:"account_order_id"`
}

type GetApiOrderAccountOrderIdResponseObject interface {
	VisitGetApiOrderAccountOrderIdResponse(w http.ResponseWriter) error
}

type GetApiOrderAccountOrderId200JSONResponse []AccountOrder

func (response GetApiOrderAccountOrderId200JSONResponse) VisitGetApiOrderAccountOrderIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiProfileRequestObject struct {
}

type GetApiProfileResponseObject interface {
	VisitGetApiProfileResponse(w http.ResponseWriter) error
}

type GetApiProfile200JSONResponse AccountProfile

func (response GetApiProfile200JSONResponse) VisitGetApiProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiProfileRequestObject struct {
	Body *PostApiProfileJSONRequestBody
}

type PostApiProfileResponseObject interface {
	VisitPostApiProfileResponse(w http.ResponseWriter) error
}

type PostApiProfile200Response struct {
}

func (response PostApiProfile200Response) VisitPostApiProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Display the main page
	// (GET /api)
	GetApi(ctx context.Context, request GetApiRequestObject) (GetApiResponseObject, error)
	// List user
	// (GET /api/admin/account)
	GetApiAdminAccount(ctx context.Context, request GetApiAdminAccountRequestObject) (GetApiAdminAccountResponseObject, error)
	// Get user
	// (GET /api/admin/account/{account_id})
	GetApiAdminAccountAccountId(ctx context.Context, request GetApiAdminAccountAccountIdRequestObject) (GetApiAdminAccountAccountIdResponseObject, error)
	// Update user status
	// (PUT /api/admin/account/{account_id})
	PutApiAdminAccountAccountId(ctx context.Context, request PutApiAdminAccountAccountIdRequestObject) (PutApiAdminAccountAccountIdResponseObject, error)
	// List admin user
	// (GET /api/admin/account_admin)
	GetApiAdminAccountAdmin(ctx context.Context, request GetApiAdminAccountAdminRequestObject) (GetApiAdminAccountAdminResponseObject, error)

	// (POST /api/admin/account_admin)
	PostApiAdminAccountAdmin(ctx context.Context, request PostApiAdminAccountAdminRequestObject) (PostApiAdminAccountAdminResponseObject, error)
	// Delete admin user
	// (DELETE /api/admin/account_admin/{account_admins_id})
	DeleteApiAdminAccountAdminAccountAdminsId(ctx context.Context, request DeleteApiAdminAccountAdminAccountAdminsIdRequestObject) (DeleteApiAdminAccountAdminAccountAdminsIdResponseObject, error)
	// Get admin user
	// (GET /api/admin/account_admin/{account_admins_id})
	GetApiAdminAccountAdminAccountAdminsId(ctx context.Context, request GetApiAdminAccountAdminAccountAdminsIdRequestObject) (GetApiAdminAccountAdminAccountAdminsIdResponseObject, error)
	// Edit admin user
	// (PUT /api/admin/account_admin/{account_admins_id})
	PutApiAdminAccountAdminAccountAdminsId(ctx context.Context, request PutApiAdminAccountAdminAccountAdminsIdRequestObject) (PutApiAdminAccountAdminAccountAdminsIdResponseObject, error)

	// (POST /api/admin/category)
	PostApiAdminCategory(ctx context.Context, request PostApiAdminCategoryRequestObject) (PostApiAdminCategoryResponseObject, error)

	// (DELETE /api/admin/category/{category_id})
	DeleteApiAdminCategoryCategoryId(ctx context.Context, request DeleteApiAdminCategoryCategoryIdRequestObject) (DeleteApiAdminCategoryCategoryIdResponseObject, error)

	// (PUT /api/admin/category/{category_id})
	PutApiAdminCategoryCategoryId(ctx context.Context, request PutApiAdminCategoryCategoryIdRequestObject) (PutApiAdminCategoryCategoryIdResponseObject, error)

	// (POST /api/admin/faq)
	PostApiAdminFaq(ctx context.Context, request PostApiAdminFaqRequestObject) (PostApiAdminFaqResponseObject, error)

	// (DELETE /api/admin/faq/{faq_id})
	DeleteApiAdminFaqFaqId(ctx context.Context, request DeleteApiAdminFaqFaqIdRequestObject) (DeleteApiAdminFaqFaqIdResponseObject, error)

	// (PUT /api/admin/faq/{faq_id})
	PutApiAdminFaqFaqId(ctx context.Context, request PutApiAdminFaqFaqIdRequestObject) (PutApiAdminFaqFaqIdResponseObject, error)

	// (POST /api/admin/gem)
	PostApiAdminGem(ctx context.Context, request PostApiAdminGemRequestObject) (PostApiAdminGemResponseObject, error)

	// (DELETE /api/admin/gem/{gem_id})
	DeleteApiAdminGemGemId(ctx context.Context, request DeleteApiAdminGemGemIdRequestObject) (DeleteApiAdminGemGemIdResponseObject, error)

	// (PUT /api/admin/gem/{gem_id})
	PutApiAdminGemGemId(ctx context.Context, request PutApiAdminGemGemIdRequestObject) (PutApiAdminGemGemIdResponseObject, error)

	// (POST /api/admin/jewellery)
	PostApiAdminJewellery(ctx context.Context, request PostApiAdminJewelleryRequestObject) (PostApiAdminJewelleryResponseObject, error)

	// (DELETE /api/admin/jewellery/{jewellery_id})
	DeleteApiAdminJewelleryJewelleryId(ctx context.Context, request DeleteApiAdminJewelleryJewelleryIdRequestObject) (DeleteApiAdminJewelleryJewelleryIdResponseObject, error)

	// (PUT /api/admin/jewellery/{jewellery_id})
	PutApiAdminJewelleryJewelleryId(ctx context.Context, request PutApiAdminJewelleryJewelleryIdRequestObject) (PutApiAdminJewelleryJewelleryIdResponseObject, error)
	// Login as admin user
	// (POST /api/admin/login)
	PostApiAdminLogin(ctx context.Context, request PostApiAdminLoginRequestObject) (PostApiAdminLoginResponseObject, error)

	// (POST /api/admin/material)
	PostApiAdminMaterial(ctx context.Context, request PostApiAdminMaterialRequestObject) (PostApiAdminMaterialResponseObject, error)

	// (DELETE /api/admin/material/{material_id})
	DeleteApiAdminMaterialMaterialId(ctx context.Context, request DeleteApiAdminMaterialMaterialIdRequestObject) (DeleteApiAdminMaterialMaterialIdResponseObject, error)

	// (PUT /api/admin/material/{material_id})
	PutApiAdminMaterialMaterialId(ctx context.Context, request PutApiAdminMaterialMaterialIdRequestObject) (PutApiAdminMaterialMaterialIdResponseObject, error)

	// (POST /api/auth/email/login)
	PostApiAuthEmailLogin(ctx context.Context, request PostApiAuthEmailLoginRequestObject) (PostApiAuthEmailLoginResponseObject, error)

	// (POST /api/auth/email/register)
	PostApiAuthEmailRegister(ctx context.Context, request PostApiAuthEmailRegisterRequestObject) (PostApiAuthEmailRegisterResponseObject, error)
	// Handle Google OAuth2 callback
	// (GET /api/auth/google/callback)
	GetApiAuthGoogleCallback(ctx context.Context, request GetApiAuthGoogleCallbackRequestObject) (GetApiAuthGoogleCallbackResponseObject, error)
	// Initiate Google OAuth2 login
	// (GET /api/auth/google/login)
	GetApiAuthGoogleLogin(ctx context.Context, request GetApiAuthGoogleLoginRequestObject) (GetApiAuthGoogleLoginResponseObject, error)

	// (GET /api/cart)
	GetApiCart(ctx context.Context, request GetApiCartRequestObject) (GetApiCartResponseObject, error)

	// (POST /api/cart)
	PostApiCart(ctx context.Context, request PostApiCartRequestObject) (PostApiCartResponseObject, error)

	// (GET /api/category)
	GetApiCategory(ctx context.Context, request GetApiCategoryRequestObject) (GetApiCategoryResponseObject, error)

	// (GET /api/faq)
	GetApiFaq(ctx context.Context, request GetApiFaqRequestObject) (GetApiFaqResponseObject, error)

	// (GET /api/favourite)
	GetApiFavourite(ctx context.Context, request GetApiFavouriteRequestObject) (GetApiFavouriteResponseObject, error)

	// (POST /api/favourite)
	PostApiFavourite(ctx context.Context, request PostApiFavouriteRequestObject) (PostApiFavouriteResponseObject, error)

	// (GET /api/gem)
	GetApiGem(ctx context.Context, request GetApiGemRequestObject) (GetApiGemResponseObject, error)
	// Health Check
	// (GET /api/health_check)
	GetApiHealthCheck(ctx context.Context, request GetApiHealthCheckRequestObject) (GetApiHealthCheckResponseObject, error)

	// (GET /api/jewellery)
	GetApiJewellery(ctx context.Context, request GetApiJewelleryRequestObject) (GetApiJewelleryResponseObject, error)

	// (GET /api/jewellery/{jewellery_id})
	GetApiJewelleryJewelleryId(ctx context.Context, request GetApiJewelleryJewelleryIdRequestObject) (GetApiJewelleryJewelleryIdResponseObject, error)

	// (GET /api/material)
	GetApiMaterial(ctx context.Context, request GetApiMaterialRequestObject) (GetApiMaterialResponseObject, error)

	// (GET /api/order)
	GetApiOrder(ctx context.Context, request GetApiOrderRequestObject) (GetApiOrderResponseObject, error)

	// (POST /api/order)
	PostApiOrder(ctx context.Context, request PostApiOrderRequestObject) (PostApiOrderResponseObject, error)

	// (GET /api/order/{account_order_id})
	GetApiOrderAccountOrderId(ctx context.Context, request GetApiOrderAccountOrderIdRequestObject) (GetApiOrderAccountOrderIdResponseObject, error)

	// (GET /api/profile)
	GetApiProfile(ctx context.Context, request GetApiProfileRequestObject) (GetApiProfileResponseObject, error)

	// (POST /api/profile)
	PostApiProfile(ctx context.Context, request PostApiProfileRequestObject) (PostApiProfileResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetApi operation middleware
func (sh *strictHandler) GetApi(ctx *gin.Context) {
	var request GetApiRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApi(ctx, request.(GetApiRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApi")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiResponseObject); ok {
		if err := validResponse.VisitGetApiResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiAdminAccount operation middleware
func (sh *strictHandler) GetApiAdminAccount(ctx *gin.Context, params GetApiAdminAccountParams) {
	var request GetApiAdminAccountRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAdminAccount(ctx, request.(GetApiAdminAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAdminAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAdminAccountResponseObject); ok {
		if err := validResponse.VisitGetApiAdminAccountResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiAdminAccountAccountId operation middleware
func (sh *strictHandler) GetApiAdminAccountAccountId(ctx *gin.Context, accountId ID) {
	var request GetApiAdminAccountAccountIdRequestObject

	request.AccountId = accountId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAdminAccountAccountId(ctx, request.(GetApiAdminAccountAccountIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAdminAccountAccountId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAdminAccountAccountIdResponseObject); ok {
		if err := validResponse.VisitGetApiAdminAccountAccountIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiAdminAccountAccountId operation middleware
func (sh *strictHandler) PutApiAdminAccountAccountId(ctx *gin.Context, accountId ID) {
	var request PutApiAdminAccountAccountIdRequestObject

	request.AccountId = accountId

	var body PutApiAdminAccountAccountIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiAdminAccountAccountId(ctx, request.(PutApiAdminAccountAccountIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiAdminAccountAccountId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiAdminAccountAccountIdResponseObject); ok {
		if err := validResponse.VisitPutApiAdminAccountAccountIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiAdminAccountAdmin operation middleware
func (sh *strictHandler) GetApiAdminAccountAdmin(ctx *gin.Context, params GetApiAdminAccountAdminParams) {
	var request GetApiAdminAccountAdminRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAdminAccountAdmin(ctx, request.(GetApiAdminAccountAdminRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAdminAccountAdmin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAdminAccountAdminResponseObject); ok {
		if err := validResponse.VisitGetApiAdminAccountAdminResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiAdminAccountAdmin operation middleware
func (sh *strictHandler) PostApiAdminAccountAdmin(ctx *gin.Context) {
	var request PostApiAdminAccountAdminRequestObject

	var body PostApiAdminAccountAdminJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAdminAccountAdmin(ctx, request.(PostApiAdminAccountAdminRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAdminAccountAdmin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAdminAccountAdminResponseObject); ok {
		if err := validResponse.VisitPostApiAdminAccountAdminResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiAdminAccountAdminAccountAdminsId operation middleware
func (sh *strictHandler) DeleteApiAdminAccountAdminAccountAdminsId(ctx *gin.Context, accountAdminsId ID) {
	var request DeleteApiAdminAccountAdminAccountAdminsIdRequestObject

	request.AccountAdminsId = accountAdminsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiAdminAccountAdminAccountAdminsId(ctx, request.(DeleteApiAdminAccountAdminAccountAdminsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiAdminAccountAdminAccountAdminsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiAdminAccountAdminAccountAdminsIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiAdminAccountAdminAccountAdminsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiAdminAccountAdminAccountAdminsId operation middleware
func (sh *strictHandler) GetApiAdminAccountAdminAccountAdminsId(ctx *gin.Context, accountAdminsId ID) {
	var request GetApiAdminAccountAdminAccountAdminsIdRequestObject

	request.AccountAdminsId = accountAdminsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAdminAccountAdminAccountAdminsId(ctx, request.(GetApiAdminAccountAdminAccountAdminsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAdminAccountAdminAccountAdminsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAdminAccountAdminAccountAdminsIdResponseObject); ok {
		if err := validResponse.VisitGetApiAdminAccountAdminAccountAdminsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiAdminAccountAdminAccountAdminsId operation middleware
func (sh *strictHandler) PutApiAdminAccountAdminAccountAdminsId(ctx *gin.Context, accountAdminsId ID) {
	var request PutApiAdminAccountAdminAccountAdminsIdRequestObject

	request.AccountAdminsId = accountAdminsId

	var body PutApiAdminAccountAdminAccountAdminsIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiAdminAccountAdminAccountAdminsId(ctx, request.(PutApiAdminAccountAdminAccountAdminsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiAdminAccountAdminAccountAdminsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiAdminAccountAdminAccountAdminsIdResponseObject); ok {
		if err := validResponse.VisitPutApiAdminAccountAdminAccountAdminsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiAdminCategory operation middleware
func (sh *strictHandler) PostApiAdminCategory(ctx *gin.Context) {
	var request PostApiAdminCategoryRequestObject

	var body PostApiAdminCategoryJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAdminCategory(ctx, request.(PostApiAdminCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAdminCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAdminCategoryResponseObject); ok {
		if err := validResponse.VisitPostApiAdminCategoryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiAdminCategoryCategoryId operation middleware
func (sh *strictHandler) DeleteApiAdminCategoryCategoryId(ctx *gin.Context, categoryId ID) {
	var request DeleteApiAdminCategoryCategoryIdRequestObject

	request.CategoryId = categoryId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiAdminCategoryCategoryId(ctx, request.(DeleteApiAdminCategoryCategoryIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiAdminCategoryCategoryId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiAdminCategoryCategoryIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiAdminCategoryCategoryIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiAdminCategoryCategoryId operation middleware
func (sh *strictHandler) PutApiAdminCategoryCategoryId(ctx *gin.Context, categoryId ID) {
	var request PutApiAdminCategoryCategoryIdRequestObject

	request.CategoryId = categoryId

	var body PutApiAdminCategoryCategoryIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiAdminCategoryCategoryId(ctx, request.(PutApiAdminCategoryCategoryIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiAdminCategoryCategoryId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiAdminCategoryCategoryIdResponseObject); ok {
		if err := validResponse.VisitPutApiAdminCategoryCategoryIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiAdminFaq operation middleware
func (sh *strictHandler) PostApiAdminFaq(ctx *gin.Context) {
	var request PostApiAdminFaqRequestObject

	var body PostApiAdminFaqJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAdminFaq(ctx, request.(PostApiAdminFaqRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAdminFaq")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAdminFaqResponseObject); ok {
		if err := validResponse.VisitPostApiAdminFaqResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiAdminFaqFaqId operation middleware
func (sh *strictHandler) DeleteApiAdminFaqFaqId(ctx *gin.Context, faqId ID) {
	var request DeleteApiAdminFaqFaqIdRequestObject

	request.FaqId = faqId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiAdminFaqFaqId(ctx, request.(DeleteApiAdminFaqFaqIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiAdminFaqFaqId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiAdminFaqFaqIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiAdminFaqFaqIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiAdminFaqFaqId operation middleware
func (sh *strictHandler) PutApiAdminFaqFaqId(ctx *gin.Context, faqId ID) {
	var request PutApiAdminFaqFaqIdRequestObject

	request.FaqId = faqId

	var body PutApiAdminFaqFaqIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiAdminFaqFaqId(ctx, request.(PutApiAdminFaqFaqIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiAdminFaqFaqId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiAdminFaqFaqIdResponseObject); ok {
		if err := validResponse.VisitPutApiAdminFaqFaqIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiAdminGem operation middleware
func (sh *strictHandler) PostApiAdminGem(ctx *gin.Context) {
	var request PostApiAdminGemRequestObject

	var body PostApiAdminGemJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAdminGem(ctx, request.(PostApiAdminGemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAdminGem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAdminGemResponseObject); ok {
		if err := validResponse.VisitPostApiAdminGemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiAdminGemGemId operation middleware
func (sh *strictHandler) DeleteApiAdminGemGemId(ctx *gin.Context, gemId ID) {
	var request DeleteApiAdminGemGemIdRequestObject

	request.GemId = gemId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiAdminGemGemId(ctx, request.(DeleteApiAdminGemGemIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiAdminGemGemId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiAdminGemGemIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiAdminGemGemIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiAdminGemGemId operation middleware
func (sh *strictHandler) PutApiAdminGemGemId(ctx *gin.Context, gemId ID) {
	var request PutApiAdminGemGemIdRequestObject

	request.GemId = gemId

	var body PutApiAdminGemGemIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiAdminGemGemId(ctx, request.(PutApiAdminGemGemIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiAdminGemGemId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiAdminGemGemIdResponseObject); ok {
		if err := validResponse.VisitPutApiAdminGemGemIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiAdminJewellery operation middleware
func (sh *strictHandler) PostApiAdminJewellery(ctx *gin.Context) {
	var request PostApiAdminJewelleryRequestObject

	var body PostApiAdminJewelleryJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAdminJewellery(ctx, request.(PostApiAdminJewelleryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAdminJewellery")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAdminJewelleryResponseObject); ok {
		if err := validResponse.VisitPostApiAdminJewelleryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiAdminJewelleryJewelleryId operation middleware
func (sh *strictHandler) DeleteApiAdminJewelleryJewelleryId(ctx *gin.Context, jewelleryId ID) {
	var request DeleteApiAdminJewelleryJewelleryIdRequestObject

	request.JewelleryId = jewelleryId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiAdminJewelleryJewelleryId(ctx, request.(DeleteApiAdminJewelleryJewelleryIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiAdminJewelleryJewelleryId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiAdminJewelleryJewelleryIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiAdminJewelleryJewelleryIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiAdminJewelleryJewelleryId operation middleware
func (sh *strictHandler) PutApiAdminJewelleryJewelleryId(ctx *gin.Context, jewelleryId ID) {
	var request PutApiAdminJewelleryJewelleryIdRequestObject

	request.JewelleryId = jewelleryId

	var body PutApiAdminJewelleryJewelleryIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiAdminJewelleryJewelleryId(ctx, request.(PutApiAdminJewelleryJewelleryIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiAdminJewelleryJewelleryId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiAdminJewelleryJewelleryIdResponseObject); ok {
		if err := validResponse.VisitPutApiAdminJewelleryJewelleryIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiAdminLogin operation middleware
func (sh *strictHandler) PostApiAdminLogin(ctx *gin.Context) {
	var request PostApiAdminLoginRequestObject

	var body PostApiAdminLoginJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAdminLogin(ctx, request.(PostApiAdminLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAdminLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAdminLoginResponseObject); ok {
		if err := validResponse.VisitPostApiAdminLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiAdminMaterial operation middleware
func (sh *strictHandler) PostApiAdminMaterial(ctx *gin.Context) {
	var request PostApiAdminMaterialRequestObject

	var body PostApiAdminMaterialJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAdminMaterial(ctx, request.(PostApiAdminMaterialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAdminMaterial")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAdminMaterialResponseObject); ok {
		if err := validResponse.VisitPostApiAdminMaterialResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiAdminMaterialMaterialId operation middleware
func (sh *strictHandler) DeleteApiAdminMaterialMaterialId(ctx *gin.Context, materialId ID) {
	var request DeleteApiAdminMaterialMaterialIdRequestObject

	request.MaterialId = materialId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiAdminMaterialMaterialId(ctx, request.(DeleteApiAdminMaterialMaterialIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiAdminMaterialMaterialId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiAdminMaterialMaterialIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiAdminMaterialMaterialIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiAdminMaterialMaterialId operation middleware
func (sh *strictHandler) PutApiAdminMaterialMaterialId(ctx *gin.Context, materialId ID) {
	var request PutApiAdminMaterialMaterialIdRequestObject

	request.MaterialId = materialId

	var body PutApiAdminMaterialMaterialIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiAdminMaterialMaterialId(ctx, request.(PutApiAdminMaterialMaterialIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiAdminMaterialMaterialId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiAdminMaterialMaterialIdResponseObject); ok {
		if err := validResponse.VisitPutApiAdminMaterialMaterialIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiAuthEmailLogin operation middleware
func (sh *strictHandler) PostApiAuthEmailLogin(ctx *gin.Context) {
	var request PostApiAuthEmailLoginRequestObject

	var body PostApiAuthEmailLoginJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAuthEmailLogin(ctx, request.(PostApiAuthEmailLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAuthEmailLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAuthEmailLoginResponseObject); ok {
		if err := validResponse.VisitPostApiAuthEmailLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiAuthEmailRegister operation middleware
func (sh *strictHandler) PostApiAuthEmailRegister(ctx *gin.Context) {
	var request PostApiAuthEmailRegisterRequestObject

	var body PostApiAuthEmailRegisterJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAuthEmailRegister(ctx, request.(PostApiAuthEmailRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAuthEmailRegister")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAuthEmailRegisterResponseObject); ok {
		if err := validResponse.VisitPostApiAuthEmailRegisterResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiAuthGoogleCallback operation middleware
func (sh *strictHandler) GetApiAuthGoogleCallback(ctx *gin.Context, params GetApiAuthGoogleCallbackParams) {
	var request GetApiAuthGoogleCallbackRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAuthGoogleCallback(ctx, request.(GetApiAuthGoogleCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAuthGoogleCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAuthGoogleCallbackResponseObject); ok {
		if err := validResponse.VisitGetApiAuthGoogleCallbackResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiAuthGoogleLogin operation middleware
func (sh *strictHandler) GetApiAuthGoogleLogin(ctx *gin.Context) {
	var request GetApiAuthGoogleLoginRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAuthGoogleLogin(ctx, request.(GetApiAuthGoogleLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAuthGoogleLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAuthGoogleLoginResponseObject); ok {
		if err := validResponse.VisitGetApiAuthGoogleLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiCart operation middleware
func (sh *strictHandler) GetApiCart(ctx *gin.Context) {
	var request GetApiCartRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiCart(ctx, request.(GetApiCartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiCart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiCartResponseObject); ok {
		if err := validResponse.VisitGetApiCartResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiCart operation middleware
func (sh *strictHandler) PostApiCart(ctx *gin.Context) {
	var request PostApiCartRequestObject

	var body PostApiCartJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiCart(ctx, request.(PostApiCartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiCart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiCartResponseObject); ok {
		if err := validResponse.VisitPostApiCartResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiCategory operation middleware
func (sh *strictHandler) GetApiCategory(ctx *gin.Context) {
	var request GetApiCategoryRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiCategory(ctx, request.(GetApiCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiCategoryResponseObject); ok {
		if err := validResponse.VisitGetApiCategoryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiFaq operation middleware
func (sh *strictHandler) GetApiFaq(ctx *gin.Context, params GetApiFaqParams) {
	var request GetApiFaqRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiFaq(ctx, request.(GetApiFaqRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiFaq")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiFaqResponseObject); ok {
		if err := validResponse.VisitGetApiFaqResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiFavourite operation middleware
func (sh *strictHandler) GetApiFavourite(ctx *gin.Context) {
	var request GetApiFavouriteRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiFavourite(ctx, request.(GetApiFavouriteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiFavourite")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiFavouriteResponseObject); ok {
		if err := validResponse.VisitGetApiFavouriteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiFavourite operation middleware
func (sh *strictHandler) PostApiFavourite(ctx *gin.Context) {
	var request PostApiFavouriteRequestObject

	var body PostApiFavouriteJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiFavourite(ctx, request.(PostApiFavouriteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiFavourite")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiFavouriteResponseObject); ok {
		if err := validResponse.VisitPostApiFavouriteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiGem operation middleware
func (sh *strictHandler) GetApiGem(ctx *gin.Context) {
	var request GetApiGemRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiGem(ctx, request.(GetApiGemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiGem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiGemResponseObject); ok {
		if err := validResponse.VisitGetApiGemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiHealthCheck operation middleware
func (sh *strictHandler) GetApiHealthCheck(ctx *gin.Context) {
	var request GetApiHealthCheckRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiHealthCheck(ctx, request.(GetApiHealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiHealthCheck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiHealthCheckResponseObject); ok {
		if err := validResponse.VisitGetApiHealthCheckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiJewellery operation middleware
func (sh *strictHandler) GetApiJewellery(ctx *gin.Context, params GetApiJewelleryParams) {
	var request GetApiJewelleryRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiJewellery(ctx, request.(GetApiJewelleryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiJewellery")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiJewelleryResponseObject); ok {
		if err := validResponse.VisitGetApiJewelleryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiJewelleryJewelleryId operation middleware
func (sh *strictHandler) GetApiJewelleryJewelleryId(ctx *gin.Context, jewelleryId ID) {
	var request GetApiJewelleryJewelleryIdRequestObject

	request.JewelleryId = jewelleryId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiJewelleryJewelleryId(ctx, request.(GetApiJewelleryJewelleryIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiJewelleryJewelleryId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiJewelleryJewelleryIdResponseObject); ok {
		if err := validResponse.VisitGetApiJewelleryJewelleryIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiMaterial operation middleware
func (sh *strictHandler) GetApiMaterial(ctx *gin.Context) {
	var request GetApiMaterialRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiMaterial(ctx, request.(GetApiMaterialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiMaterial")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiMaterialResponseObject); ok {
		if err := validResponse.VisitGetApiMaterialResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiOrder operation middleware
func (sh *strictHandler) GetApiOrder(ctx *gin.Context) {
	var request GetApiOrderRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiOrder(ctx, request.(GetApiOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiOrder")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiOrderResponseObject); ok {
		if err := validResponse.VisitGetApiOrderResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiOrder operation middleware
func (sh *strictHandler) PostApiOrder(ctx *gin.Context) {
	var request PostApiOrderRequestObject

	var body PostApiOrderJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiOrder(ctx, request.(PostApiOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiOrder")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiOrderResponseObject); ok {
		if err := validResponse.VisitPostApiOrderResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiOrderAccountOrderId operation middleware
func (sh *strictHandler) GetApiOrderAccountOrderId(ctx *gin.Context, accountOrderId ID) {
	var request GetApiOrderAccountOrderIdRequestObject

	request.AccountOrderId = accountOrderId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiOrderAccountOrderId(ctx, request.(GetApiOrderAccountOrderIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiOrderAccountOrderId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiOrderAccountOrderIdResponseObject); ok {
		if err := validResponse.VisitGetApiOrderAccountOrderIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiProfile operation middleware
func (sh *strictHandler) GetApiProfile(ctx *gin.Context) {
	var request GetApiProfileRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiProfile(ctx, request.(GetApiProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiProfile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiProfileResponseObject); ok {
		if err := validResponse.VisitGetApiProfileResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiProfile operation middleware
func (sh *strictHandler) PostApiProfile(ctx *gin.Context) {
	var request PostApiProfileRequestObject

	var body PostApiProfileJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiProfile(ctx, request.(PostApiProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiProfile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiProfileResponseObject); ok {
		if err := validResponse.VisitPostApiProfileResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xde2/jtrL/KoLu/nWvY8vO28CiN91ssundtun2HiwOzgkMRhrZ3JVEhaSSGkG++wGp",
	"F/WwHo7peAsvmsax+ZjHb4aj4ZB+Nm3ihySAgDNz+mwyewE+ki8vbJtEARcvQ0pCoByD/ADFH8ywI/6C",
	"v5AfemBOzUMXnR27J0cHx6fj04Oj45PJwf2hax9M7POTQ/fkBLnoxByYLqE+4ubUjCLsmAOTL0PRm3GK",
	"g7n5MsjGZxzxSM74joJrTs3/GuXEjhJKRwmZf8aNXwamTQFxcGaIF8mbWBPrwBofWGPDsqbyv/+R/1dp",
	"chCHA459qCPMI3MclNkeW+Px6cnp4dHx2Do9Prfkv4Hpo78+QzDnC3M6OT5eOVj89rMJQeSb03+Z4CPs",
	"mQMzXJBA0DAnZO6JFy6y4Z6Q7+bdQOEpbd46m2xXEAcHxv93Lt4f2sRXZdB50JhIddQz6+zs7Oz8/Py8",
	"Q/codLQo6mVgUniIMAVHiFSBa0HqFaAVoFMg7y6bg9x/A5sL6hPcXTg+DlbbCBIfa7eUeBZKPOhoLZLq",
	"L6J9ZZReVifH2YbpacHvlgGYYSFhp1Z/K9SxPjY/C8TfIor8Kkr1eAXE2BOhJcj/t/jX3r0kutQbpkO2",
	"MXtLGF/B667Zyg8n+z5wbdVT9KOo6bUSbRTDl4S9dPWX5JoDk3HkusWVPn6rAwRq2FBnsDl+BLkQ2t9B",
	"KNUB+Z5wJ8UZs6Zdp/yAKP8FnsDzgC63HzbqW3y+pUxpo/0hQgHHfFmKLC2lKw543hMHHOZA3yqKKghE",
	"oX6tVeoKPZKIYg57yPShfQf0voayf6cO0Ld7pCRi+hlyHAqs64IgSb5IulTGSkWSMII5+L0Gzh1mvlgg",
	"StFSLz5j4nWJOx6927IrpZCvt1uCdcb/oIjwAuWrEd6EglVoa7OKixyVJePIP8jl8cttrUMrryGr2olZ",
	"6XJmEwdq2qsrfl2USRhf1bXSmIKP6PdO1AuxdxizpMoCL4kIBmZXqRcCliDyPHQvJuY0gkFJDz/yaqHX",
	"3kOKbVgjdtn9sEfxE6uDnpj9tdbDW0pc7L1B6HOPKV84qOQtxufnifTK4tpu+ORiyvgsQH7ZHZBF0OWJ",
	"ZA5BEmc0LT3XcauXgemh2um+Is8Dbu5oLlMRksqBottMEK/BZkNOZRMg+sFUXVLICh00SLX6TB5C4Iix",
	"B1qfzuN52xMva+26rIBpezboK+aLNh/YkRY1Ng/zITv0TAlYwYZZHbeWo4gvPvoIe3/rZGvEF1+AhVX2",
	"MJtRmGPGQQ6nkBPHUslQ94R4gILK5MXudVN/QJQ3+KIdTtKUWF0VSNQzzWFO6tJpdvLJD5gccYDZFIcc",
	"k6A49MdgjubgQ8CNLziYsy4WgH00h1lES7a14Dxk09HIBwejIceui4KlMLMRZiPZZ5S86fijiTU5nOWT",
	"i7lnP1/PPgElB5fAvnMS/vSOYw/e/TuyrMnJE3beT87PJ/Ffrs/fP8F9WMdqdaFZh8ctRRcqpBLSi8pS",
	"pd0vpEhx3GDAe1T04rGkuxZtNeok2qtkR1RydfFHTRgUsKc4ws2J+yewofEVjAV6BCOk5BE74BjI4DRi",
	"/IlQvlgaFNwocAy2ZBx8wyXUsCPGiQ+UDbsoTOPjHXrQtmxhNkti4/YYRCy+wKrw/oAC48aYA09lSFzD",
	"XxoyGfDTDjnsRI4KG4MULaog+rnqq4s/mrbR3wiMO6DWkvCbZb5KstFesBoEm24hNgAXs5mr7jS2sqr7",
	"gaL5qaBAbh3P11DDpD6XPQdfm8uurr2XGPkkcHbI1Sb8Z2FxH496DX4DMF/BfV3AsYqA6E3nT3N0ac7L",
	"R3FVKyQvooCFYGMXl/NcyeetMLi5FMO3Qq2hPuXv+ED9FRwHB3PjilB4BGrgwLj1EMdB5BtPmC8MZHxC",
	"nntgY2p7INx2ons2MCbDieH73VKw+nzD+k8N/x+/OfpoE/+Gg/95kj5IHLixOO5R4ByIiQ7GJ8enRyeH",
	"x7OxdXR8fHg2+3g5+3X4LZz/FD85kHAWMf/9eHh6PBgPrcHJ0Io/eGdTEv723hqOB/HPmfiJP3PARZHH",
	"bwQ1738j8vfFI8Jyi/Em4EAD5MVNe3doepTBbBZG9x5mi06JuG1sP/qIA8XI2+ISUoJ+p2Rq3TZmIb/n",
	"egTxk6MfdDOzXL5TSPdkC5yqqxVZoJq9TzUxVABgv6Uy888NC6Z2R713p3t3+gp3und23fdCtuODmj1N",
	"tHc0e0ezdzR7R6PH0fyaTLHNbM0bIOOaeLuUr6lVbJ9INFVbr8xNNyF0TZtkJERvRYEskW3aDXhFJX25",
	"2KahYFetEVcLpyixAZLaKbbAYZjUTHn4UZaRiBl4RIP4MQQFtljxSwkmtXWb1F5Ex9idXxK7ukVqXuHA",
	"MUjEDZ9QMNC9ePnnE5rPpauUq6FcAqejEYvfHmIifX/gkupwF7c3hkPsyIeAI0wCmd7/OaI+MDCyAGYo",
	"jAFzyU3lQ3NgPgJl8XjjoTW0ZDlwCAEKsXAIQ2s4kVU/fCEZGsn3n805SAMV2kaCnBtHoAv4RYilXFlI",
	"AhajYGJZVdp/RTgwQjQHw8Es9NASHINFtg2MuZHnLSUAWOT7iC5lzlE2MvgCDD/tKhhDcybhEYbmnegi",
	"6BvJg3IjpT6sgVp5Eu4iK+UKBZKBAxXDCqLl2m1OLaEEc2o+RLHUYtMyiesyWReYYzVejmNsi0mrK48y",
	"7OGKcT3s4/7D1o0kHVzerckOby5XD1OoZKxQkTuO+t5q+WnvzpVz+N24Kdcg3tXD0iYBhxglKAw9bEuA",
	"jL6xOOjO5+pzdketW6wc3Hkph/bm7/9XgvtnzLgRMekWMojL058rQD56zmt/X3ogPvl141ShL1Uh7L6q",
	"Cew0QrMVY69VRadyzw5ivoaVUh6YYVQjwdtohyQod0J/Js5y08IrFQO/FBdjQexLFx9fkfc/ZEwlRW5k",
	"1twJ3/FR7T7ATs5K7/15/TBJNe/azrhwyL8XuJST+N0mWc/vFw7qb9X5x9Bb2+1LphvcEmF1fomwVRag",
	"0U+ULtV4pZ/o4Qjy5U7+ydJVzwEP4vqNongu5ft1AlJfs55OPJt706vhUVVGMQdOOSyW77ZBpo/L3El5",
	"WFqA2zlEaLPIjoHCLolXs0vYeOTw0cEteih6C1s9GNHqMbNjFHpEU61u1+opU95Hz0pWs4d7TMlNf3eE",
	"aTGFuk1/2N8kd4JFjUCLtoEzFz10M68r9KDJsgrFyLqZHT3HBdU9TOkKPVyhh47oysq1d9t23oYnPdjZ",
	"ip3Mk1LcVju5Bl+TnRRKTHUzO3qO98962Mk1+Nfgd8RUtju323byNjzpwc5W7ORbofi21VrUPQwdfNfU",
	"mm2H/dGzWonXw4oyirMXHdFXqvzbbbvaFS51Im4r9iYvO+5ma/KW2C3kkpTbaLuz3pmK4uY0J98hqM18",
	"lneYu2TuBOEGYn2eUX218qNVBVmdiB4tVOsZtGIv5X30rFRi9HB1Kbnp744uoFj2sdt+bidY1Ag03T4u",
	"4ouRvCilq6NLL2jR6uyKt8Bsivdi9UPOeXpnSnfmv6Q9doz/jc0ur6dZ7dIbRBp/2cLIRp53j+zvbZuR",
	"EV9cyx4f0g41u5EFCkSXidwYBSNradZvKMaXIXbYUFQ39Grns4nTPl1ye2L32e7eVo35yvwJBY4HRqwK",
	"I+U5V0m7wjP30UnbufdQuD+0JlUj/gIOpmBzg5MSeXLGuMSpyMxNgDkW8Khpv5IXG9G2IqgPoskWt0iL",
	"d4F33yotMtiyGZoxpSPRql42pcWLqzsYjZpTti50ay+bbF2NpcwlqeMGvuKc8b56o34Y5Q6E/hUc6aUJ",
	"vXuqV4ZUOuc3t22l1uLq4o8NoFC58KERi2m7LbrIfFJN7rHIlYb8evXWDS2OMkmvN+gvzavr1pyY57WY",
	"XADy+GJmL6A1wvwkm36QLTeaGfGBMRF7TBXXKKhuPVSR9LvrkEH5M6v1NlLKy4GbZM9I+UvFRfhCLAe5",
	"xApp4wZxqfni/bpSP0xxg/v142XbGpsoWFTzGq8fb91q9NLp9bdeB18fRVfsqGb/oYtZ7dKmg7X5nHxv",
	"earp3Qb5FfK6utGSTfZasJD0i1oaOIu/zGWLIVM8oaZwKedm86FS6RydljBJaiyvm02/ueClixJV+fYs",
	"WlS+IeENLXx7KErFrVwx3iDd9IyQ/orX/BLzjViDSri2LcHKNwxs1jBEtAn0sT4Z+5nYyDMgeMSUBD7I",
	"s4GFA5qeaLAgjE/PrNNTU0A0Gb9yTDMpxE8tIzkeUGkWhkqjMKxp8nsc++Zxafz3y93LfwIAAP//OK4j",
	"96l5AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
