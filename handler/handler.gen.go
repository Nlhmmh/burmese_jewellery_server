// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package handler

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "burmese_jewellery/models"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Display the main page
	// (GET /api)
	GetApi(c *gin.Context)
	// List user
	// (GET /api/admin/account)
	GetApiAdminAccount(c *gin.Context)
	// Get user
	// (GET /api/admin/account/{account_id})
	GetApiAdminAccountAccountId(c *gin.Context, accountId ID)
	// Update user status
	// (PUT /api/admin/account/{account_id})
	PutApiAdminAccountAccountId(c *gin.Context, accountId ID)
	// List admin user
	// (GET /api/admin/account_admin)
	GetApiAdminAccountAdmin(c *gin.Context)

	// (POST /api/admin/account_admin)
	PostApiAdminAccountAdmin(c *gin.Context)
	// Delete admin user
	// (DELETE /api/admin/account_admin/{account_admins_id})
	DeleteApiAdminAccountAdminAccountAdminsId(c *gin.Context, accountAdminsId ID)
	// Get admin user
	// (GET /api/admin/account_admin/{account_admins_id})
	GetApiAdminAccountAdminAccountAdminsId(c *gin.Context, accountAdminsId ID)
	// Edit admin user
	// (PUT /api/admin/account_admin/{account_admins_id})
	PutApiAdminAccountAdminAccountAdminsId(c *gin.Context, accountAdminsId ID)
	// Login as admin user
	// (POST /api/admin/login)
	PostApiAdminLogin(c *gin.Context)
	// Handle Google OAuth2 callback
	// (GET /api/auth/google/callback)
	GetApiAuthGoogleCallback(c *gin.Context, params GetApiAuthGoogleCallbackParams)
	// Initiate Google OAuth2 login
	// (GET /api/auth/google/login)
	GetApiAuthGoogleLogin(c *gin.Context)
	// Health Check
	// (GET /api/health_check)
	GetApiHealthCheck(c *gin.Context)

	// (GET /api/jewellery)
	GetApiJewellery(c *gin.Context)

	// (POST /api/jewellery)
	PostApiJewellery(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApi operation middleware
func (siw *ServerInterfaceWrapper) GetApi(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApi(c)
}

// GetApiAdminAccount operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminAccount(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAdminAccount(c)
}

// GetApiAdminAccountAccountId operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminAccountAccountId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_id" -------------
	var accountId ID

	err = runtime.BindStyledParameter("simple", false, "account_id", c.Param("account_id"), &accountId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAdminAccountAccountId(c, accountId)
}

// PutApiAdminAccountAccountId operation middleware
func (siw *ServerInterfaceWrapper) PutApiAdminAccountAccountId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_id" -------------
	var accountId ID

	err = runtime.BindStyledParameter("simple", false, "account_id", c.Param("account_id"), &accountId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiAdminAccountAccountId(c, accountId)
}

// GetApiAdminAccountAdmin operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminAccountAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAdminAccountAdmin(c)
}

// PostApiAdminAccountAdmin operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminAccountAdmin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAdminAccountAdmin(c)
}

// DeleteApiAdminAccountAdminAccountAdminsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiAdminAccountAdminAccountAdminsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_admins_id" -------------
	var accountAdminsId ID

	err = runtime.BindStyledParameter("simple", false, "account_admins_id", c.Param("account_admins_id"), &accountAdminsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_admins_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiAdminAccountAdminAccountAdminsId(c, accountAdminsId)
}

// GetApiAdminAccountAdminAccountAdminsId operation middleware
func (siw *ServerInterfaceWrapper) GetApiAdminAccountAdminAccountAdminsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_admins_id" -------------
	var accountAdminsId ID

	err = runtime.BindStyledParameter("simple", false, "account_admins_id", c.Param("account_admins_id"), &accountAdminsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_admins_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAdminAccountAdminAccountAdminsId(c, accountAdminsId)
}

// PutApiAdminAccountAdminAccountAdminsId operation middleware
func (siw *ServerInterfaceWrapper) PutApiAdminAccountAdminAccountAdminsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "account_admins_id" -------------
	var accountAdminsId ID

	err = runtime.BindStyledParameter("simple", false, "account_admins_id", c.Param("account_admins_id"), &accountAdminsId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter account_admins_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiAdminAccountAdminAccountAdminsId(c, accountAdminsId)
}

// PostApiAdminLogin operation middleware
func (siw *ServerInterfaceWrapper) PostApiAdminLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAdminLogin(c)
}

// GetApiAuthGoogleCallback operation middleware
func (siw *ServerInterfaceWrapper) GetApiAuthGoogleCallback(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiAuthGoogleCallbackParams

	// ------------- Required query parameter "state" -------------

	if paramValue := c.Query("state"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument state is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "code" -------------

	if paramValue := c.Query("code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAuthGoogleCallback(c, params)
}

// GetApiAuthGoogleLogin operation middleware
func (siw *ServerInterfaceWrapper) GetApiAuthGoogleLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiAuthGoogleLogin(c)
}

// GetApiHealthCheck operation middleware
func (siw *ServerInterfaceWrapper) GetApiHealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiHealthCheck(c)
}

// GetApiJewellery operation middleware
func (siw *ServerInterfaceWrapper) GetApiJewellery(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiJewellery(c)
}

// PostApiJewellery operation middleware
func (siw *ServerInterfaceWrapper) PostApiJewellery(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiJewellery(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api", wrapper.GetApi)
	router.GET(options.BaseURL+"/api/admin/account", wrapper.GetApiAdminAccount)
	router.GET(options.BaseURL+"/api/admin/account/:account_id", wrapper.GetApiAdminAccountAccountId)
	router.PUT(options.BaseURL+"/api/admin/account/:account_id", wrapper.PutApiAdminAccountAccountId)
	router.GET(options.BaseURL+"/api/admin/account_admin", wrapper.GetApiAdminAccountAdmin)
	router.POST(options.BaseURL+"/api/admin/account_admin", wrapper.PostApiAdminAccountAdmin)
	router.DELETE(options.BaseURL+"/api/admin/account_admin/:account_admins_id", wrapper.DeleteApiAdminAccountAdminAccountAdminsId)
	router.GET(options.BaseURL+"/api/admin/account_admin/:account_admins_id", wrapper.GetApiAdminAccountAdminAccountAdminsId)
	router.PUT(options.BaseURL+"/api/admin/account_admin/:account_admins_id", wrapper.PutApiAdminAccountAdminAccountAdminsId)
	router.POST(options.BaseURL+"/api/admin/login", wrapper.PostApiAdminLogin)
	router.GET(options.BaseURL+"/api/auth/google/callback", wrapper.GetApiAuthGoogleCallback)
	router.GET(options.BaseURL+"/api/auth/google/login", wrapper.GetApiAuthGoogleLogin)
	router.GET(options.BaseURL+"/api/health_check", wrapper.GetApiHealthCheck)
	router.GET(options.BaseURL+"/api/jewellery", wrapper.GetApiJewellery)
	router.POST(options.BaseURL+"/api/jewellery", wrapper.PostApiJewellery)
}

type GetApiRequestObject struct {
}

type GetApiResponseObject interface {
	VisitGetApiResponse(w http.ResponseWriter) error
}

type GetApi200Response struct {
}

func (response GetApi200Response) VisitGetApiResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetApiAdminAccountRequestObject struct {
}

type GetApiAdminAccountResponseObject interface {
	VisitGetApiAdminAccountResponse(w http.ResponseWriter) error
}

type GetApiAdminAccount200JSONResponse []Account

func (response GetApiAdminAccount200JSONResponse) VisitGetApiAdminAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAdminAccountAccountIdRequestObject struct {
	AccountId ID `json:"account_id"`
}

type GetApiAdminAccountAccountIdResponseObject interface {
	VisitGetApiAdminAccountAccountIdResponse(w http.ResponseWriter) error
}

type GetApiAdminAccountAccountId200JSONResponse Account

func (response GetApiAdminAccountAccountId200JSONResponse) VisitGetApiAdminAccountAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutApiAdminAccountAccountIdRequestObject struct {
	AccountId ID `json:"account_id"`
	Body      *PutApiAdminAccountAccountIdJSONRequestBody
}

type PutApiAdminAccountAccountIdResponseObject interface {
	VisitPutApiAdminAccountAccountIdResponse(w http.ResponseWriter) error
}

type GetApiAdminAccountAdminRequestObject struct {
}

type GetApiAdminAccountAdminResponseObject interface {
	VisitGetApiAdminAccountAdminResponse(w http.ResponseWriter) error
}

type GetApiAdminAccountAdmin200JSONResponse []AccountAdmin

func (response GetApiAdminAccountAdmin200JSONResponse) VisitGetApiAdminAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAdminAccountAdminRequestObject struct {
	Body *PostApiAdminAccountAdminJSONRequestBody
}

type PostApiAdminAccountAdminResponseObject interface {
	VisitPostApiAdminAccountAdminResponse(w http.ResponseWriter) error
}

type PostApiAdminAccountAdmin200Response struct {
}

func (response PostApiAdminAccountAdmin200Response) VisitPostApiAdminAccountAdminResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteApiAdminAccountAdminAccountAdminsIdRequestObject struct {
	AccountAdminsId ID `json:"account_admins_id"`
}

type DeleteApiAdminAccountAdminAccountAdminsIdResponseObject interface {
	VisitDeleteApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error
}

type DeleteApiAdminAccountAdminAccountAdminsId204Response struct {
}

func (response DeleteApiAdminAccountAdminAccountAdminsId204Response) VisitDeleteApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetApiAdminAccountAdminAccountAdminsIdRequestObject struct {
	AccountAdminsId ID `json:"account_admins_id"`
}

type GetApiAdminAccountAdminAccountAdminsIdResponseObject interface {
	VisitGetApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error
}

type GetApiAdminAccountAdminAccountAdminsId200JSONResponse AccountAdmin

func (response GetApiAdminAccountAdminAccountAdminsId200JSONResponse) VisitGetApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutApiAdminAccountAdminAccountAdminsIdRequestObject struct {
	AccountAdminsId ID `json:"account_admins_id"`
	Body            *PutApiAdminAccountAdminAccountAdminsIdJSONRequestBody
}

type PutApiAdminAccountAdminAccountAdminsIdResponseObject interface {
	VisitPutApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error
}

type PutApiAdminAccountAdminAccountAdminsId200Response struct {
}

func (response PutApiAdminAccountAdminAccountAdminsId200Response) VisitPutApiAdminAccountAdminAccountAdminsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostApiAdminLoginRequestObject struct {
	Body *PostApiAdminLoginJSONRequestBody
}

type PostApiAdminLoginResponseObject interface {
	VisitPostApiAdminLoginResponse(w http.ResponseWriter) error
}

type PostApiAdminLogin200JSONResponse struct {
	Token *string `json:"token,omitempty"`
}

func (response PostApiAdminLogin200JSONResponse) VisitPostApiAdminLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAuthGoogleCallbackRequestObject struct {
	Params GetApiAuthGoogleCallbackParams
}

type GetApiAuthGoogleCallbackResponseObject interface {
	VisitGetApiAuthGoogleCallbackResponse(w http.ResponseWriter) error
}

type GetApiAuthGoogleCallback200JSONResponse AuthGoogleCallbackResp

func (response GetApiAuthGoogleCallback200JSONResponse) VisitGetApiAuthGoogleCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiAuthGoogleLoginRequestObject struct {
}

type GetApiAuthGoogleLoginResponseObject interface {
	VisitGetApiAuthGoogleLoginResponse(w http.ResponseWriter) error
}

type GetApiAuthGoogleLogin302Response struct {
}

func (response GetApiAuthGoogleLogin302Response) VisitGetApiAuthGoogleLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(302)
	return nil
}

type GetApiHealthCheckRequestObject struct {
}

type GetApiHealthCheckResponseObject interface {
	VisitGetApiHealthCheckResponse(w http.ResponseWriter) error
}

type GetApiHealthCheck200JSONResponse struct {
	Message string `json:"message"`
}

func (response GetApiHealthCheck200JSONResponse) VisitGetApiHealthCheckResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiJewelleryRequestObject struct {
}

type GetApiJewelleryResponseObject interface {
	VisitGetApiJewelleryResponse(w http.ResponseWriter) error
}

type GetApiJewellery200JSONResponse []Jewellery

func (response GetApiJewellery200JSONResponse) VisitGetApiJewelleryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiJewelleryRequestObject struct {
	Body *PostApiJewelleryJSONRequestBody
}

type PostApiJewelleryResponseObject interface {
	VisitPostApiJewelleryResponse(w http.ResponseWriter) error
}

type PostApiJewellery200Response struct {
}

func (response PostApiJewellery200Response) VisitPostApiJewelleryResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Display the main page
	// (GET /api)
	GetApi(ctx context.Context, request GetApiRequestObject) (GetApiResponseObject, error)
	// List user
	// (GET /api/admin/account)
	GetApiAdminAccount(ctx context.Context, request GetApiAdminAccountRequestObject) (GetApiAdminAccountResponseObject, error)
	// Get user
	// (GET /api/admin/account/{account_id})
	GetApiAdminAccountAccountId(ctx context.Context, request GetApiAdminAccountAccountIdRequestObject) (GetApiAdminAccountAccountIdResponseObject, error)
	// Update user status
	// (PUT /api/admin/account/{account_id})
	PutApiAdminAccountAccountId(ctx context.Context, request PutApiAdminAccountAccountIdRequestObject) (PutApiAdminAccountAccountIdResponseObject, error)
	// List admin user
	// (GET /api/admin/account_admin)
	GetApiAdminAccountAdmin(ctx context.Context, request GetApiAdminAccountAdminRequestObject) (GetApiAdminAccountAdminResponseObject, error)

	// (POST /api/admin/account_admin)
	PostApiAdminAccountAdmin(ctx context.Context, request PostApiAdminAccountAdminRequestObject) (PostApiAdminAccountAdminResponseObject, error)
	// Delete admin user
	// (DELETE /api/admin/account_admin/{account_admins_id})
	DeleteApiAdminAccountAdminAccountAdminsId(ctx context.Context, request DeleteApiAdminAccountAdminAccountAdminsIdRequestObject) (DeleteApiAdminAccountAdminAccountAdminsIdResponseObject, error)
	// Get admin user
	// (GET /api/admin/account_admin/{account_admins_id})
	GetApiAdminAccountAdminAccountAdminsId(ctx context.Context, request GetApiAdminAccountAdminAccountAdminsIdRequestObject) (GetApiAdminAccountAdminAccountAdminsIdResponseObject, error)
	// Edit admin user
	// (PUT /api/admin/account_admin/{account_admins_id})
	PutApiAdminAccountAdminAccountAdminsId(ctx context.Context, request PutApiAdminAccountAdminAccountAdminsIdRequestObject) (PutApiAdminAccountAdminAccountAdminsIdResponseObject, error)
	// Login as admin user
	// (POST /api/admin/login)
	PostApiAdminLogin(ctx context.Context, request PostApiAdminLoginRequestObject) (PostApiAdminLoginResponseObject, error)
	// Handle Google OAuth2 callback
	// (GET /api/auth/google/callback)
	GetApiAuthGoogleCallback(ctx context.Context, request GetApiAuthGoogleCallbackRequestObject) (GetApiAuthGoogleCallbackResponseObject, error)
	// Initiate Google OAuth2 login
	// (GET /api/auth/google/login)
	GetApiAuthGoogleLogin(ctx context.Context, request GetApiAuthGoogleLoginRequestObject) (GetApiAuthGoogleLoginResponseObject, error)
	// Health Check
	// (GET /api/health_check)
	GetApiHealthCheck(ctx context.Context, request GetApiHealthCheckRequestObject) (GetApiHealthCheckResponseObject, error)

	// (GET /api/jewellery)
	GetApiJewellery(ctx context.Context, request GetApiJewelleryRequestObject) (GetApiJewelleryResponseObject, error)

	// (POST /api/jewellery)
	PostApiJewellery(ctx context.Context, request PostApiJewelleryRequestObject) (PostApiJewelleryResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetApi operation middleware
func (sh *strictHandler) GetApi(ctx *gin.Context) {
	var request GetApiRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApi(ctx, request.(GetApiRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApi")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiResponseObject); ok {
		if err := validResponse.VisitGetApiResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiAdminAccount operation middleware
func (sh *strictHandler) GetApiAdminAccount(ctx *gin.Context) {
	var request GetApiAdminAccountRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAdminAccount(ctx, request.(GetApiAdminAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAdminAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAdminAccountResponseObject); ok {
		if err := validResponse.VisitGetApiAdminAccountResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiAdminAccountAccountId operation middleware
func (sh *strictHandler) GetApiAdminAccountAccountId(ctx *gin.Context, accountId ID) {
	var request GetApiAdminAccountAccountIdRequestObject

	request.AccountId = accountId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAdminAccountAccountId(ctx, request.(GetApiAdminAccountAccountIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAdminAccountAccountId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAdminAccountAccountIdResponseObject); ok {
		if err := validResponse.VisitGetApiAdminAccountAccountIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiAdminAccountAccountId operation middleware
func (sh *strictHandler) PutApiAdminAccountAccountId(ctx *gin.Context, accountId ID) {
	var request PutApiAdminAccountAccountIdRequestObject

	request.AccountId = accountId

	var body PutApiAdminAccountAccountIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiAdminAccountAccountId(ctx, request.(PutApiAdminAccountAccountIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiAdminAccountAccountId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiAdminAccountAccountIdResponseObject); ok {
		if err := validResponse.VisitPutApiAdminAccountAccountIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiAdminAccountAdmin operation middleware
func (sh *strictHandler) GetApiAdminAccountAdmin(ctx *gin.Context) {
	var request GetApiAdminAccountAdminRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAdminAccountAdmin(ctx, request.(GetApiAdminAccountAdminRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAdminAccountAdmin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAdminAccountAdminResponseObject); ok {
		if err := validResponse.VisitGetApiAdminAccountAdminResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiAdminAccountAdmin operation middleware
func (sh *strictHandler) PostApiAdminAccountAdmin(ctx *gin.Context) {
	var request PostApiAdminAccountAdminRequestObject

	var body PostApiAdminAccountAdminJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAdminAccountAdmin(ctx, request.(PostApiAdminAccountAdminRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAdminAccountAdmin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAdminAccountAdminResponseObject); ok {
		if err := validResponse.VisitPostApiAdminAccountAdminResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiAdminAccountAdminAccountAdminsId operation middleware
func (sh *strictHandler) DeleteApiAdminAccountAdminAccountAdminsId(ctx *gin.Context, accountAdminsId ID) {
	var request DeleteApiAdminAccountAdminAccountAdminsIdRequestObject

	request.AccountAdminsId = accountAdminsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiAdminAccountAdminAccountAdminsId(ctx, request.(DeleteApiAdminAccountAdminAccountAdminsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiAdminAccountAdminAccountAdminsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiAdminAccountAdminAccountAdminsIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiAdminAccountAdminAccountAdminsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiAdminAccountAdminAccountAdminsId operation middleware
func (sh *strictHandler) GetApiAdminAccountAdminAccountAdminsId(ctx *gin.Context, accountAdminsId ID) {
	var request GetApiAdminAccountAdminAccountAdminsIdRequestObject

	request.AccountAdminsId = accountAdminsId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAdminAccountAdminAccountAdminsId(ctx, request.(GetApiAdminAccountAdminAccountAdminsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAdminAccountAdminAccountAdminsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAdminAccountAdminAccountAdminsIdResponseObject); ok {
		if err := validResponse.VisitGetApiAdminAccountAdminAccountAdminsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiAdminAccountAdminAccountAdminsId operation middleware
func (sh *strictHandler) PutApiAdminAccountAdminAccountAdminsId(ctx *gin.Context, accountAdminsId ID) {
	var request PutApiAdminAccountAdminAccountAdminsIdRequestObject

	request.AccountAdminsId = accountAdminsId

	var body PutApiAdminAccountAdminAccountAdminsIdJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiAdminAccountAdminAccountAdminsId(ctx, request.(PutApiAdminAccountAdminAccountAdminsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiAdminAccountAdminAccountAdminsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiAdminAccountAdminAccountAdminsIdResponseObject); ok {
		if err := validResponse.VisitPutApiAdminAccountAdminAccountAdminsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiAdminLogin operation middleware
func (sh *strictHandler) PostApiAdminLogin(ctx *gin.Context) {
	var request PostApiAdminLoginRequestObject

	var body PostApiAdminLoginJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAdminLogin(ctx, request.(PostApiAdminLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAdminLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAdminLoginResponseObject); ok {
		if err := validResponse.VisitPostApiAdminLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiAuthGoogleCallback operation middleware
func (sh *strictHandler) GetApiAuthGoogleCallback(ctx *gin.Context, params GetApiAuthGoogleCallbackParams) {
	var request GetApiAuthGoogleCallbackRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAuthGoogleCallback(ctx, request.(GetApiAuthGoogleCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAuthGoogleCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAuthGoogleCallbackResponseObject); ok {
		if err := validResponse.VisitGetApiAuthGoogleCallbackResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiAuthGoogleLogin operation middleware
func (sh *strictHandler) GetApiAuthGoogleLogin(ctx *gin.Context) {
	var request GetApiAuthGoogleLoginRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiAuthGoogleLogin(ctx, request.(GetApiAuthGoogleLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiAuthGoogleLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiAuthGoogleLoginResponseObject); ok {
		if err := validResponse.VisitGetApiAuthGoogleLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiHealthCheck operation middleware
func (sh *strictHandler) GetApiHealthCheck(ctx *gin.Context) {
	var request GetApiHealthCheckRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiHealthCheck(ctx, request.(GetApiHealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiHealthCheck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiHealthCheckResponseObject); ok {
		if err := validResponse.VisitGetApiHealthCheckResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiJewellery operation middleware
func (sh *strictHandler) GetApiJewellery(ctx *gin.Context) {
	var request GetApiJewelleryRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiJewellery(ctx, request.(GetApiJewelleryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiJewellery")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiJewelleryResponseObject); ok {
		if err := validResponse.VisitGetApiJewelleryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiJewellery operation middleware
func (sh *strictHandler) PostApiJewellery(ctx *gin.Context) {
	var request PostApiJewelleryRequestObject

	var body PostApiJewelleryJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiJewellery(ctx, request.(PostApiJewelleryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiJewellery")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiJewelleryResponseObject); ok {
		if err := validResponse.VisitPostApiJewelleryResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
